
xmem_setup.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a0  00800100  00000b62  00000bf6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b62  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  008001a0  008001a0  00000c96  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000c96  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000cf4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00000d30  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001020  00000000  00000000  00000e48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aa4  00000000  00000000  00001e68  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000090e  00000000  00000000  0000290c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000238  00000000  00000000  0000321c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000057c  00000000  00000000  00003454  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000598  00000000  00000000  000039d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00003f68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e2 e6       	ldi	r30, 0x62	; 98
  84:	fb e0       	ldi	r31, 0x0B	; 11
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a0 3a       	cpi	r26, 0xA0	; 160
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	a0 ea       	ldi	r26, 0xA0	; 160
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	aa 3a       	cpi	r26, 0xAA	; 170
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 57 00 	call	0xae	; 0xae <main>
  a6:	0c 94 af 05 	jmp	0xb5e	; 0xb5e <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <main>:

// USART_Init( MYUBRR );

int main(void)
{	
	xmem_init();
  ae:	0e 94 28 01 	call	0x250	; 0x250 <xmem_init>
	adc_init();
  b2:	0e 94 2f 01 	call	0x25e	; 0x25e <adc_init>
	USART_Init(MYUBRR);
  b6:	8f e1       	ldi	r24, 0x1F	; 31
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	0e 94 1b 01 	call	0x236	; 0x236 <USART_Init>
	
	MCP2515_init();
  be:	0e 94 d6 00 	call	0x1ac	; 0x1ac <MCP2515_init>
	//OLED_clear_screen();
	//mainmenu();
	
	//SPI_MasterInit();
	
	MCP2515_set_mode(MODE_LOOPBACK);
  c2:	80 e4       	ldi	r24, 0x40	; 64
  c4:	0e 94 aa 00 	call	0x154	; 0x154 <MCP2515_set_mode>
	uint8_t res = 0;
	res = MCP251_read_status();
  c8:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <MCP251_read_status>
	
	printf("%d", res);
  cc:	1f 92       	push	r1
  ce:	8f 93       	push	r24
  d0:	86 e0       	ldi	r24, 0x06	; 6
  d2:	91 e0       	ldi	r25, 0x01	; 1
  d4:	9f 93       	push	r25
  d6:	8f 93       	push	r24
  d8:	0e 94 8d 01 	call	0x31a	; 0x31a <printf>
  dc:	0f 90       	pop	r0
  de:	0f 90       	pop	r0
  e0:	0f 90       	pop	r0
  e2:	0f 90       	pop	r0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e4:	2f ef       	ldi	r18, 0xFF	; 255
  e6:	8f ef       	ldi	r24, 0xFF	; 255
  e8:	92 e0       	ldi	r25, 0x02	; 2
  ea:	21 50       	subi	r18, 0x01	; 1
  ec:	80 40       	sbci	r24, 0x00	; 0
  ee:	90 40       	sbci	r25, 0x00	; 0
  f0:	e1 f7       	brne	.-8      	; 0xea <main+0x3c>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <main+0x46>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <main+0x48>
  f6:	f6 cf       	rjmp	.-20     	; 0xe4 <main+0x36>

000000f8 <MCP2515_read>:
{
	PORTB &= ~(1 << PB4 ); // Select CAN - controller, chip select SPI
	
	SPI_write(MCP_RTS_N);   //Send RTS - instruction
	
	PORTB |= (1 << PB4 ); // Deselect CAN - controller,  chip select SPI
  f8:	cf 93       	push	r28
  fa:	c8 2f       	mov	r28, r24
  fc:	88 b3       	in	r24, 0x18	; 24
  fe:	8f 7e       	andi	r24, 0xEF	; 239
 100:	88 bb       	out	0x18, r24	; 24
 102:	83 e0       	ldi	r24, 0x03	; 3
 104:	0e 94 0a 01 	call	0x214	; 0x214 <SPI_write>
 108:	8c 2f       	mov	r24, r28
 10a:	0e 94 0a 01 	call	0x214	; 0x214 <SPI_write>
 10e:	0e 94 0e 01 	call	0x21c	; 0x21c <SPI_read>
 112:	98 b3       	in	r25, 0x18	; 24
 114:	90 61       	ori	r25, 0x10	; 16
 116:	98 bb       	out	0x18, r25	; 24
 118:	cf 91       	pop	r28
 11a:	08 95       	ret

0000011c <MCP251_bit_modify>:
	
}

void MCP251_bit_modify(uint8_t address, uint8_t mask, uint8_t data)
{
 11c:	1f 93       	push	r17
 11e:	cf 93       	push	r28
 120:	df 93       	push	r29
 122:	18 2f       	mov	r17, r24
 124:	d6 2f       	mov	r29, r22
 126:	c4 2f       	mov	r28, r20
	
	PORTB &= ~(1 << PB4 ); // Select CAN - controller, chip select SPI
 128:	88 b3       	in	r24, 0x18	; 24
 12a:	8f 7e       	andi	r24, 0xEF	; 239
 12c:	88 bb       	out	0x18, r24	; 24
	
	SPI_write(MCP_BITMOD);   //Send RTS - instruction
 12e:	85 e0       	ldi	r24, 0x05	; 5
 130:	0e 94 0a 01 	call	0x214	; 0x214 <SPI_write>
	SPI_write(address);		 //Send Address Byte
 134:	81 2f       	mov	r24, r17
 136:	0e 94 0a 01 	call	0x214	; 0x214 <SPI_write>
	SPI_write(mask);		 //Send Mask Byte
 13a:	8d 2f       	mov	r24, r29
 13c:	0e 94 0a 01 	call	0x214	; 0x214 <SPI_write>
	SPI_write(data);		 //Send Data Byte
 140:	8c 2f       	mov	r24, r28
 142:	0e 94 0a 01 	call	0x214	; 0x214 <SPI_write>
	
	
	PORTB |= (1 << PB4 ); // Deselect CAN - controller,  chip select SPI
 146:	88 b3       	in	r24, 0x18	; 24
 148:	80 61       	ori	r24, 0x10	; 16
 14a:	88 bb       	out	0x18, r24	; 24
	
	
}
 14c:	df 91       	pop	r29
 14e:	cf 91       	pop	r28
 150:	1f 91       	pop	r17
 152:	08 95       	ret

00000154 <MCP2515_set_mode>:
	
	return 0;
}

uint8_t MCP2515_set_mode(uint8_t mode)
{
 154:	cf 93       	push	r28
 156:	c8 2f       	mov	r28, r24
	uint8_t value = 0;
	
	MCP251_bit_modify(MCP_CANCTRL,MODE_MASK,mode);
 158:	48 2f       	mov	r20, r24
 15a:	60 ee       	ldi	r22, 0xE0	; 224
 15c:	8f e0       	ldi	r24, 0x0F	; 15
 15e:	0e 94 8e 00 	call	0x11c	; 0x11c <MCP251_bit_modify>
	
	value = MCP2515_read ( MCP_CANSTAT );
 162:	8e e0       	ldi	r24, 0x0E	; 14
 164:	0e 94 7c 00 	call	0xf8	; 0xf8 <MCP2515_read>
	if (( value & MODE_MASK ) != mode ) {
 168:	80 7e       	andi	r24, 0xE0	; 224
 16a:	8c 17       	cp	r24, r28
 16c:	51 f0       	breq	.+20     	; 0x182 <MCP2515_set_mode+0x2e>
		printf (" mcp2515 is not changed to desired mode !\n\r");
 16e:	89 e0       	ldi	r24, 0x09	; 9
 170:	91 e0       	ldi	r25, 0x01	; 1
 172:	9f 93       	push	r25
 174:	8f 93       	push	r24
 176:	0e 94 8d 01 	call	0x31a	; 0x31a <printf>
		return 1;
 17a:	0f 90       	pop	r0
 17c:	0f 90       	pop	r0
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	09 c0       	rjmp	.+18     	; 0x194 <MCP2515_set_mode+0x40>
		
	}
	
	printf("MCP successfully changed mode\n\r");
 182:	85 e3       	ldi	r24, 0x35	; 53
 184:	91 e0       	ldi	r25, 0x01	; 1
 186:	9f 93       	push	r25
 188:	8f 93       	push	r24
 18a:	0e 94 8d 01 	call	0x31a	; 0x31a <printf>
	
	return 0;
 18e:	0f 90       	pop	r0
 190:	0f 90       	pop	r0
 192:	80 e0       	ldi	r24, 0x00	; 0
	
}
 194:	cf 91       	pop	r28
 196:	08 95       	ret

00000198 <MCP251_reset>:
}


void MCP251_reset(void)
{
	PORTB &= ~(1 << PB4 ); // Select CAN - controller, chip select SPI
 198:	88 b3       	in	r24, 0x18	; 24
 19a:	8f 7e       	andi	r24, 0xEF	; 239
 19c:	88 bb       	out	0x18, r24	; 24
		
	SPI_write(MCP_RESET);   //Send Reset - instruction
 19e:	80 ec       	ldi	r24, 0xC0	; 192
 1a0:	0e 94 0a 01 	call	0x214	; 0x214 <SPI_write>
		
	PORTB |= (1 << PB4 ); // Deselect CAN - controller,  chip select SPI
 1a4:	88 b3       	in	r24, 0x18	; 24
 1a6:	80 61       	ori	r24, 0x10	; 16
 1a8:	88 bb       	out	0x18, r24	; 24
 1aa:	08 95       	ret

000001ac <MCP2515_init>:


uint8_t  MCP2515_init(void)
{
	uint8_t value = 0;
	SPI_MasterInit (); // Initialize SPI
 1ac:	0e 94 00 01 	call	0x200	; 0x200 <SPI_MasterInit>
	MCP251_reset (); // Send reset - command
 1b0:	0e 94 cc 00 	call	0x198	; 0x198 <MCP251_reset>
	
	// Self - test
	value = MCP2515_read ( MCP_CANSTAT );
 1b4:	8e e0       	ldi	r24, 0x0E	; 14
 1b6:	0e 94 7c 00 	call	0xf8	; 0xf8 <MCP2515_read>
	//printf( "value & mask %d", value & MODE_MASK);
	//printf("\n\r");	
	//printf( "mode_config %d", MODE_CONFIG);
	//printf("\n\n\r");
	
	if (( value & MODE_MASK ) != MODE_CONFIG ) {
 1ba:	80 7e       	andi	r24, 0xE0	; 224
 1bc:	80 38       	cpi	r24, 0x80	; 128
 1be:	51 f0       	breq	.+20     	; 0x1d4 <MCP2515_init+0x28>
		printf (" MCP2515 is NOT in configuration mode after reset !\n\r");
 1c0:	85 e5       	ldi	r24, 0x55	; 85
 1c2:	91 e0       	ldi	r25, 0x01	; 1
 1c4:	9f 93       	push	r25
 1c6:	8f 93       	push	r24
 1c8:	0e 94 8d 01 	call	0x31a	; 0x31a <printf>
		return 1;
 1cc:	0f 90       	pop	r0
 1ce:	0f 90       	pop	r0
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	08 95       	ret
		
	}
	printf("MCP in Config-mode\n\r");
 1d4:	8b e8       	ldi	r24, 0x8B	; 139
 1d6:	91 e0       	ldi	r25, 0x01	; 1
 1d8:	9f 93       	push	r25
 1da:	8f 93       	push	r24
 1dc:	0e 94 8d 01 	call	0x31a	; 0x31a <printf>
	
	
	
	
	
	return 0;
 1e0:	0f 90       	pop	r0
 1e2:	0f 90       	pop	r0
 1e4:	80 e0       	ldi	r24, 0x00	; 0
}
 1e6:	08 95       	ret

000001e8 <MCP251_read_status>:
uint8_t MCP251_read_status(void)
{
	
	uint8_t result;
	
	PORTB &= ~(1 << PB4 ); // Select CAN - controller, chip select SPI
 1e8:	88 b3       	in	r24, 0x18	; 24
 1ea:	8f 7e       	andi	r24, 0xEF	; 239
 1ec:	88 bb       	out	0x18, r24	; 24
		
	SPI_write(MCP_READ_STATUS);   //Send Read status - instruction
 1ee:	80 ea       	ldi	r24, 0xA0	; 160
 1f0:	0e 94 0a 01 	call	0x214	; 0x214 <SPI_write>
	result = SPI_read();		  //Read result 
 1f4:	0e 94 0e 01 	call	0x21c	; 0x21c <SPI_read>
		
	PORTB |= (1 << PB4 ); // Deselect CAN - controller,  chip select SPI
 1f8:	98 b3       	in	r25, 0x18	; 24
 1fa:	90 61       	ori	r25, 0x10	; 16
 1fc:	98 bb       	out	0x18, r25	; 24
		
	return result;

}
 1fe:	08 95       	ret

00000200 <SPI_MasterInit>:

void SPI_MasterInit(void)
{	
	
	/* Set MOSI, SCK, *SS as output, all others input */
	DDRB |= (1<<DDB5)|(1<<DDB7)|(1<<DDB4);
 200:	87 b3       	in	r24, 0x17	; 23
 202:	80 6b       	ori	r24, 0xB0	; 176
 204:	87 bb       	out	0x17, r24	; 23
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0);
 206:	8d b1       	in	r24, 0x0d	; 13
 208:	81 65       	ori	r24, 0x51	; 81
 20a:	8d b9       	out	0x0d, r24	; 13
	//set CPOL and CPHA

	
	
	//set MISO to input
	DDRB &= ~(1<<DDB6);
 20c:	87 b3       	in	r24, 0x17	; 23
 20e:	8f 7b       	andi	r24, 0xBF	; 191
 210:	87 bb       	out	0x17, r24	; 23
 212:	08 95       	ret

00000214 <SPI_write>:

void SPI_write(uint8_t data)
{
	
	/* Start transmission */
	SPDR = data;
 214:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
 216:	77 9b       	sbis	0x0e, 7	; 14
 218:	fe cf       	rjmp	.-4      	; 0x216 <SPI_write+0x2>

	
}
 21a:	08 95       	ret

0000021c <SPI_read>:

uint8_t SPI_read(void)
{
	// Send dummy-byte to receive data
	SPI_write(0xF);
 21c:	8f e0       	ldi	r24, 0x0F	; 15
 21e:	0e 94 0a 01 	call	0x214	; 0x214 <SPI_write>
	
	return SPDR;
 222:	8f b1       	in	r24, 0x0f	; 15

}
 224:	08 95       	ret

00000226 <USART_Transmit>:
}

void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) )
 226:	5d 9b       	sbis	0x0b, 5	; 11
 228:	fe cf       	rjmp	.-4      	; 0x226 <USART_Transmit>
	;
	/* Put data into buffer, sends the data */
	UDR0 = data;
 22a:	8c b9       	out	0x0c, r24	; 12
 22c:	08 95       	ret

0000022e <USART_Receive>:
}

unsigned char USART_Receive( void )
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) )
 22e:	5f 9b       	sbis	0x0b, 7	; 11
 230:	fe cf       	rjmp	.-4      	; 0x22e <USART_Receive>
	;
	/* Get and return received data from buffer */
	return UDR0;
 232:	8c b1       	in	r24, 0x0c	; 12
}
 234:	08 95       	ret

00000236 <USART_Init>:


void USART_Init( unsigned int ubrr )
{
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
 236:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
 238:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 23a:	88 e1       	ldi	r24, 0x18	; 24
 23c:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
 23e:	8e e8       	ldi	r24, 0x8E	; 142
 240:	80 bd       	out	0x20, r24	; 32

	fdevopen(USART_Transmit, USART_Receive);
 242:	67 e1       	ldi	r22, 0x17	; 23
 244:	71 e0       	ldi	r23, 0x01	; 1
 246:	83 e1       	ldi	r24, 0x13	; 19
 248:	91 e0       	ldi	r25, 0x01	; 1
 24a:	0e 94 42 01 	call	0x284	; 0x284 <fdevopen>
 24e:	08 95       	ret

00000250 <xmem_init>:
 */ 

#include "XMEMdriver.h"

void xmem_init ( void ){
	MCUCR |= (1 << SRE ); // enable XMEM
 250:	85 b7       	in	r24, 0x35	; 53
 252:	80 68       	ori	r24, 0x80	; 128
 254:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1 << XMM2 ); // mask unused bits
 256:	80 b7       	in	r24, 0x30	; 48
 258:	80 62       	ori	r24, 0x20	; 32
 25a:	80 bf       	out	0x30, r24	; 48
 25c:	08 95       	ret

0000025e <adc_init>:
}

void adc_init ( void ){

	DDRD |= (1<<DDD5); // Set Data Direction PD5 to Write (output)
 25e:	81 b3       	in	r24, 0x11	; 17
 260:	80 62       	ori	r24, 0x20	; 32
 262:	81 bb       	out	0x11, r24	; 17
	DDRD |= (0<<DDD4); // Set Data Direction PD4 to Read (input). Used for BUSY from ADC
 264:	81 b3       	in	r24, 0x11	; 17
 266:	81 bb       	out	0x11, r24	; 17
	
	TCCR1B |= (1<<WGM12 | 0<<WGM13); // Set CTC mode
 268:	8e b5       	in	r24, 0x2e	; 46
 26a:	88 60       	ori	r24, 0x08	; 8
 26c:	8e bd       	out	0x2e, r24	; 46
	TCCR1A |= (0<<WGM10 | 0<<WGM11); // Set CTC mode
 26e:	8f b5       	in	r24, 0x2f	; 47
 270:	8f bd       	out	0x2f, r24	; 47
	
	TCCR1B |= (1<<CS10 | 0<<CS11 | 0<<CS12); //Clk frequency equal to system clock
 272:	8e b5       	in	r24, 0x2e	; 46
 274:	81 60       	ori	r24, 0x01	; 1
 276:	8e bd       	out	0x2e, r24	; 46

	TCCR1A |= (0<<COM1A1 | 1<<COM1A0); // Set 0C1A to toggle on match
 278:	8f b5       	in	r24, 0x2f	; 47
 27a:	80 64       	ori	r24, 0x40	; 64
 27c:	8f bd       	out	0x2f, r24	; 47
	
	OCR1A = 0x0; // Set compare to 0. Timer reset on compare equal, will always stay at 0, toggle every cycle (?)
 27e:	1b bc       	out	0x2b, r1	; 43
 280:	1a bc       	out	0x2a, r1	; 42
 282:	08 95       	ret

00000284 <fdevopen>:
 284:	0f 93       	push	r16
 286:	1f 93       	push	r17
 288:	cf 93       	push	r28
 28a:	df 93       	push	r29
 28c:	00 97       	sbiw	r24, 0x00	; 0
 28e:	31 f4       	brne	.+12     	; 0x29c <fdevopen+0x18>
 290:	61 15       	cp	r22, r1
 292:	71 05       	cpc	r23, r1
 294:	19 f4       	brne	.+6      	; 0x29c <fdevopen+0x18>
 296:	80 e0       	ldi	r24, 0x00	; 0
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	3a c0       	rjmp	.+116    	; 0x310 <fdevopen+0x8c>
 29c:	8b 01       	movw	r16, r22
 29e:	ec 01       	movw	r28, r24
 2a0:	6e e0       	ldi	r22, 0x0E	; 14
 2a2:	70 e0       	ldi	r23, 0x00	; 0
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	0e 94 84 03 	call	0x708	; 0x708 <calloc>
 2ac:	fc 01       	movw	r30, r24
 2ae:	89 2b       	or	r24, r25
 2b0:	91 f3       	breq	.-28     	; 0x296 <fdevopen+0x12>
 2b2:	80 e8       	ldi	r24, 0x80	; 128
 2b4:	83 83       	std	Z+3, r24	; 0x03
 2b6:	01 15       	cp	r16, r1
 2b8:	11 05       	cpc	r17, r1
 2ba:	71 f0       	breq	.+28     	; 0x2d8 <fdevopen+0x54>
 2bc:	13 87       	std	Z+11, r17	; 0x0b
 2be:	02 87       	std	Z+10, r16	; 0x0a
 2c0:	81 e8       	ldi	r24, 0x81	; 129
 2c2:	83 83       	std	Z+3, r24	; 0x03
 2c4:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <__data_end>
 2c8:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <__data_end+0x1>
 2cc:	89 2b       	or	r24, r25
 2ce:	21 f4       	brne	.+8      	; 0x2d8 <fdevopen+0x54>
 2d0:	f0 93 a1 01 	sts	0x01A1, r31	; 0x8001a1 <__data_end+0x1>
 2d4:	e0 93 a0 01 	sts	0x01A0, r30	; 0x8001a0 <__data_end>
 2d8:	20 97       	sbiw	r28, 0x00	; 0
 2da:	c9 f0       	breq	.+50     	; 0x30e <fdevopen+0x8a>
 2dc:	d1 87       	std	Z+9, r29	; 0x09
 2de:	c0 87       	std	Z+8, r28	; 0x08
 2e0:	83 81       	ldd	r24, Z+3	; 0x03
 2e2:	82 60       	ori	r24, 0x02	; 2
 2e4:	83 83       	std	Z+3, r24	; 0x03
 2e6:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <__data_end+0x2>
 2ea:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <__data_end+0x3>
 2ee:	89 2b       	or	r24, r25
 2f0:	71 f4       	brne	.+28     	; 0x30e <fdevopen+0x8a>
 2f2:	f0 93 a3 01 	sts	0x01A3, r31	; 0x8001a3 <__data_end+0x3>
 2f6:	e0 93 a2 01 	sts	0x01A2, r30	; 0x8001a2 <__data_end+0x2>
 2fa:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <__data_end+0x4>
 2fe:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <__data_end+0x5>
 302:	89 2b       	or	r24, r25
 304:	21 f4       	brne	.+8      	; 0x30e <fdevopen+0x8a>
 306:	f0 93 a5 01 	sts	0x01A5, r31	; 0x8001a5 <__data_end+0x5>
 30a:	e0 93 a4 01 	sts	0x01A4, r30	; 0x8001a4 <__data_end+0x4>
 30e:	cf 01       	movw	r24, r30
 310:	df 91       	pop	r29
 312:	cf 91       	pop	r28
 314:	1f 91       	pop	r17
 316:	0f 91       	pop	r16
 318:	08 95       	ret

0000031a <printf>:
 31a:	a0 e0       	ldi	r26, 0x00	; 0
 31c:	b0 e0       	ldi	r27, 0x00	; 0
 31e:	e3 e9       	ldi	r30, 0x93	; 147
 320:	f1 e0       	ldi	r31, 0x01	; 1
 322:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__prologue_saves__+0x20>
 326:	ae 01       	movw	r20, r28
 328:	4b 5f       	subi	r20, 0xFB	; 251
 32a:	5f 4f       	sbci	r21, 0xFF	; 255
 32c:	fa 01       	movw	r30, r20
 32e:	61 91       	ld	r22, Z+
 330:	71 91       	ld	r23, Z+
 332:	af 01       	movw	r20, r30
 334:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <__data_end+0x2>
 338:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <__data_end+0x3>
 33c:	0e 94 a3 01 	call	0x346	; 0x346 <vfprintf>
 340:	e2 e0       	ldi	r30, 0x02	; 2
 342:	0c 94 a4 05 	jmp	0xb48	; 0xb48 <__epilogue_restores__+0x20>

00000346 <vfprintf>:
 346:	ab e0       	ldi	r26, 0x0B	; 11
 348:	b0 e0       	ldi	r27, 0x00	; 0
 34a:	e9 ea       	ldi	r30, 0xA9	; 169
 34c:	f1 e0       	ldi	r31, 0x01	; 1
 34e:	0c 94 78 05 	jmp	0xaf0	; 0xaf0 <__prologue_saves__>
 352:	6c 01       	movw	r12, r24
 354:	7b 01       	movw	r14, r22
 356:	8a 01       	movw	r16, r20
 358:	fc 01       	movw	r30, r24
 35a:	17 82       	std	Z+7, r1	; 0x07
 35c:	16 82       	std	Z+6, r1	; 0x06
 35e:	83 81       	ldd	r24, Z+3	; 0x03
 360:	81 ff       	sbrs	r24, 1
 362:	cc c1       	rjmp	.+920    	; 0x6fc <__stack+0x1fd>
 364:	ce 01       	movw	r24, r28
 366:	01 96       	adiw	r24, 0x01	; 1
 368:	3c 01       	movw	r6, r24
 36a:	f6 01       	movw	r30, r12
 36c:	93 81       	ldd	r25, Z+3	; 0x03
 36e:	f7 01       	movw	r30, r14
 370:	93 fd       	sbrc	r25, 3
 372:	85 91       	lpm	r24, Z+
 374:	93 ff       	sbrs	r25, 3
 376:	81 91       	ld	r24, Z+
 378:	7f 01       	movw	r14, r30
 37a:	88 23       	and	r24, r24
 37c:	09 f4       	brne	.+2      	; 0x380 <vfprintf+0x3a>
 37e:	ba c1       	rjmp	.+884    	; 0x6f4 <__stack+0x1f5>
 380:	85 32       	cpi	r24, 0x25	; 37
 382:	39 f4       	brne	.+14     	; 0x392 <vfprintf+0x4c>
 384:	93 fd       	sbrc	r25, 3
 386:	85 91       	lpm	r24, Z+
 388:	93 ff       	sbrs	r25, 3
 38a:	81 91       	ld	r24, Z+
 38c:	7f 01       	movw	r14, r30
 38e:	85 32       	cpi	r24, 0x25	; 37
 390:	29 f4       	brne	.+10     	; 0x39c <vfprintf+0x56>
 392:	b6 01       	movw	r22, r12
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	0e 94 de 04 	call	0x9bc	; 0x9bc <fputc>
 39a:	e7 cf       	rjmp	.-50     	; 0x36a <vfprintf+0x24>
 39c:	91 2c       	mov	r9, r1
 39e:	21 2c       	mov	r2, r1
 3a0:	31 2c       	mov	r3, r1
 3a2:	ff e1       	ldi	r31, 0x1F	; 31
 3a4:	f3 15       	cp	r31, r3
 3a6:	d8 f0       	brcs	.+54     	; 0x3de <vfprintf+0x98>
 3a8:	8b 32       	cpi	r24, 0x2B	; 43
 3aa:	79 f0       	breq	.+30     	; 0x3ca <vfprintf+0x84>
 3ac:	38 f4       	brcc	.+14     	; 0x3bc <vfprintf+0x76>
 3ae:	80 32       	cpi	r24, 0x20	; 32
 3b0:	79 f0       	breq	.+30     	; 0x3d0 <vfprintf+0x8a>
 3b2:	83 32       	cpi	r24, 0x23	; 35
 3b4:	a1 f4       	brne	.+40     	; 0x3de <vfprintf+0x98>
 3b6:	23 2d       	mov	r18, r3
 3b8:	20 61       	ori	r18, 0x10	; 16
 3ba:	1d c0       	rjmp	.+58     	; 0x3f6 <vfprintf+0xb0>
 3bc:	8d 32       	cpi	r24, 0x2D	; 45
 3be:	61 f0       	breq	.+24     	; 0x3d8 <vfprintf+0x92>
 3c0:	80 33       	cpi	r24, 0x30	; 48
 3c2:	69 f4       	brne	.+26     	; 0x3de <vfprintf+0x98>
 3c4:	23 2d       	mov	r18, r3
 3c6:	21 60       	ori	r18, 0x01	; 1
 3c8:	16 c0       	rjmp	.+44     	; 0x3f6 <vfprintf+0xb0>
 3ca:	83 2d       	mov	r24, r3
 3cc:	82 60       	ori	r24, 0x02	; 2
 3ce:	38 2e       	mov	r3, r24
 3d0:	e3 2d       	mov	r30, r3
 3d2:	e4 60       	ori	r30, 0x04	; 4
 3d4:	3e 2e       	mov	r3, r30
 3d6:	2a c0       	rjmp	.+84     	; 0x42c <__DATA_REGION_LENGTH__+0x2c>
 3d8:	f3 2d       	mov	r31, r3
 3da:	f8 60       	ori	r31, 0x08	; 8
 3dc:	1d c0       	rjmp	.+58     	; 0x418 <__DATA_REGION_LENGTH__+0x18>
 3de:	37 fc       	sbrc	r3, 7
 3e0:	2d c0       	rjmp	.+90     	; 0x43c <__DATA_REGION_LENGTH__+0x3c>
 3e2:	20 ed       	ldi	r18, 0xD0	; 208
 3e4:	28 0f       	add	r18, r24
 3e6:	2a 30       	cpi	r18, 0x0A	; 10
 3e8:	40 f0       	brcs	.+16     	; 0x3fa <vfprintf+0xb4>
 3ea:	8e 32       	cpi	r24, 0x2E	; 46
 3ec:	b9 f4       	brne	.+46     	; 0x41c <__DATA_REGION_LENGTH__+0x1c>
 3ee:	36 fc       	sbrc	r3, 6
 3f0:	81 c1       	rjmp	.+770    	; 0x6f4 <__stack+0x1f5>
 3f2:	23 2d       	mov	r18, r3
 3f4:	20 64       	ori	r18, 0x40	; 64
 3f6:	32 2e       	mov	r3, r18
 3f8:	19 c0       	rjmp	.+50     	; 0x42c <__DATA_REGION_LENGTH__+0x2c>
 3fa:	36 fe       	sbrs	r3, 6
 3fc:	06 c0       	rjmp	.+12     	; 0x40a <__DATA_REGION_LENGTH__+0xa>
 3fe:	8a e0       	ldi	r24, 0x0A	; 10
 400:	98 9e       	mul	r9, r24
 402:	20 0d       	add	r18, r0
 404:	11 24       	eor	r1, r1
 406:	92 2e       	mov	r9, r18
 408:	11 c0       	rjmp	.+34     	; 0x42c <__DATA_REGION_LENGTH__+0x2c>
 40a:	ea e0       	ldi	r30, 0x0A	; 10
 40c:	2e 9e       	mul	r2, r30
 40e:	20 0d       	add	r18, r0
 410:	11 24       	eor	r1, r1
 412:	22 2e       	mov	r2, r18
 414:	f3 2d       	mov	r31, r3
 416:	f0 62       	ori	r31, 0x20	; 32
 418:	3f 2e       	mov	r3, r31
 41a:	08 c0       	rjmp	.+16     	; 0x42c <__DATA_REGION_LENGTH__+0x2c>
 41c:	8c 36       	cpi	r24, 0x6C	; 108
 41e:	21 f4       	brne	.+8      	; 0x428 <__DATA_REGION_LENGTH__+0x28>
 420:	83 2d       	mov	r24, r3
 422:	80 68       	ori	r24, 0x80	; 128
 424:	38 2e       	mov	r3, r24
 426:	02 c0       	rjmp	.+4      	; 0x42c <__DATA_REGION_LENGTH__+0x2c>
 428:	88 36       	cpi	r24, 0x68	; 104
 42a:	41 f4       	brne	.+16     	; 0x43c <__DATA_REGION_LENGTH__+0x3c>
 42c:	f7 01       	movw	r30, r14
 42e:	93 fd       	sbrc	r25, 3
 430:	85 91       	lpm	r24, Z+
 432:	93 ff       	sbrs	r25, 3
 434:	81 91       	ld	r24, Z+
 436:	7f 01       	movw	r14, r30
 438:	81 11       	cpse	r24, r1
 43a:	b3 cf       	rjmp	.-154    	; 0x3a2 <vfprintf+0x5c>
 43c:	98 2f       	mov	r25, r24
 43e:	9f 7d       	andi	r25, 0xDF	; 223
 440:	95 54       	subi	r25, 0x45	; 69
 442:	93 30       	cpi	r25, 0x03	; 3
 444:	28 f4       	brcc	.+10     	; 0x450 <__DATA_REGION_LENGTH__+0x50>
 446:	0c 5f       	subi	r16, 0xFC	; 252
 448:	1f 4f       	sbci	r17, 0xFF	; 255
 44a:	9f e3       	ldi	r25, 0x3F	; 63
 44c:	99 83       	std	Y+1, r25	; 0x01
 44e:	0d c0       	rjmp	.+26     	; 0x46a <__DATA_REGION_LENGTH__+0x6a>
 450:	83 36       	cpi	r24, 0x63	; 99
 452:	31 f0       	breq	.+12     	; 0x460 <__DATA_REGION_LENGTH__+0x60>
 454:	83 37       	cpi	r24, 0x73	; 115
 456:	71 f0       	breq	.+28     	; 0x474 <__DATA_REGION_LENGTH__+0x74>
 458:	83 35       	cpi	r24, 0x53	; 83
 45a:	09 f0       	breq	.+2      	; 0x45e <__DATA_REGION_LENGTH__+0x5e>
 45c:	59 c0       	rjmp	.+178    	; 0x510 <__stack+0x11>
 45e:	21 c0       	rjmp	.+66     	; 0x4a2 <__DATA_REGION_LENGTH__+0xa2>
 460:	f8 01       	movw	r30, r16
 462:	80 81       	ld	r24, Z
 464:	89 83       	std	Y+1, r24	; 0x01
 466:	0e 5f       	subi	r16, 0xFE	; 254
 468:	1f 4f       	sbci	r17, 0xFF	; 255
 46a:	88 24       	eor	r8, r8
 46c:	83 94       	inc	r8
 46e:	91 2c       	mov	r9, r1
 470:	53 01       	movw	r10, r6
 472:	13 c0       	rjmp	.+38     	; 0x49a <__DATA_REGION_LENGTH__+0x9a>
 474:	28 01       	movw	r4, r16
 476:	f2 e0       	ldi	r31, 0x02	; 2
 478:	4f 0e       	add	r4, r31
 47a:	51 1c       	adc	r5, r1
 47c:	f8 01       	movw	r30, r16
 47e:	a0 80       	ld	r10, Z
 480:	b1 80       	ldd	r11, Z+1	; 0x01
 482:	36 fe       	sbrs	r3, 6
 484:	03 c0       	rjmp	.+6      	; 0x48c <__DATA_REGION_LENGTH__+0x8c>
 486:	69 2d       	mov	r22, r9
 488:	70 e0       	ldi	r23, 0x00	; 0
 48a:	02 c0       	rjmp	.+4      	; 0x490 <__DATA_REGION_LENGTH__+0x90>
 48c:	6f ef       	ldi	r22, 0xFF	; 255
 48e:	7f ef       	ldi	r23, 0xFF	; 255
 490:	c5 01       	movw	r24, r10
 492:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <strnlen>
 496:	4c 01       	movw	r8, r24
 498:	82 01       	movw	r16, r4
 49a:	f3 2d       	mov	r31, r3
 49c:	ff 77       	andi	r31, 0x7F	; 127
 49e:	3f 2e       	mov	r3, r31
 4a0:	16 c0       	rjmp	.+44     	; 0x4ce <__DATA_REGION_LENGTH__+0xce>
 4a2:	28 01       	movw	r4, r16
 4a4:	22 e0       	ldi	r18, 0x02	; 2
 4a6:	42 0e       	add	r4, r18
 4a8:	51 1c       	adc	r5, r1
 4aa:	f8 01       	movw	r30, r16
 4ac:	a0 80       	ld	r10, Z
 4ae:	b1 80       	ldd	r11, Z+1	; 0x01
 4b0:	36 fe       	sbrs	r3, 6
 4b2:	03 c0       	rjmp	.+6      	; 0x4ba <__DATA_REGION_LENGTH__+0xba>
 4b4:	69 2d       	mov	r22, r9
 4b6:	70 e0       	ldi	r23, 0x00	; 0
 4b8:	02 c0       	rjmp	.+4      	; 0x4be <__DATA_REGION_LENGTH__+0xbe>
 4ba:	6f ef       	ldi	r22, 0xFF	; 255
 4bc:	7f ef       	ldi	r23, 0xFF	; 255
 4be:	c5 01       	movw	r24, r10
 4c0:	0e 94 c1 04 	call	0x982	; 0x982 <strnlen_P>
 4c4:	4c 01       	movw	r8, r24
 4c6:	f3 2d       	mov	r31, r3
 4c8:	f0 68       	ori	r31, 0x80	; 128
 4ca:	3f 2e       	mov	r3, r31
 4cc:	82 01       	movw	r16, r4
 4ce:	33 fc       	sbrc	r3, 3
 4d0:	1b c0       	rjmp	.+54     	; 0x508 <__stack+0x9>
 4d2:	82 2d       	mov	r24, r2
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	88 16       	cp	r8, r24
 4d8:	99 06       	cpc	r9, r25
 4da:	b0 f4       	brcc	.+44     	; 0x508 <__stack+0x9>
 4dc:	b6 01       	movw	r22, r12
 4de:	80 e2       	ldi	r24, 0x20	; 32
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	0e 94 de 04 	call	0x9bc	; 0x9bc <fputc>
 4e6:	2a 94       	dec	r2
 4e8:	f4 cf       	rjmp	.-24     	; 0x4d2 <__DATA_REGION_LENGTH__+0xd2>
 4ea:	f5 01       	movw	r30, r10
 4ec:	37 fc       	sbrc	r3, 7
 4ee:	85 91       	lpm	r24, Z+
 4f0:	37 fe       	sbrs	r3, 7
 4f2:	81 91       	ld	r24, Z+
 4f4:	5f 01       	movw	r10, r30
 4f6:	b6 01       	movw	r22, r12
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	0e 94 de 04 	call	0x9bc	; 0x9bc <fputc>
 4fe:	21 10       	cpse	r2, r1
 500:	2a 94       	dec	r2
 502:	21 e0       	ldi	r18, 0x01	; 1
 504:	82 1a       	sub	r8, r18
 506:	91 08       	sbc	r9, r1
 508:	81 14       	cp	r8, r1
 50a:	91 04       	cpc	r9, r1
 50c:	71 f7       	brne	.-36     	; 0x4ea <__DATA_REGION_LENGTH__+0xea>
 50e:	e8 c0       	rjmp	.+464    	; 0x6e0 <__stack+0x1e1>
 510:	84 36       	cpi	r24, 0x64	; 100
 512:	11 f0       	breq	.+4      	; 0x518 <__stack+0x19>
 514:	89 36       	cpi	r24, 0x69	; 105
 516:	41 f5       	brne	.+80     	; 0x568 <__stack+0x69>
 518:	f8 01       	movw	r30, r16
 51a:	37 fe       	sbrs	r3, 7
 51c:	07 c0       	rjmp	.+14     	; 0x52c <__stack+0x2d>
 51e:	60 81       	ld	r22, Z
 520:	71 81       	ldd	r23, Z+1	; 0x01
 522:	82 81       	ldd	r24, Z+2	; 0x02
 524:	93 81       	ldd	r25, Z+3	; 0x03
 526:	0c 5f       	subi	r16, 0xFC	; 252
 528:	1f 4f       	sbci	r17, 0xFF	; 255
 52a:	08 c0       	rjmp	.+16     	; 0x53c <__stack+0x3d>
 52c:	60 81       	ld	r22, Z
 52e:	71 81       	ldd	r23, Z+1	; 0x01
 530:	07 2e       	mov	r0, r23
 532:	00 0c       	add	r0, r0
 534:	88 0b       	sbc	r24, r24
 536:	99 0b       	sbc	r25, r25
 538:	0e 5f       	subi	r16, 0xFE	; 254
 53a:	1f 4f       	sbci	r17, 0xFF	; 255
 53c:	f3 2d       	mov	r31, r3
 53e:	ff 76       	andi	r31, 0x6F	; 111
 540:	3f 2e       	mov	r3, r31
 542:	97 ff       	sbrs	r25, 7
 544:	09 c0       	rjmp	.+18     	; 0x558 <__stack+0x59>
 546:	90 95       	com	r25
 548:	80 95       	com	r24
 54a:	70 95       	com	r23
 54c:	61 95       	neg	r22
 54e:	7f 4f       	sbci	r23, 0xFF	; 255
 550:	8f 4f       	sbci	r24, 0xFF	; 255
 552:	9f 4f       	sbci	r25, 0xFF	; 255
 554:	f0 68       	ori	r31, 0x80	; 128
 556:	3f 2e       	mov	r3, r31
 558:	2a e0       	ldi	r18, 0x0A	; 10
 55a:	30 e0       	ldi	r19, 0x00	; 0
 55c:	a3 01       	movw	r20, r6
 55e:	0e 94 1a 05 	call	0xa34	; 0xa34 <__ultoa_invert>
 562:	88 2e       	mov	r8, r24
 564:	86 18       	sub	r8, r6
 566:	45 c0       	rjmp	.+138    	; 0x5f2 <__stack+0xf3>
 568:	85 37       	cpi	r24, 0x75	; 117
 56a:	31 f4       	brne	.+12     	; 0x578 <__stack+0x79>
 56c:	23 2d       	mov	r18, r3
 56e:	2f 7e       	andi	r18, 0xEF	; 239
 570:	b2 2e       	mov	r11, r18
 572:	2a e0       	ldi	r18, 0x0A	; 10
 574:	30 e0       	ldi	r19, 0x00	; 0
 576:	25 c0       	rjmp	.+74     	; 0x5c2 <__stack+0xc3>
 578:	93 2d       	mov	r25, r3
 57a:	99 7f       	andi	r25, 0xF9	; 249
 57c:	b9 2e       	mov	r11, r25
 57e:	8f 36       	cpi	r24, 0x6F	; 111
 580:	c1 f0       	breq	.+48     	; 0x5b2 <__stack+0xb3>
 582:	18 f4       	brcc	.+6      	; 0x58a <__stack+0x8b>
 584:	88 35       	cpi	r24, 0x58	; 88
 586:	79 f0       	breq	.+30     	; 0x5a6 <__stack+0xa7>
 588:	b5 c0       	rjmp	.+362    	; 0x6f4 <__stack+0x1f5>
 58a:	80 37       	cpi	r24, 0x70	; 112
 58c:	19 f0       	breq	.+6      	; 0x594 <__stack+0x95>
 58e:	88 37       	cpi	r24, 0x78	; 120
 590:	21 f0       	breq	.+8      	; 0x59a <__stack+0x9b>
 592:	b0 c0       	rjmp	.+352    	; 0x6f4 <__stack+0x1f5>
 594:	e9 2f       	mov	r30, r25
 596:	e0 61       	ori	r30, 0x10	; 16
 598:	be 2e       	mov	r11, r30
 59a:	b4 fe       	sbrs	r11, 4
 59c:	0d c0       	rjmp	.+26     	; 0x5b8 <__stack+0xb9>
 59e:	fb 2d       	mov	r31, r11
 5a0:	f4 60       	ori	r31, 0x04	; 4
 5a2:	bf 2e       	mov	r11, r31
 5a4:	09 c0       	rjmp	.+18     	; 0x5b8 <__stack+0xb9>
 5a6:	34 fe       	sbrs	r3, 4
 5a8:	0a c0       	rjmp	.+20     	; 0x5be <__stack+0xbf>
 5aa:	29 2f       	mov	r18, r25
 5ac:	26 60       	ori	r18, 0x06	; 6
 5ae:	b2 2e       	mov	r11, r18
 5b0:	06 c0       	rjmp	.+12     	; 0x5be <__stack+0xbf>
 5b2:	28 e0       	ldi	r18, 0x08	; 8
 5b4:	30 e0       	ldi	r19, 0x00	; 0
 5b6:	05 c0       	rjmp	.+10     	; 0x5c2 <__stack+0xc3>
 5b8:	20 e1       	ldi	r18, 0x10	; 16
 5ba:	30 e0       	ldi	r19, 0x00	; 0
 5bc:	02 c0       	rjmp	.+4      	; 0x5c2 <__stack+0xc3>
 5be:	20 e1       	ldi	r18, 0x10	; 16
 5c0:	32 e0       	ldi	r19, 0x02	; 2
 5c2:	f8 01       	movw	r30, r16
 5c4:	b7 fe       	sbrs	r11, 7
 5c6:	07 c0       	rjmp	.+14     	; 0x5d6 <__stack+0xd7>
 5c8:	60 81       	ld	r22, Z
 5ca:	71 81       	ldd	r23, Z+1	; 0x01
 5cc:	82 81       	ldd	r24, Z+2	; 0x02
 5ce:	93 81       	ldd	r25, Z+3	; 0x03
 5d0:	0c 5f       	subi	r16, 0xFC	; 252
 5d2:	1f 4f       	sbci	r17, 0xFF	; 255
 5d4:	06 c0       	rjmp	.+12     	; 0x5e2 <__stack+0xe3>
 5d6:	60 81       	ld	r22, Z
 5d8:	71 81       	ldd	r23, Z+1	; 0x01
 5da:	80 e0       	ldi	r24, 0x00	; 0
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	0e 5f       	subi	r16, 0xFE	; 254
 5e0:	1f 4f       	sbci	r17, 0xFF	; 255
 5e2:	a3 01       	movw	r20, r6
 5e4:	0e 94 1a 05 	call	0xa34	; 0xa34 <__ultoa_invert>
 5e8:	88 2e       	mov	r8, r24
 5ea:	86 18       	sub	r8, r6
 5ec:	fb 2d       	mov	r31, r11
 5ee:	ff 77       	andi	r31, 0x7F	; 127
 5f0:	3f 2e       	mov	r3, r31
 5f2:	36 fe       	sbrs	r3, 6
 5f4:	0d c0       	rjmp	.+26     	; 0x610 <__stack+0x111>
 5f6:	23 2d       	mov	r18, r3
 5f8:	2e 7f       	andi	r18, 0xFE	; 254
 5fa:	a2 2e       	mov	r10, r18
 5fc:	89 14       	cp	r8, r9
 5fe:	58 f4       	brcc	.+22     	; 0x616 <__stack+0x117>
 600:	34 fe       	sbrs	r3, 4
 602:	0b c0       	rjmp	.+22     	; 0x61a <__stack+0x11b>
 604:	32 fc       	sbrc	r3, 2
 606:	09 c0       	rjmp	.+18     	; 0x61a <__stack+0x11b>
 608:	83 2d       	mov	r24, r3
 60a:	8e 7e       	andi	r24, 0xEE	; 238
 60c:	a8 2e       	mov	r10, r24
 60e:	05 c0       	rjmp	.+10     	; 0x61a <__stack+0x11b>
 610:	b8 2c       	mov	r11, r8
 612:	a3 2c       	mov	r10, r3
 614:	03 c0       	rjmp	.+6      	; 0x61c <__stack+0x11d>
 616:	b8 2c       	mov	r11, r8
 618:	01 c0       	rjmp	.+2      	; 0x61c <__stack+0x11d>
 61a:	b9 2c       	mov	r11, r9
 61c:	a4 fe       	sbrs	r10, 4
 61e:	0f c0       	rjmp	.+30     	; 0x63e <__stack+0x13f>
 620:	fe 01       	movw	r30, r28
 622:	e8 0d       	add	r30, r8
 624:	f1 1d       	adc	r31, r1
 626:	80 81       	ld	r24, Z
 628:	80 33       	cpi	r24, 0x30	; 48
 62a:	21 f4       	brne	.+8      	; 0x634 <__stack+0x135>
 62c:	9a 2d       	mov	r25, r10
 62e:	99 7e       	andi	r25, 0xE9	; 233
 630:	a9 2e       	mov	r10, r25
 632:	09 c0       	rjmp	.+18     	; 0x646 <__stack+0x147>
 634:	a2 fe       	sbrs	r10, 2
 636:	06 c0       	rjmp	.+12     	; 0x644 <__stack+0x145>
 638:	b3 94       	inc	r11
 63a:	b3 94       	inc	r11
 63c:	04 c0       	rjmp	.+8      	; 0x646 <__stack+0x147>
 63e:	8a 2d       	mov	r24, r10
 640:	86 78       	andi	r24, 0x86	; 134
 642:	09 f0       	breq	.+2      	; 0x646 <__stack+0x147>
 644:	b3 94       	inc	r11
 646:	a3 fc       	sbrc	r10, 3
 648:	11 c0       	rjmp	.+34     	; 0x66c <__stack+0x16d>
 64a:	a0 fe       	sbrs	r10, 0
 64c:	06 c0       	rjmp	.+12     	; 0x65a <__stack+0x15b>
 64e:	b2 14       	cp	r11, r2
 650:	88 f4       	brcc	.+34     	; 0x674 <__stack+0x175>
 652:	28 0c       	add	r2, r8
 654:	92 2c       	mov	r9, r2
 656:	9b 18       	sub	r9, r11
 658:	0e c0       	rjmp	.+28     	; 0x676 <__stack+0x177>
 65a:	b2 14       	cp	r11, r2
 65c:	60 f4       	brcc	.+24     	; 0x676 <__stack+0x177>
 65e:	b6 01       	movw	r22, r12
 660:	80 e2       	ldi	r24, 0x20	; 32
 662:	90 e0       	ldi	r25, 0x00	; 0
 664:	0e 94 de 04 	call	0x9bc	; 0x9bc <fputc>
 668:	b3 94       	inc	r11
 66a:	f7 cf       	rjmp	.-18     	; 0x65a <__stack+0x15b>
 66c:	b2 14       	cp	r11, r2
 66e:	18 f4       	brcc	.+6      	; 0x676 <__stack+0x177>
 670:	2b 18       	sub	r2, r11
 672:	02 c0       	rjmp	.+4      	; 0x678 <__stack+0x179>
 674:	98 2c       	mov	r9, r8
 676:	21 2c       	mov	r2, r1
 678:	a4 fe       	sbrs	r10, 4
 67a:	10 c0       	rjmp	.+32     	; 0x69c <__stack+0x19d>
 67c:	b6 01       	movw	r22, r12
 67e:	80 e3       	ldi	r24, 0x30	; 48
 680:	90 e0       	ldi	r25, 0x00	; 0
 682:	0e 94 de 04 	call	0x9bc	; 0x9bc <fputc>
 686:	a2 fe       	sbrs	r10, 2
 688:	17 c0       	rjmp	.+46     	; 0x6b8 <__stack+0x1b9>
 68a:	a1 fc       	sbrc	r10, 1
 68c:	03 c0       	rjmp	.+6      	; 0x694 <__stack+0x195>
 68e:	88 e7       	ldi	r24, 0x78	; 120
 690:	90 e0       	ldi	r25, 0x00	; 0
 692:	02 c0       	rjmp	.+4      	; 0x698 <__stack+0x199>
 694:	88 e5       	ldi	r24, 0x58	; 88
 696:	90 e0       	ldi	r25, 0x00	; 0
 698:	b6 01       	movw	r22, r12
 69a:	0c c0       	rjmp	.+24     	; 0x6b4 <__stack+0x1b5>
 69c:	8a 2d       	mov	r24, r10
 69e:	86 78       	andi	r24, 0x86	; 134
 6a0:	59 f0       	breq	.+22     	; 0x6b8 <__stack+0x1b9>
 6a2:	a1 fe       	sbrs	r10, 1
 6a4:	02 c0       	rjmp	.+4      	; 0x6aa <__stack+0x1ab>
 6a6:	8b e2       	ldi	r24, 0x2B	; 43
 6a8:	01 c0       	rjmp	.+2      	; 0x6ac <__stack+0x1ad>
 6aa:	80 e2       	ldi	r24, 0x20	; 32
 6ac:	a7 fc       	sbrc	r10, 7
 6ae:	8d e2       	ldi	r24, 0x2D	; 45
 6b0:	b6 01       	movw	r22, r12
 6b2:	90 e0       	ldi	r25, 0x00	; 0
 6b4:	0e 94 de 04 	call	0x9bc	; 0x9bc <fputc>
 6b8:	89 14       	cp	r8, r9
 6ba:	38 f4       	brcc	.+14     	; 0x6ca <__stack+0x1cb>
 6bc:	b6 01       	movw	r22, r12
 6be:	80 e3       	ldi	r24, 0x30	; 48
 6c0:	90 e0       	ldi	r25, 0x00	; 0
 6c2:	0e 94 de 04 	call	0x9bc	; 0x9bc <fputc>
 6c6:	9a 94       	dec	r9
 6c8:	f7 cf       	rjmp	.-18     	; 0x6b8 <__stack+0x1b9>
 6ca:	8a 94       	dec	r8
 6cc:	f3 01       	movw	r30, r6
 6ce:	e8 0d       	add	r30, r8
 6d0:	f1 1d       	adc	r31, r1
 6d2:	80 81       	ld	r24, Z
 6d4:	b6 01       	movw	r22, r12
 6d6:	90 e0       	ldi	r25, 0x00	; 0
 6d8:	0e 94 de 04 	call	0x9bc	; 0x9bc <fputc>
 6dc:	81 10       	cpse	r8, r1
 6de:	f5 cf       	rjmp	.-22     	; 0x6ca <__stack+0x1cb>
 6e0:	22 20       	and	r2, r2
 6e2:	09 f4       	brne	.+2      	; 0x6e6 <__stack+0x1e7>
 6e4:	42 ce       	rjmp	.-892    	; 0x36a <vfprintf+0x24>
 6e6:	b6 01       	movw	r22, r12
 6e8:	80 e2       	ldi	r24, 0x20	; 32
 6ea:	90 e0       	ldi	r25, 0x00	; 0
 6ec:	0e 94 de 04 	call	0x9bc	; 0x9bc <fputc>
 6f0:	2a 94       	dec	r2
 6f2:	f6 cf       	rjmp	.-20     	; 0x6e0 <__stack+0x1e1>
 6f4:	f6 01       	movw	r30, r12
 6f6:	86 81       	ldd	r24, Z+6	; 0x06
 6f8:	97 81       	ldd	r25, Z+7	; 0x07
 6fa:	02 c0       	rjmp	.+4      	; 0x700 <__stack+0x201>
 6fc:	8f ef       	ldi	r24, 0xFF	; 255
 6fe:	9f ef       	ldi	r25, 0xFF	; 255
 700:	2b 96       	adiw	r28, 0x0b	; 11
 702:	e2 e1       	ldi	r30, 0x12	; 18
 704:	0c 94 94 05 	jmp	0xb28	; 0xb28 <__epilogue_restores__>

00000708 <calloc>:
 708:	0f 93       	push	r16
 70a:	1f 93       	push	r17
 70c:	cf 93       	push	r28
 70e:	df 93       	push	r29
 710:	86 9f       	mul	r24, r22
 712:	80 01       	movw	r16, r0
 714:	87 9f       	mul	r24, r23
 716:	10 0d       	add	r17, r0
 718:	96 9f       	mul	r25, r22
 71a:	10 0d       	add	r17, r0
 71c:	11 24       	eor	r1, r1
 71e:	c8 01       	movw	r24, r16
 720:	0e 94 a0 03 	call	0x740	; 0x740 <malloc>
 724:	ec 01       	movw	r28, r24
 726:	00 97       	sbiw	r24, 0x00	; 0
 728:	29 f0       	breq	.+10     	; 0x734 <calloc+0x2c>
 72a:	a8 01       	movw	r20, r16
 72c:	60 e0       	ldi	r22, 0x00	; 0
 72e:	70 e0       	ldi	r23, 0x00	; 0
 730:	0e 94 cc 04 	call	0x998	; 0x998 <memset>
 734:	ce 01       	movw	r24, r28
 736:	df 91       	pop	r29
 738:	cf 91       	pop	r28
 73a:	1f 91       	pop	r17
 73c:	0f 91       	pop	r16
 73e:	08 95       	ret

00000740 <malloc>:
 740:	0f 93       	push	r16
 742:	1f 93       	push	r17
 744:	cf 93       	push	r28
 746:	df 93       	push	r29
 748:	82 30       	cpi	r24, 0x02	; 2
 74a:	91 05       	cpc	r25, r1
 74c:	10 f4       	brcc	.+4      	; 0x752 <malloc+0x12>
 74e:	82 e0       	ldi	r24, 0x02	; 2
 750:	90 e0       	ldi	r25, 0x00	; 0
 752:	e0 91 a8 01 	lds	r30, 0x01A8	; 0x8001a8 <__flp>
 756:	f0 91 a9 01 	lds	r31, 0x01A9	; 0x8001a9 <__flp+0x1>
 75a:	20 e0       	ldi	r18, 0x00	; 0
 75c:	30 e0       	ldi	r19, 0x00	; 0
 75e:	a0 e0       	ldi	r26, 0x00	; 0
 760:	b0 e0       	ldi	r27, 0x00	; 0
 762:	30 97       	sbiw	r30, 0x00	; 0
 764:	19 f1       	breq	.+70     	; 0x7ac <malloc+0x6c>
 766:	40 81       	ld	r20, Z
 768:	51 81       	ldd	r21, Z+1	; 0x01
 76a:	02 81       	ldd	r16, Z+2	; 0x02
 76c:	13 81       	ldd	r17, Z+3	; 0x03
 76e:	48 17       	cp	r20, r24
 770:	59 07       	cpc	r21, r25
 772:	c8 f0       	brcs	.+50     	; 0x7a6 <malloc+0x66>
 774:	84 17       	cp	r24, r20
 776:	95 07       	cpc	r25, r21
 778:	69 f4       	brne	.+26     	; 0x794 <malloc+0x54>
 77a:	10 97       	sbiw	r26, 0x00	; 0
 77c:	31 f0       	breq	.+12     	; 0x78a <malloc+0x4a>
 77e:	12 96       	adiw	r26, 0x02	; 2
 780:	0c 93       	st	X, r16
 782:	12 97       	sbiw	r26, 0x02	; 2
 784:	13 96       	adiw	r26, 0x03	; 3
 786:	1c 93       	st	X, r17
 788:	27 c0       	rjmp	.+78     	; 0x7d8 <malloc+0x98>
 78a:	00 93 a8 01 	sts	0x01A8, r16	; 0x8001a8 <__flp>
 78e:	10 93 a9 01 	sts	0x01A9, r17	; 0x8001a9 <__flp+0x1>
 792:	22 c0       	rjmp	.+68     	; 0x7d8 <malloc+0x98>
 794:	21 15       	cp	r18, r1
 796:	31 05       	cpc	r19, r1
 798:	19 f0       	breq	.+6      	; 0x7a0 <malloc+0x60>
 79a:	42 17       	cp	r20, r18
 79c:	53 07       	cpc	r21, r19
 79e:	18 f4       	brcc	.+6      	; 0x7a6 <malloc+0x66>
 7a0:	9a 01       	movw	r18, r20
 7a2:	bd 01       	movw	r22, r26
 7a4:	ef 01       	movw	r28, r30
 7a6:	df 01       	movw	r26, r30
 7a8:	f8 01       	movw	r30, r16
 7aa:	db cf       	rjmp	.-74     	; 0x762 <malloc+0x22>
 7ac:	21 15       	cp	r18, r1
 7ae:	31 05       	cpc	r19, r1
 7b0:	f9 f0       	breq	.+62     	; 0x7f0 <malloc+0xb0>
 7b2:	28 1b       	sub	r18, r24
 7b4:	39 0b       	sbc	r19, r25
 7b6:	24 30       	cpi	r18, 0x04	; 4
 7b8:	31 05       	cpc	r19, r1
 7ba:	80 f4       	brcc	.+32     	; 0x7dc <malloc+0x9c>
 7bc:	8a 81       	ldd	r24, Y+2	; 0x02
 7be:	9b 81       	ldd	r25, Y+3	; 0x03
 7c0:	61 15       	cp	r22, r1
 7c2:	71 05       	cpc	r23, r1
 7c4:	21 f0       	breq	.+8      	; 0x7ce <malloc+0x8e>
 7c6:	fb 01       	movw	r30, r22
 7c8:	93 83       	std	Z+3, r25	; 0x03
 7ca:	82 83       	std	Z+2, r24	; 0x02
 7cc:	04 c0       	rjmp	.+8      	; 0x7d6 <malloc+0x96>
 7ce:	90 93 a9 01 	sts	0x01A9, r25	; 0x8001a9 <__flp+0x1>
 7d2:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <__flp>
 7d6:	fe 01       	movw	r30, r28
 7d8:	32 96       	adiw	r30, 0x02	; 2
 7da:	44 c0       	rjmp	.+136    	; 0x864 <malloc+0x124>
 7dc:	fe 01       	movw	r30, r28
 7de:	e2 0f       	add	r30, r18
 7e0:	f3 1f       	adc	r31, r19
 7e2:	81 93       	st	Z+, r24
 7e4:	91 93       	st	Z+, r25
 7e6:	22 50       	subi	r18, 0x02	; 2
 7e8:	31 09       	sbc	r19, r1
 7ea:	39 83       	std	Y+1, r19	; 0x01
 7ec:	28 83       	st	Y, r18
 7ee:	3a c0       	rjmp	.+116    	; 0x864 <malloc+0x124>
 7f0:	20 91 a6 01 	lds	r18, 0x01A6	; 0x8001a6 <__brkval>
 7f4:	30 91 a7 01 	lds	r19, 0x01A7	; 0x8001a7 <__brkval+0x1>
 7f8:	23 2b       	or	r18, r19
 7fa:	41 f4       	brne	.+16     	; 0x80c <malloc+0xcc>
 7fc:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 800:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 804:	30 93 a7 01 	sts	0x01A7, r19	; 0x8001a7 <__brkval+0x1>
 808:	20 93 a6 01 	sts	0x01A6, r18	; 0x8001a6 <__brkval>
 80c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 810:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 814:	21 15       	cp	r18, r1
 816:	31 05       	cpc	r19, r1
 818:	41 f4       	brne	.+16     	; 0x82a <malloc+0xea>
 81a:	2d b7       	in	r18, 0x3d	; 61
 81c:	3e b7       	in	r19, 0x3e	; 62
 81e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 822:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 826:	24 1b       	sub	r18, r20
 828:	35 0b       	sbc	r19, r21
 82a:	e0 91 a6 01 	lds	r30, 0x01A6	; 0x8001a6 <__brkval>
 82e:	f0 91 a7 01 	lds	r31, 0x01A7	; 0x8001a7 <__brkval+0x1>
 832:	e2 17       	cp	r30, r18
 834:	f3 07       	cpc	r31, r19
 836:	a0 f4       	brcc	.+40     	; 0x860 <malloc+0x120>
 838:	2e 1b       	sub	r18, r30
 83a:	3f 0b       	sbc	r19, r31
 83c:	28 17       	cp	r18, r24
 83e:	39 07       	cpc	r19, r25
 840:	78 f0       	brcs	.+30     	; 0x860 <malloc+0x120>
 842:	ac 01       	movw	r20, r24
 844:	4e 5f       	subi	r20, 0xFE	; 254
 846:	5f 4f       	sbci	r21, 0xFF	; 255
 848:	24 17       	cp	r18, r20
 84a:	35 07       	cpc	r19, r21
 84c:	48 f0       	brcs	.+18     	; 0x860 <malloc+0x120>
 84e:	4e 0f       	add	r20, r30
 850:	5f 1f       	adc	r21, r31
 852:	50 93 a7 01 	sts	0x01A7, r21	; 0x8001a7 <__brkval+0x1>
 856:	40 93 a6 01 	sts	0x01A6, r20	; 0x8001a6 <__brkval>
 85a:	81 93       	st	Z+, r24
 85c:	91 93       	st	Z+, r25
 85e:	02 c0       	rjmp	.+4      	; 0x864 <malloc+0x124>
 860:	e0 e0       	ldi	r30, 0x00	; 0
 862:	f0 e0       	ldi	r31, 0x00	; 0
 864:	cf 01       	movw	r24, r30
 866:	df 91       	pop	r29
 868:	cf 91       	pop	r28
 86a:	1f 91       	pop	r17
 86c:	0f 91       	pop	r16
 86e:	08 95       	ret

00000870 <free>:
 870:	cf 93       	push	r28
 872:	df 93       	push	r29
 874:	00 97       	sbiw	r24, 0x00	; 0
 876:	09 f4       	brne	.+2      	; 0x87a <free+0xa>
 878:	81 c0       	rjmp	.+258    	; 0x97c <free+0x10c>
 87a:	fc 01       	movw	r30, r24
 87c:	32 97       	sbiw	r30, 0x02	; 2
 87e:	13 82       	std	Z+3, r1	; 0x03
 880:	12 82       	std	Z+2, r1	; 0x02
 882:	a0 91 a8 01 	lds	r26, 0x01A8	; 0x8001a8 <__flp>
 886:	b0 91 a9 01 	lds	r27, 0x01A9	; 0x8001a9 <__flp+0x1>
 88a:	10 97       	sbiw	r26, 0x00	; 0
 88c:	81 f4       	brne	.+32     	; 0x8ae <free+0x3e>
 88e:	20 81       	ld	r18, Z
 890:	31 81       	ldd	r19, Z+1	; 0x01
 892:	82 0f       	add	r24, r18
 894:	93 1f       	adc	r25, r19
 896:	20 91 a6 01 	lds	r18, 0x01A6	; 0x8001a6 <__brkval>
 89a:	30 91 a7 01 	lds	r19, 0x01A7	; 0x8001a7 <__brkval+0x1>
 89e:	28 17       	cp	r18, r24
 8a0:	39 07       	cpc	r19, r25
 8a2:	51 f5       	brne	.+84     	; 0x8f8 <free+0x88>
 8a4:	f0 93 a7 01 	sts	0x01A7, r31	; 0x8001a7 <__brkval+0x1>
 8a8:	e0 93 a6 01 	sts	0x01A6, r30	; 0x8001a6 <__brkval>
 8ac:	67 c0       	rjmp	.+206    	; 0x97c <free+0x10c>
 8ae:	ed 01       	movw	r28, r26
 8b0:	20 e0       	ldi	r18, 0x00	; 0
 8b2:	30 e0       	ldi	r19, 0x00	; 0
 8b4:	ce 17       	cp	r28, r30
 8b6:	df 07       	cpc	r29, r31
 8b8:	40 f4       	brcc	.+16     	; 0x8ca <free+0x5a>
 8ba:	4a 81       	ldd	r20, Y+2	; 0x02
 8bc:	5b 81       	ldd	r21, Y+3	; 0x03
 8be:	9e 01       	movw	r18, r28
 8c0:	41 15       	cp	r20, r1
 8c2:	51 05       	cpc	r21, r1
 8c4:	f1 f0       	breq	.+60     	; 0x902 <free+0x92>
 8c6:	ea 01       	movw	r28, r20
 8c8:	f5 cf       	rjmp	.-22     	; 0x8b4 <free+0x44>
 8ca:	d3 83       	std	Z+3, r29	; 0x03
 8cc:	c2 83       	std	Z+2, r28	; 0x02
 8ce:	40 81       	ld	r20, Z
 8d0:	51 81       	ldd	r21, Z+1	; 0x01
 8d2:	84 0f       	add	r24, r20
 8d4:	95 1f       	adc	r25, r21
 8d6:	c8 17       	cp	r28, r24
 8d8:	d9 07       	cpc	r29, r25
 8da:	59 f4       	brne	.+22     	; 0x8f2 <free+0x82>
 8dc:	88 81       	ld	r24, Y
 8de:	99 81       	ldd	r25, Y+1	; 0x01
 8e0:	84 0f       	add	r24, r20
 8e2:	95 1f       	adc	r25, r21
 8e4:	02 96       	adiw	r24, 0x02	; 2
 8e6:	91 83       	std	Z+1, r25	; 0x01
 8e8:	80 83       	st	Z, r24
 8ea:	8a 81       	ldd	r24, Y+2	; 0x02
 8ec:	9b 81       	ldd	r25, Y+3	; 0x03
 8ee:	93 83       	std	Z+3, r25	; 0x03
 8f0:	82 83       	std	Z+2, r24	; 0x02
 8f2:	21 15       	cp	r18, r1
 8f4:	31 05       	cpc	r19, r1
 8f6:	29 f4       	brne	.+10     	; 0x902 <free+0x92>
 8f8:	f0 93 a9 01 	sts	0x01A9, r31	; 0x8001a9 <__flp+0x1>
 8fc:	e0 93 a8 01 	sts	0x01A8, r30	; 0x8001a8 <__flp>
 900:	3d c0       	rjmp	.+122    	; 0x97c <free+0x10c>
 902:	e9 01       	movw	r28, r18
 904:	fb 83       	std	Y+3, r31	; 0x03
 906:	ea 83       	std	Y+2, r30	; 0x02
 908:	49 91       	ld	r20, Y+
 90a:	59 91       	ld	r21, Y+
 90c:	c4 0f       	add	r28, r20
 90e:	d5 1f       	adc	r29, r21
 910:	ec 17       	cp	r30, r28
 912:	fd 07       	cpc	r31, r29
 914:	61 f4       	brne	.+24     	; 0x92e <free+0xbe>
 916:	80 81       	ld	r24, Z
 918:	91 81       	ldd	r25, Z+1	; 0x01
 91a:	84 0f       	add	r24, r20
 91c:	95 1f       	adc	r25, r21
 91e:	02 96       	adiw	r24, 0x02	; 2
 920:	e9 01       	movw	r28, r18
 922:	99 83       	std	Y+1, r25	; 0x01
 924:	88 83       	st	Y, r24
 926:	82 81       	ldd	r24, Z+2	; 0x02
 928:	93 81       	ldd	r25, Z+3	; 0x03
 92a:	9b 83       	std	Y+3, r25	; 0x03
 92c:	8a 83       	std	Y+2, r24	; 0x02
 92e:	e0 e0       	ldi	r30, 0x00	; 0
 930:	f0 e0       	ldi	r31, 0x00	; 0
 932:	12 96       	adiw	r26, 0x02	; 2
 934:	8d 91       	ld	r24, X+
 936:	9c 91       	ld	r25, X
 938:	13 97       	sbiw	r26, 0x03	; 3
 93a:	00 97       	sbiw	r24, 0x00	; 0
 93c:	19 f0       	breq	.+6      	; 0x944 <free+0xd4>
 93e:	fd 01       	movw	r30, r26
 940:	dc 01       	movw	r26, r24
 942:	f7 cf       	rjmp	.-18     	; 0x932 <free+0xc2>
 944:	8d 91       	ld	r24, X+
 946:	9c 91       	ld	r25, X
 948:	11 97       	sbiw	r26, 0x01	; 1
 94a:	9d 01       	movw	r18, r26
 94c:	2e 5f       	subi	r18, 0xFE	; 254
 94e:	3f 4f       	sbci	r19, 0xFF	; 255
 950:	82 0f       	add	r24, r18
 952:	93 1f       	adc	r25, r19
 954:	20 91 a6 01 	lds	r18, 0x01A6	; 0x8001a6 <__brkval>
 958:	30 91 a7 01 	lds	r19, 0x01A7	; 0x8001a7 <__brkval+0x1>
 95c:	28 17       	cp	r18, r24
 95e:	39 07       	cpc	r19, r25
 960:	69 f4       	brne	.+26     	; 0x97c <free+0x10c>
 962:	30 97       	sbiw	r30, 0x00	; 0
 964:	29 f4       	brne	.+10     	; 0x970 <free+0x100>
 966:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <__flp+0x1>
 96a:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <__flp>
 96e:	02 c0       	rjmp	.+4      	; 0x974 <free+0x104>
 970:	13 82       	std	Z+3, r1	; 0x03
 972:	12 82       	std	Z+2, r1	; 0x02
 974:	b0 93 a7 01 	sts	0x01A7, r27	; 0x8001a7 <__brkval+0x1>
 978:	a0 93 a6 01 	sts	0x01A6, r26	; 0x8001a6 <__brkval>
 97c:	df 91       	pop	r29
 97e:	cf 91       	pop	r28
 980:	08 95       	ret

00000982 <strnlen_P>:
 982:	fc 01       	movw	r30, r24
 984:	05 90       	lpm	r0, Z+
 986:	61 50       	subi	r22, 0x01	; 1
 988:	70 40       	sbci	r23, 0x00	; 0
 98a:	01 10       	cpse	r0, r1
 98c:	d8 f7       	brcc	.-10     	; 0x984 <strnlen_P+0x2>
 98e:	80 95       	com	r24
 990:	90 95       	com	r25
 992:	8e 0f       	add	r24, r30
 994:	9f 1f       	adc	r25, r31
 996:	08 95       	ret

00000998 <memset>:
 998:	dc 01       	movw	r26, r24
 99a:	01 c0       	rjmp	.+2      	; 0x99e <memset+0x6>
 99c:	6d 93       	st	X+, r22
 99e:	41 50       	subi	r20, 0x01	; 1
 9a0:	50 40       	sbci	r21, 0x00	; 0
 9a2:	e0 f7       	brcc	.-8      	; 0x99c <memset+0x4>
 9a4:	08 95       	ret

000009a6 <strnlen>:
 9a6:	fc 01       	movw	r30, r24
 9a8:	61 50       	subi	r22, 0x01	; 1
 9aa:	70 40       	sbci	r23, 0x00	; 0
 9ac:	01 90       	ld	r0, Z+
 9ae:	01 10       	cpse	r0, r1
 9b0:	d8 f7       	brcc	.-10     	; 0x9a8 <strnlen+0x2>
 9b2:	80 95       	com	r24
 9b4:	90 95       	com	r25
 9b6:	8e 0f       	add	r24, r30
 9b8:	9f 1f       	adc	r25, r31
 9ba:	08 95       	ret

000009bc <fputc>:
 9bc:	0f 93       	push	r16
 9be:	1f 93       	push	r17
 9c0:	cf 93       	push	r28
 9c2:	df 93       	push	r29
 9c4:	fb 01       	movw	r30, r22
 9c6:	23 81       	ldd	r18, Z+3	; 0x03
 9c8:	21 fd       	sbrc	r18, 1
 9ca:	03 c0       	rjmp	.+6      	; 0x9d2 <fputc+0x16>
 9cc:	8f ef       	ldi	r24, 0xFF	; 255
 9ce:	9f ef       	ldi	r25, 0xFF	; 255
 9d0:	2c c0       	rjmp	.+88     	; 0xa2a <fputc+0x6e>
 9d2:	22 ff       	sbrs	r18, 2
 9d4:	16 c0       	rjmp	.+44     	; 0xa02 <fputc+0x46>
 9d6:	46 81       	ldd	r20, Z+6	; 0x06
 9d8:	57 81       	ldd	r21, Z+7	; 0x07
 9da:	24 81       	ldd	r18, Z+4	; 0x04
 9dc:	35 81       	ldd	r19, Z+5	; 0x05
 9de:	42 17       	cp	r20, r18
 9e0:	53 07       	cpc	r21, r19
 9e2:	44 f4       	brge	.+16     	; 0x9f4 <fputc+0x38>
 9e4:	a0 81       	ld	r26, Z
 9e6:	b1 81       	ldd	r27, Z+1	; 0x01
 9e8:	9d 01       	movw	r18, r26
 9ea:	2f 5f       	subi	r18, 0xFF	; 255
 9ec:	3f 4f       	sbci	r19, 0xFF	; 255
 9ee:	31 83       	std	Z+1, r19	; 0x01
 9f0:	20 83       	st	Z, r18
 9f2:	8c 93       	st	X, r24
 9f4:	26 81       	ldd	r18, Z+6	; 0x06
 9f6:	37 81       	ldd	r19, Z+7	; 0x07
 9f8:	2f 5f       	subi	r18, 0xFF	; 255
 9fa:	3f 4f       	sbci	r19, 0xFF	; 255
 9fc:	37 83       	std	Z+7, r19	; 0x07
 9fe:	26 83       	std	Z+6, r18	; 0x06
 a00:	14 c0       	rjmp	.+40     	; 0xa2a <fputc+0x6e>
 a02:	8b 01       	movw	r16, r22
 a04:	ec 01       	movw	r28, r24
 a06:	fb 01       	movw	r30, r22
 a08:	00 84       	ldd	r0, Z+8	; 0x08
 a0a:	f1 85       	ldd	r31, Z+9	; 0x09
 a0c:	e0 2d       	mov	r30, r0
 a0e:	09 95       	icall
 a10:	89 2b       	or	r24, r25
 a12:	e1 f6       	brne	.-72     	; 0x9cc <fputc+0x10>
 a14:	d8 01       	movw	r26, r16
 a16:	16 96       	adiw	r26, 0x06	; 6
 a18:	8d 91       	ld	r24, X+
 a1a:	9c 91       	ld	r25, X
 a1c:	17 97       	sbiw	r26, 0x07	; 7
 a1e:	01 96       	adiw	r24, 0x01	; 1
 a20:	17 96       	adiw	r26, 0x07	; 7
 a22:	9c 93       	st	X, r25
 a24:	8e 93       	st	-X, r24
 a26:	16 97       	sbiw	r26, 0x06	; 6
 a28:	ce 01       	movw	r24, r28
 a2a:	df 91       	pop	r29
 a2c:	cf 91       	pop	r28
 a2e:	1f 91       	pop	r17
 a30:	0f 91       	pop	r16
 a32:	08 95       	ret

00000a34 <__ultoa_invert>:
 a34:	fa 01       	movw	r30, r20
 a36:	aa 27       	eor	r26, r26
 a38:	28 30       	cpi	r18, 0x08	; 8
 a3a:	51 f1       	breq	.+84     	; 0xa90 <__ultoa_invert+0x5c>
 a3c:	20 31       	cpi	r18, 0x10	; 16
 a3e:	81 f1       	breq	.+96     	; 0xaa0 <__ultoa_invert+0x6c>
 a40:	e8 94       	clt
 a42:	6f 93       	push	r22
 a44:	6e 7f       	andi	r22, 0xFE	; 254
 a46:	6e 5f       	subi	r22, 0xFE	; 254
 a48:	7f 4f       	sbci	r23, 0xFF	; 255
 a4a:	8f 4f       	sbci	r24, 0xFF	; 255
 a4c:	9f 4f       	sbci	r25, 0xFF	; 255
 a4e:	af 4f       	sbci	r26, 0xFF	; 255
 a50:	b1 e0       	ldi	r27, 0x01	; 1
 a52:	3e d0       	rcall	.+124    	; 0xad0 <__ultoa_invert+0x9c>
 a54:	b4 e0       	ldi	r27, 0x04	; 4
 a56:	3c d0       	rcall	.+120    	; 0xad0 <__ultoa_invert+0x9c>
 a58:	67 0f       	add	r22, r23
 a5a:	78 1f       	adc	r23, r24
 a5c:	89 1f       	adc	r24, r25
 a5e:	9a 1f       	adc	r25, r26
 a60:	a1 1d       	adc	r26, r1
 a62:	68 0f       	add	r22, r24
 a64:	79 1f       	adc	r23, r25
 a66:	8a 1f       	adc	r24, r26
 a68:	91 1d       	adc	r25, r1
 a6a:	a1 1d       	adc	r26, r1
 a6c:	6a 0f       	add	r22, r26
 a6e:	71 1d       	adc	r23, r1
 a70:	81 1d       	adc	r24, r1
 a72:	91 1d       	adc	r25, r1
 a74:	a1 1d       	adc	r26, r1
 a76:	20 d0       	rcall	.+64     	; 0xab8 <__ultoa_invert+0x84>
 a78:	09 f4       	brne	.+2      	; 0xa7c <__ultoa_invert+0x48>
 a7a:	68 94       	set
 a7c:	3f 91       	pop	r19
 a7e:	2a e0       	ldi	r18, 0x0A	; 10
 a80:	26 9f       	mul	r18, r22
 a82:	11 24       	eor	r1, r1
 a84:	30 19       	sub	r19, r0
 a86:	30 5d       	subi	r19, 0xD0	; 208
 a88:	31 93       	st	Z+, r19
 a8a:	de f6       	brtc	.-74     	; 0xa42 <__ultoa_invert+0xe>
 a8c:	cf 01       	movw	r24, r30
 a8e:	08 95       	ret
 a90:	46 2f       	mov	r20, r22
 a92:	47 70       	andi	r20, 0x07	; 7
 a94:	40 5d       	subi	r20, 0xD0	; 208
 a96:	41 93       	st	Z+, r20
 a98:	b3 e0       	ldi	r27, 0x03	; 3
 a9a:	0f d0       	rcall	.+30     	; 0xaba <__ultoa_invert+0x86>
 a9c:	c9 f7       	brne	.-14     	; 0xa90 <__ultoa_invert+0x5c>
 a9e:	f6 cf       	rjmp	.-20     	; 0xa8c <__ultoa_invert+0x58>
 aa0:	46 2f       	mov	r20, r22
 aa2:	4f 70       	andi	r20, 0x0F	; 15
 aa4:	40 5d       	subi	r20, 0xD0	; 208
 aa6:	4a 33       	cpi	r20, 0x3A	; 58
 aa8:	18 f0       	brcs	.+6      	; 0xab0 <__ultoa_invert+0x7c>
 aaa:	49 5d       	subi	r20, 0xD9	; 217
 aac:	31 fd       	sbrc	r19, 1
 aae:	40 52       	subi	r20, 0x20	; 32
 ab0:	41 93       	st	Z+, r20
 ab2:	02 d0       	rcall	.+4      	; 0xab8 <__ultoa_invert+0x84>
 ab4:	a9 f7       	brne	.-22     	; 0xaa0 <__ultoa_invert+0x6c>
 ab6:	ea cf       	rjmp	.-44     	; 0xa8c <__ultoa_invert+0x58>
 ab8:	b4 e0       	ldi	r27, 0x04	; 4
 aba:	a6 95       	lsr	r26
 abc:	97 95       	ror	r25
 abe:	87 95       	ror	r24
 ac0:	77 95       	ror	r23
 ac2:	67 95       	ror	r22
 ac4:	ba 95       	dec	r27
 ac6:	c9 f7       	brne	.-14     	; 0xaba <__ultoa_invert+0x86>
 ac8:	00 97       	sbiw	r24, 0x00	; 0
 aca:	61 05       	cpc	r22, r1
 acc:	71 05       	cpc	r23, r1
 ace:	08 95       	ret
 ad0:	9b 01       	movw	r18, r22
 ad2:	ac 01       	movw	r20, r24
 ad4:	0a 2e       	mov	r0, r26
 ad6:	06 94       	lsr	r0
 ad8:	57 95       	ror	r21
 ada:	47 95       	ror	r20
 adc:	37 95       	ror	r19
 ade:	27 95       	ror	r18
 ae0:	ba 95       	dec	r27
 ae2:	c9 f7       	brne	.-14     	; 0xad6 <__ultoa_invert+0xa2>
 ae4:	62 0f       	add	r22, r18
 ae6:	73 1f       	adc	r23, r19
 ae8:	84 1f       	adc	r24, r20
 aea:	95 1f       	adc	r25, r21
 aec:	a0 1d       	adc	r26, r0
 aee:	08 95       	ret

00000af0 <__prologue_saves__>:
 af0:	2f 92       	push	r2
 af2:	3f 92       	push	r3
 af4:	4f 92       	push	r4
 af6:	5f 92       	push	r5
 af8:	6f 92       	push	r6
 afa:	7f 92       	push	r7
 afc:	8f 92       	push	r8
 afe:	9f 92       	push	r9
 b00:	af 92       	push	r10
 b02:	bf 92       	push	r11
 b04:	cf 92       	push	r12
 b06:	df 92       	push	r13
 b08:	ef 92       	push	r14
 b0a:	ff 92       	push	r15
 b0c:	0f 93       	push	r16
 b0e:	1f 93       	push	r17
 b10:	cf 93       	push	r28
 b12:	df 93       	push	r29
 b14:	cd b7       	in	r28, 0x3d	; 61
 b16:	de b7       	in	r29, 0x3e	; 62
 b18:	ca 1b       	sub	r28, r26
 b1a:	db 0b       	sbc	r29, r27
 b1c:	0f b6       	in	r0, 0x3f	; 63
 b1e:	f8 94       	cli
 b20:	de bf       	out	0x3e, r29	; 62
 b22:	0f be       	out	0x3f, r0	; 63
 b24:	cd bf       	out	0x3d, r28	; 61
 b26:	09 94       	ijmp

00000b28 <__epilogue_restores__>:
 b28:	2a 88       	ldd	r2, Y+18	; 0x12
 b2a:	39 88       	ldd	r3, Y+17	; 0x11
 b2c:	48 88       	ldd	r4, Y+16	; 0x10
 b2e:	5f 84       	ldd	r5, Y+15	; 0x0f
 b30:	6e 84       	ldd	r6, Y+14	; 0x0e
 b32:	7d 84       	ldd	r7, Y+13	; 0x0d
 b34:	8c 84       	ldd	r8, Y+12	; 0x0c
 b36:	9b 84       	ldd	r9, Y+11	; 0x0b
 b38:	aa 84       	ldd	r10, Y+10	; 0x0a
 b3a:	b9 84       	ldd	r11, Y+9	; 0x09
 b3c:	c8 84       	ldd	r12, Y+8	; 0x08
 b3e:	df 80       	ldd	r13, Y+7	; 0x07
 b40:	ee 80       	ldd	r14, Y+6	; 0x06
 b42:	fd 80       	ldd	r15, Y+5	; 0x05
 b44:	0c 81       	ldd	r16, Y+4	; 0x04
 b46:	1b 81       	ldd	r17, Y+3	; 0x03
 b48:	aa 81       	ldd	r26, Y+2	; 0x02
 b4a:	b9 81       	ldd	r27, Y+1	; 0x01
 b4c:	ce 0f       	add	r28, r30
 b4e:	d1 1d       	adc	r29, r1
 b50:	0f b6       	in	r0, 0x3f	; 63
 b52:	f8 94       	cli
 b54:	de bf       	out	0x3e, r29	; 62
 b56:	0f be       	out	0x3f, r0	; 63
 b58:	cd bf       	out	0x3d, r28	; 61
 b5a:	ed 01       	movw	r28, r26
 b5c:	08 95       	ret

00000b5e <_exit>:
 b5e:	f8 94       	cli

00000b60 <__stop_program>:
 b60:	ff cf       	rjmp	.-2      	; 0xb60 <__stop_program>
