
xmem_setup.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000128  00800100  00000cf4  00000d88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cf4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800228  00800228  00000eb0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000eb0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f0c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00000f48  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001271  00000000  00000000  00001090  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bc4  00000000  00000000  00002301  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a8d  00000000  00000000  00002ec5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000310  00000000  00000000  00003954  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000062b  00000000  00000000  00003c64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007e1  00000000  00000000  0000428f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  00004a70  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__vector_1>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	12 e0       	ldi	r17, 0x02	; 2
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e4 ef       	ldi	r30, 0xF4	; 244
  84:	fc e0       	ldi	r31, 0x0C	; 12
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a8 32       	cpi	r26, 0x28	; 40
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	22 e0       	ldi	r18, 0x02	; 2
  94:	a8 e2       	ldi	r26, 0x28	; 40
  96:	b2 e0       	ldi	r27, 0x02	; 2
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a3 33       	cpi	r26, 0x33	; 51
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 c2 00 	call	0x184	; 0x184 <main>
  a6:	0c 94 78 06 	jmp	0xcf0	; 0xcf0 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <CAN_transmit>:
 */ 

#include "CANdriver.h"

void CAN_transmit ( uint8_t IDH, uint8_t IDL, uint8_t data )
{
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	d6 2f       	mov	r29, r22
  b4:	c4 2f       	mov	r28, r20
	// Transmit setup
	MCP2515_write( MCP_TXB0SIDH, IDH );
  b6:	68 2f       	mov	r22, r24
  b8:	82 e3       	ldi	r24, 0x32	; 50
  ba:	0e 94 36 01 	call	0x26c	; 0x26c <MCP2515_write>
	MCP2515_write( MCP_TXB0SIDL, IDL );
  be:	6d 2f       	mov	r22, r29
  c0:	81 e3       	ldi	r24, 0x31	; 49
  c2:	0e 94 36 01 	call	0x26c	; 0x26c <MCP2515_write>
	MCP2515_write( MCP_TXB0DLC, 1 );
  c6:	61 e0       	ldi	r22, 0x01	; 1
  c8:	85 e3       	ldi	r24, 0x35	; 53
  ca:	0e 94 36 01 	call	0x26c	; 0x26c <MCP2515_write>
	MCP2515_write( MCP_TXB0D0, data );
  ce:	6c 2f       	mov	r22, r28
  d0:	86 e3       	ldi	r24, 0x36	; 54
  d2:	0e 94 36 01 	call	0x26c	; 0x26c <MCP2515_write>
	
	// Request-to-send command
	MCP2515_request_to_send(MCP_RTS_TX0);
  d6:	81 e8       	ldi	r24, 0x81	; 129
  d8:	0e 94 4c 01 	call	0x298	; 0x298 <MCP2515_request_to_send>
}
  dc:	df 91       	pop	r29
  de:	cf 91       	pop	r28
  e0:	08 95       	ret

000000e2 <CAN_receive>:
	uint8_t IDH;
	uint8_t IDL;
	uint8_t data_length;
	uint8_t data;
	
	IDH = MCP2515_read(MCP_RXB0SIDH);
  e2:	81 e6       	ldi	r24, 0x61	; 97
  e4:	0e 94 24 01 	call	0x248	; 0x248 <MCP2515_read>
	IDL = MCP2515_read(MCP_RXB0SIDL);
  e8:	82 e6       	ldi	r24, 0x62	; 98
  ea:	0e 94 24 01 	call	0x248	; 0x248 <MCP2515_read>
	data_length = MCP2515_read(MCP_RXB0DLC);
  ee:	85 e6       	ldi	r24, 0x65	; 101
  f0:	0e 94 24 01 	call	0x248	; 0x248 <MCP2515_read>
	data = MCP2515_read(MCP_RXB0D0);
  f4:	86 e6       	ldi	r24, 0x66	; 102
  f6:	0e 94 24 01 	call	0x248	; 0x248 <MCP2515_read>
	
	return data;
  fa:	08 95       	ret

000000fc <__vector_1>:
uint8_t MCP_val_read;


// Interrupt vector for INT0
ISR(INT0_vect)
{
  fc:	1f 92       	push	r1
  fe:	0f 92       	push	r0
 100:	0f b6       	in	r0, 0x3f	; 63
 102:	0f 92       	push	r0
 104:	11 24       	eor	r1, r1
 106:	2f 93       	push	r18
 108:	3f 93       	push	r19
 10a:	4f 93       	push	r20
 10c:	5f 93       	push	r21
 10e:	6f 93       	push	r22
 110:	7f 93       	push	r23
 112:	8f 93       	push	r24
 114:	9f 93       	push	r25
 116:	af 93       	push	r26
 118:	bf 93       	push	r27
 11a:	ef 93       	push	r30
 11c:	ff 93       	push	r31
 11e:	cf 93       	push	r28
 120:	df 93       	push	r29
 122:	1f 92       	push	r1
 124:	cd b7       	in	r28, 0x3d	; 61
 126:	de b7       	in	r29, 0x3e	; 62
	//printf("___in ISR___ \n\r");
	// user code here
	
	
	volatile uint8_t interrupt_value;
	interrupt_value = MCP2515_read( MCP_CANINTF );
 128:	8c e2       	ldi	r24, 0x2C	; 44
 12a:	0e 94 24 01 	call	0x248	; 0x248 <MCP2515_read>
 12e:	89 83       	std	Y+1, r24	; 0x01
	
	MCP2515_bit_modify(MCP_CANINTF, interrupt_value, 0x00);
 130:	69 81       	ldd	r22, Y+1	; 0x01
 132:	40 e0       	ldi	r20, 0x00	; 0
 134:	8c e2       	ldi	r24, 0x2C	; 44
 136:	0e 94 55 01 	call	0x2aa	; 0x2aa <MCP2515_bit_modify>
	
	printf("Interrupt value: %d \n\r", interrupt_value);
 13a:	89 81       	ldd	r24, Y+1	; 0x01
 13c:	1f 92       	push	r1
 13e:	8f 93       	push	r24
 140:	86 e0       	ldi	r24, 0x06	; 6
 142:	91 e0       	ldi	r25, 0x01	; 1
 144:	9f 93       	push	r25
 146:	8f 93       	push	r24
 148:	0e 94 56 02 	call	0x4ac	; 0x4ac <printf>
	
	MCP_val_read = CAN_receive();
 14c:	0e 94 71 00 	call	0xe2	; 0xe2 <CAN_receive>
 150:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>

}
 154:	0f 90       	pop	r0
 156:	0f 90       	pop	r0
 158:	0f 90       	pop	r0
 15a:	0f 90       	pop	r0
 15c:	0f 90       	pop	r0
 15e:	df 91       	pop	r29
 160:	cf 91       	pop	r28
 162:	ff 91       	pop	r31
 164:	ef 91       	pop	r30
 166:	bf 91       	pop	r27
 168:	af 91       	pop	r26
 16a:	9f 91       	pop	r25
 16c:	8f 91       	pop	r24
 16e:	7f 91       	pop	r23
 170:	6f 91       	pop	r22
 172:	5f 91       	pop	r21
 174:	4f 91       	pop	r20
 176:	3f 91       	pop	r19
 178:	2f 91       	pop	r18
 17a:	0f 90       	pop	r0
 17c:	0f be       	out	0x3f, r0	; 63
 17e:	0f 90       	pop	r0
 180:	1f 90       	pop	r1
 182:	18 95       	reti

00000184 <main>:


int main(void)
{	
	xmem_init();
 184:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <xmem_init>
	adc_init();
 188:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <adc_init>
	USART_Init(MYUBRR);
 18c:	8f e1       	ldi	r24, 0x1F	; 31
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <USART_Init>
	
	MCP2515_init();
 194:	0e 94 9d 01 	call	0x33a	; 0x33a <MCP2515_init>
	//OLED_clear_screen();
	//mainmenu();
	
	//SPI_MasterInit();
	
	MCP2515_set_mode(MODE_LOOPBACK);
 198:	80 e4       	ldi	r24, 0x40	; 64
 19a:	0e 94 71 01 	call	0x2e2	; 0x2e2 <MCP2515_set_mode>
		uint8_t MCP_val_send; 
		//uint8_t MCP_val_read;
	
		MCP_val_send = 0b10011001; 
		
		printf("___________1____________\n\n\r");
 19e:	8d e1       	ldi	r24, 0x1D	; 29
 1a0:	91 e0       	ldi	r25, 0x01	; 1
 1a2:	9f 93       	push	r25
 1a4:	8f 93       	push	r24
 1a6:	0e 94 56 02 	call	0x4ac	; 0x4ac <printf>
		
		//Transmit Data
		CAN_transmit(0xFF, 0x0F, MCP_val_send);
 1aa:	49 e9       	ldi	r20, 0x99	; 153
 1ac:	6f e0       	ldi	r22, 0x0F	; 15
 1ae:	8f ef       	ldi	r24, 0xFF	; 255
 1b0:	0e 94 57 00 	call	0xae	; 0xae <CAN_transmit>
		
		
		printf("Sent value: %d \n\r", MCP_val_send);
 1b4:	1f 92       	push	r1
 1b6:	89 e9       	ldi	r24, 0x99	; 153
 1b8:	8f 93       	push	r24
 1ba:	89 e3       	ldi	r24, 0x39	; 57
 1bc:	91 e0       	ldi	r25, 0x01	; 1
 1be:	9f 93       	push	r25
 1c0:	8f 93       	push	r24
 1c2:	0e 94 56 02 	call	0x4ac	; 0x4ac <printf>
		
		////Read Data
		//MCP_val_read = CAN_receive();
	
		printf("Received value: %d \n\r", MCP_val_read);
 1c6:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
 1ca:	1f 92       	push	r1
 1cc:	8f 93       	push	r24
 1ce:	cb e4       	ldi	r28, 0x4B	; 75
 1d0:	d1 e0       	ldi	r29, 0x01	; 1
 1d2:	df 93       	push	r29
 1d4:	cf 93       	push	r28
 1d6:	0e 94 56 02 	call	0x4ac	; 0x4ac <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1da:	9f ef       	ldi	r25, 0xFF	; 255
 1dc:	2f ef       	ldi	r18, 0xFF	; 255
 1de:	8d e1       	ldi	r24, 0x1D	; 29
 1e0:	91 50       	subi	r25, 0x01	; 1
 1e2:	20 40       	sbci	r18, 0x00	; 0
 1e4:	80 40       	sbci	r24, 0x00	; 0
 1e6:	e1 f7       	brne	.-8      	; 0x1e0 <main+0x5c>
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <main+0x66>
 1ea:	00 00       	nop
		
		

		_delay_ms(2000);
		
		printf("___________2____________\n\n\r");
 1ec:	81 e6       	ldi	r24, 0x61	; 97
 1ee:	91 e0       	ldi	r25, 0x01	; 1
 1f0:	9f 93       	push	r25
 1f2:	8f 93       	push	r24
 1f4:	0e 94 56 02 	call	0x4ac	; 0x4ac <printf>
		
		//Transmit Data
		MCP_val_send = 0b10101011;
		
		CAN_transmit(0xFF, 0x0F, MCP_val_send);
 1f8:	4b ea       	ldi	r20, 0xAB	; 171
 1fa:	6f e0       	ldi	r22, 0x0F	; 15
 1fc:	8f ef       	ldi	r24, 0xFF	; 255
 1fe:	0e 94 57 00 	call	0xae	; 0xae <CAN_transmit>
		
		////Read Data
		//MCP_val_read = CAN_receive();
		
		printf("Sendt value: %d \n\r", MCP_val_send);
 202:	1f 92       	push	r1
 204:	8b ea       	ldi	r24, 0xAB	; 171
 206:	8f 93       	push	r24
 208:	8d e7       	ldi	r24, 0x7D	; 125
 20a:	91 e0       	ldi	r25, 0x01	; 1
 20c:	9f 93       	push	r25
 20e:	8f 93       	push	r24
 210:	0e 94 56 02 	call	0x4ac	; 0x4ac <printf>
		printf("Received value: %d \n\r", MCP_val_read);
 214:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
 218:	1f 92       	push	r1
 21a:	8f 93       	push	r24
 21c:	df 93       	push	r29
 21e:	cf 93       	push	r28
 220:	0e 94 56 02 	call	0x4ac	; 0x4ac <printf>
 224:	8f ef       	ldi	r24, 0xFF	; 255
 226:	9f ef       	ldi	r25, 0xFF	; 255
 228:	2e e0       	ldi	r18, 0x0E	; 14
 22a:	81 50       	subi	r24, 0x01	; 1
 22c:	90 40       	sbci	r25, 0x00	; 0
 22e:	20 40       	sbci	r18, 0x00	; 0
 230:	e1 f7       	brne	.-8      	; 0x22a <__EEPROM_REGION_LENGTH__+0x2a>
 232:	00 c0       	rjmp	.+0      	; 0x234 <__EEPROM_REGION_LENGTH__+0x34>
 234:	00 00       	nop
 236:	8d b7       	in	r24, 0x3d	; 61
 238:	9e b7       	in	r25, 0x3e	; 62
 23a:	44 96       	adiw	r24, 0x14	; 20
 23c:	0f b6       	in	r0, 0x3f	; 63
 23e:	f8 94       	cli
 240:	9e bf       	out	0x3e, r25	; 62
 242:	0f be       	out	0x3f, r0	; 63
 244:	8d bf       	out	0x3d, r24	; 61
 246:	ab cf       	rjmp	.-170    	; 0x19e <main+0x1a>

00000248 <MCP2515_read>:




uint8_t MCP2515_read(uint8_t address)
{
 248:	cf 93       	push	r28
 24a:	c8 2f       	mov	r28, r24
	uint8_t result ;
	
	PORTB &= ~(1 << PB4 ); // Select CAN - controller, chip select SPI
 24c:	88 b3       	in	r24, 0x18	; 24
 24e:	8f 7e       	andi	r24, 0xEF	; 239
 250:	88 bb       	out	0x18, r24	; 24
	
	SPI_write( MCP_READ ); // Send read instruction
 252:	83 e0       	ldi	r24, 0x03	; 3
 254:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <SPI_write>
	SPI_write( address ); // Send address
 258:	8c 2f       	mov	r24, r28
 25a:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <SPI_write>
	result = SPI_read() ; // Read result
 25e:	0e 94 d7 01 	call	0x3ae	; 0x3ae <SPI_read>
	
	PORTB |= (1 << PB4 ); // Deselect CAN - controller,  chip select SPI
 262:	98 b3       	in	r25, 0x18	; 24
 264:	90 61       	ori	r25, 0x10	; 16
 266:	98 bb       	out	0x18, r25	; 24
	
	return result ;
	
	
}
 268:	cf 91       	pop	r28
 26a:	08 95       	ret

0000026c <MCP2515_write>:


void MCP2515_write(uint8_t address, uint8_t data)
{
 26c:	cf 93       	push	r28
 26e:	df 93       	push	r29
 270:	d8 2f       	mov	r29, r24
 272:	c6 2f       	mov	r28, r22
	PORTB &= ~(1 << PB4 ); // Select CAN - controller, chip select SPI
 274:	88 b3       	in	r24, 0x18	; 24
 276:	8f 7e       	andi	r24, 0xEF	; 239
 278:	88 bb       	out	0x18, r24	; 24
	
	SPI_write( MCP_WRITE ); // Send write instruction
 27a:	82 e0       	ldi	r24, 0x02	; 2
 27c:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <SPI_write>
	SPI_write(address);		// Send address
 280:	8d 2f       	mov	r24, r29
 282:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <SPI_write>
	SPI_write(data);		// Send data
 286:	8c 2f       	mov	r24, r28
 288:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <SPI_write>
	
	PORTB |= (1 << PB4 ); // Deselect CAN - controller,  chip select SPI
 28c:	88 b3       	in	r24, 0x18	; 24
 28e:	80 61       	ori	r24, 0x10	; 16
 290:	88 bb       	out	0x18, r24	; 24
	
	
}
 292:	df 91       	pop	r29
 294:	cf 91       	pop	r28
 296:	08 95       	ret

00000298 <MCP2515_request_to_send>:

void MCP2515_request_to_send(uint8_t MCP_RTS_N)
{
	PORTB &= ~(1 << PB4 ); // Select CAN - controller, chip select SPI
 298:	98 b3       	in	r25, 0x18	; 24
 29a:	9f 7e       	andi	r25, 0xEF	; 239
 29c:	98 bb       	out	0x18, r25	; 24
	
	SPI_write(MCP_RTS_N);   //Send RTS - instruction
 29e:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <SPI_write>
	
	PORTB |= (1 << PB4 ); // Deselect CAN - controller,  chip select SPI
 2a2:	88 b3       	in	r24, 0x18	; 24
 2a4:	80 61       	ori	r24, 0x10	; 16
 2a6:	88 bb       	out	0x18, r24	; 24
 2a8:	08 95       	ret

000002aa <MCP2515_bit_modify>:
	
}

void MCP2515_bit_modify(uint8_t address, uint8_t mask, uint8_t data)
{
 2aa:	1f 93       	push	r17
 2ac:	cf 93       	push	r28
 2ae:	df 93       	push	r29
 2b0:	18 2f       	mov	r17, r24
 2b2:	d6 2f       	mov	r29, r22
 2b4:	c4 2f       	mov	r28, r20
	
	PORTB &= ~(1 << PB4 ); // Select CAN - controller, chip select SPI
 2b6:	88 b3       	in	r24, 0x18	; 24
 2b8:	8f 7e       	andi	r24, 0xEF	; 239
 2ba:	88 bb       	out	0x18, r24	; 24
	
	SPI_write(MCP_BITMOD);   //Send bit modify - instruction
 2bc:	85 e0       	ldi	r24, 0x05	; 5
 2be:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <SPI_write>
	SPI_write(address);		 //Send Address Byte
 2c2:	81 2f       	mov	r24, r17
 2c4:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <SPI_write>
	SPI_write(mask);		 //Send Mask Byte
 2c8:	8d 2f       	mov	r24, r29
 2ca:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <SPI_write>
	SPI_write(data);		 //Send Data Byte
 2ce:	8c 2f       	mov	r24, r28
 2d0:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <SPI_write>
	
	
	PORTB |= (1 << PB4 ); // Deselect CAN - controller,  chip select SPI
 2d4:	88 b3       	in	r24, 0x18	; 24
 2d6:	80 61       	ori	r24, 0x10	; 16
 2d8:	88 bb       	out	0x18, r24	; 24
	
	
}
 2da:	df 91       	pop	r29
 2dc:	cf 91       	pop	r28
 2de:	1f 91       	pop	r17
 2e0:	08 95       	ret

000002e2 <MCP2515_set_mode>:
	
	return 0;
}

uint8_t MCP2515_set_mode(uint8_t mode)
{
 2e2:	cf 93       	push	r28
 2e4:	c8 2f       	mov	r28, r24
	uint8_t value = 0;
	
	MCP2515_bit_modify(MCP_CANCTRL,MODE_MASK,mode);
 2e6:	48 2f       	mov	r20, r24
 2e8:	60 ee       	ldi	r22, 0xE0	; 224
 2ea:	8f e0       	ldi	r24, 0x0F	; 15
 2ec:	0e 94 55 01 	call	0x2aa	; 0x2aa <MCP2515_bit_modify>
	
	value = MCP2515_read ( MCP_CANSTAT );
 2f0:	8e e0       	ldi	r24, 0x0E	; 14
 2f2:	0e 94 24 01 	call	0x248	; 0x248 <MCP2515_read>
	if (( value & MODE_MASK ) != mode ) {
 2f6:	80 7e       	andi	r24, 0xE0	; 224
 2f8:	8c 17       	cp	r24, r28
 2fa:	51 f0       	breq	.+20     	; 0x310 <MCP2515_set_mode+0x2e>
		printf (" mcp2515 is not changed to desired mode !\n\r");
 2fc:	80 e9       	ldi	r24, 0x90	; 144
 2fe:	91 e0       	ldi	r25, 0x01	; 1
 300:	9f 93       	push	r25
 302:	8f 93       	push	r24
 304:	0e 94 56 02 	call	0x4ac	; 0x4ac <printf>
		return 1;
 308:	0f 90       	pop	r0
 30a:	0f 90       	pop	r0
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	09 c0       	rjmp	.+18     	; 0x322 <MCP2515_set_mode+0x40>
		
	}
	
	printf("MCP successfully changed mode\n\r");
 310:	8c eb       	ldi	r24, 0xBC	; 188
 312:	91 e0       	ldi	r25, 0x01	; 1
 314:	9f 93       	push	r25
 316:	8f 93       	push	r24
 318:	0e 94 56 02 	call	0x4ac	; 0x4ac <printf>
	
	return 0;
 31c:	0f 90       	pop	r0
 31e:	0f 90       	pop	r0
 320:	80 e0       	ldi	r24, 0x00	; 0
	
}
 322:	cf 91       	pop	r28
 324:	08 95       	ret

00000326 <MCP2515_reset>:
}


void MCP2515_reset(void)
{
	PORTB &= ~(1 << PB4 ); // Select CAN - controller, chip select SPI
 326:	88 b3       	in	r24, 0x18	; 24
 328:	8f 7e       	andi	r24, 0xEF	; 239
 32a:	88 bb       	out	0x18, r24	; 24
		
	SPI_write(MCP_RESET);   //Send Reset - instruction
 32c:	80 ec       	ldi	r24, 0xC0	; 192
 32e:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <SPI_write>
		
	PORTB |= (1 << PB4 ); // Deselect CAN - controller,  chip select SPI
 332:	88 b3       	in	r24, 0x18	; 24
 334:	80 61       	ori	r24, 0x10	; 16
 336:	88 bb       	out	0x18, r24	; 24
 338:	08 95       	ret

0000033a <MCP2515_init>:
#include <stdio.h>


uint8_t  MCP2515_init(void)
{	
	sei(); // Set Global Interrupt Enable bit
 33a:	78 94       	sei
	GICR |= ( 1 << INT0 ); // Set external interrupt request 0 Enable	
 33c:	8b b7       	in	r24, 0x3b	; 59
 33e:	80 64       	ori	r24, 0x40	; 64
 340:	8b bf       	out	0x3b, r24	; 59
	
	uint8_t value = 0;
	SPI_MasterInit (); // Initialize SPI
 342:	0e 94 c9 01 	call	0x392	; 0x392 <SPI_MasterInit>
	MCP2515_reset (); // Send reset - command
 346:	0e 94 93 01 	call	0x326	; 0x326 <MCP2515_reset>
	
	// Self - test
	value = MCP2515_read ( MCP_CANSTAT );
 34a:	8e e0       	ldi	r24, 0x0E	; 14
 34c:	0e 94 24 01 	call	0x248	; 0x248 <MCP2515_read>
	
	if (( value & MODE_MASK ) != MODE_CONFIG ) {
 350:	80 7e       	andi	r24, 0xE0	; 224
 352:	80 38       	cpi	r24, 0x80	; 128
 354:	51 f0       	breq	.+20     	; 0x36a <MCP2515_init+0x30>
		printf (" MCP2515 is NOT in configuration mode after reset !\n\r");
 356:	8c ed       	ldi	r24, 0xDC	; 220
 358:	91 e0       	ldi	r25, 0x01	; 1
 35a:	9f 93       	push	r25
 35c:	8f 93       	push	r24
 35e:	0e 94 56 02 	call	0x4ac	; 0x4ac <printf>
		return 1;
 362:	0f 90       	pop	r0
 364:	0f 90       	pop	r0
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	08 95       	ret
		
	}
	printf("MCP in Config-mode\n\r");
 36a:	82 e1       	ldi	r24, 0x12	; 18
 36c:	92 e0       	ldi	r25, 0x02	; 2
 36e:	9f 93       	push	r25
 370:	8f 93       	push	r24
 372:	0e 94 56 02 	call	0x4ac	; 0x4ac <printf>
	
	
	//Enabling interrupts
	
	//set all TX-interrupt 
	MCP2515_bit_modify(MCP_CANINTE, MCP_TX_MASK, MCP_TX_INT);
 376:	4c e1       	ldi	r20, 0x1C	; 28
 378:	64 e5       	ldi	r22, 0x54	; 84
 37a:	8b e2       	ldi	r24, 0x2B	; 43
 37c:	0e 94 55 01 	call	0x2aa	; 0x2aa <MCP2515_bit_modify>
	//set all RX-interrupts
	MCP2515_bit_modify(MCP_CANINTE, MCP_RX_INT, MCP_RX_INT);
 380:	43 e0       	ldi	r20, 0x03	; 3
 382:	63 e0       	ldi	r22, 0x03	; 3
 384:	8b e2       	ldi	r24, 0x2B	; 43
 386:	0e 94 55 01 	call	0x2aa	; 0x2aa <MCP2515_bit_modify>
	
	
	
	return 0;
 38a:	0f 90       	pop	r0
 38c:	0f 90       	pop	r0
 38e:	80 e0       	ldi	r24, 0x00	; 0
}
 390:	08 95       	ret

00000392 <SPI_MasterInit>:

void SPI_MasterInit(void)
{	
	
	/* Set MOSI, SCK, *SS as output, all others input */
	DDRB |= (1<<DDB5)|(1<<DDB7)|(1<<DDB4);
 392:	87 b3       	in	r24, 0x17	; 23
 394:	80 6b       	ori	r24, 0xB0	; 176
 396:	87 bb       	out	0x17, r24	; 23
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0);
 398:	8d b1       	in	r24, 0x0d	; 13
 39a:	81 65       	ori	r24, 0x51	; 81
 39c:	8d b9       	out	0x0d, r24	; 13
	
	//set MISO to input
	DDRB &= ~(1<<DDB6);	
 39e:	87 b3       	in	r24, 0x17	; 23
 3a0:	8f 7b       	andi	r24, 0xBF	; 191
 3a2:	87 bb       	out	0x17, r24	; 23
 3a4:	08 95       	ret

000003a6 <SPI_write>:


void SPI_write(uint8_t data)
{
	/* Start transmission */
	SPDR = data;
 3a6:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
 3a8:	77 9b       	sbis	0x0e, 7	; 14
 3aa:	fe cf       	rjmp	.-4      	; 0x3a8 <SPI_write+0x2>
}
 3ac:	08 95       	ret

000003ae <SPI_read>:

uint8_t SPI_read(void)
{
	// Send dummy-byte to receive data
	SPI_write(0xF);
 3ae:	8f e0       	ldi	r24, 0x0F	; 15
 3b0:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <SPI_write>
	
	return SPDR;
 3b4:	8f b1       	in	r24, 0x0f	; 15

}
 3b6:	08 95       	ret

000003b8 <USART_Transmit>:
 3b8:	5d 9b       	sbis	0x0b, 5	; 11
 3ba:	fe cf       	rjmp	.-4      	; 0x3b8 <USART_Transmit>
 3bc:	8c b9       	out	0x0c, r24	; 12
 3be:	08 95       	ret

000003c0 <USART_Receive>:
 3c0:	5f 9b       	sbis	0x0b, 7	; 11
 3c2:	fe cf       	rjmp	.-4      	; 0x3c0 <USART_Receive>
 3c4:	8c b1       	in	r24, 0x0c	; 12
 3c6:	08 95       	ret

000003c8 <USART_Init>:
 3c8:	90 bd       	out	0x20, r25	; 32
 3ca:	89 b9       	out	0x09, r24	; 9
 3cc:	88 e1       	ldi	r24, 0x18	; 24
 3ce:	8a b9       	out	0x0a, r24	; 10
 3d0:	8e e8       	ldi	r24, 0x8E	; 142
 3d2:	80 bd       	out	0x20, r24	; 32
 3d4:	60 ee       	ldi	r22, 0xE0	; 224
 3d6:	71 e0       	ldi	r23, 0x01	; 1
 3d8:	8c ed       	ldi	r24, 0xDC	; 220
 3da:	91 e0       	ldi	r25, 0x01	; 1
 3dc:	0e 94 0b 02 	call	0x416	; 0x416 <fdevopen>
 3e0:	08 95       	ret

000003e2 <xmem_init>:
 3e2:	85 b7       	in	r24, 0x35	; 53
 3e4:	80 68       	ori	r24, 0x80	; 128
 3e6:	85 bf       	out	0x35, r24	; 53
 3e8:	80 b7       	in	r24, 0x30	; 48
 3ea:	80 62       	ori	r24, 0x20	; 32
 3ec:	80 bf       	out	0x30, r24	; 48
 3ee:	08 95       	ret

000003f0 <adc_init>:
 3f0:	81 b3       	in	r24, 0x11	; 17
 3f2:	80 62       	ori	r24, 0x20	; 32
 3f4:	81 bb       	out	0x11, r24	; 17
 3f6:	81 b3       	in	r24, 0x11	; 17
 3f8:	81 bb       	out	0x11, r24	; 17
 3fa:	8e b5       	in	r24, 0x2e	; 46
 3fc:	88 60       	ori	r24, 0x08	; 8
 3fe:	8e bd       	out	0x2e, r24	; 46
 400:	8f b5       	in	r24, 0x2f	; 47
 402:	8f bd       	out	0x2f, r24	; 47
 404:	8e b5       	in	r24, 0x2e	; 46
 406:	81 60       	ori	r24, 0x01	; 1
 408:	8e bd       	out	0x2e, r24	; 46
 40a:	8f b5       	in	r24, 0x2f	; 47
 40c:	80 64       	ori	r24, 0x40	; 64
 40e:	8f bd       	out	0x2f, r24	; 47
 410:	1b bc       	out	0x2b, r1	; 43
 412:	1a bc       	out	0x2a, r1	; 42
 414:	08 95       	ret

00000416 <fdevopen>:
 416:	0f 93       	push	r16
 418:	1f 93       	push	r17
 41a:	cf 93       	push	r28
 41c:	df 93       	push	r29
 41e:	00 97       	sbiw	r24, 0x00	; 0
 420:	31 f4       	brne	.+12     	; 0x42e <fdevopen+0x18>
 422:	61 15       	cp	r22, r1
 424:	71 05       	cpc	r23, r1
 426:	19 f4       	brne	.+6      	; 0x42e <fdevopen+0x18>
 428:	80 e0       	ldi	r24, 0x00	; 0
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	3a c0       	rjmp	.+116    	; 0x4a2 <fdevopen+0x8c>
 42e:	8b 01       	movw	r16, r22
 430:	ec 01       	movw	r28, r24
 432:	6e e0       	ldi	r22, 0x0E	; 14
 434:	70 e0       	ldi	r23, 0x00	; 0
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	0e 94 4d 04 	call	0x89a	; 0x89a <calloc>
 43e:	fc 01       	movw	r30, r24
 440:	89 2b       	or	r24, r25
 442:	91 f3       	breq	.-28     	; 0x428 <fdevopen+0x12>
 444:	80 e8       	ldi	r24, 0x80	; 128
 446:	83 83       	std	Z+3, r24	; 0x03
 448:	01 15       	cp	r16, r1
 44a:	11 05       	cpc	r17, r1
 44c:	71 f0       	breq	.+28     	; 0x46a <fdevopen+0x54>
 44e:	13 87       	std	Z+11, r17	; 0x0b
 450:	02 87       	std	Z+10, r16	; 0x0a
 452:	81 e8       	ldi	r24, 0x81	; 129
 454:	83 83       	std	Z+3, r24	; 0x03
 456:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <__iob>
 45a:	90 91 2a 02 	lds	r25, 0x022A	; 0x80022a <__iob+0x1>
 45e:	89 2b       	or	r24, r25
 460:	21 f4       	brne	.+8      	; 0x46a <fdevopen+0x54>
 462:	f0 93 2a 02 	sts	0x022A, r31	; 0x80022a <__iob+0x1>
 466:	e0 93 29 02 	sts	0x0229, r30	; 0x800229 <__iob>
 46a:	20 97       	sbiw	r28, 0x00	; 0
 46c:	c9 f0       	breq	.+50     	; 0x4a0 <fdevopen+0x8a>
 46e:	d1 87       	std	Z+9, r29	; 0x09
 470:	c0 87       	std	Z+8, r28	; 0x08
 472:	83 81       	ldd	r24, Z+3	; 0x03
 474:	82 60       	ori	r24, 0x02	; 2
 476:	83 83       	std	Z+3, r24	; 0x03
 478:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <__iob+0x2>
 47c:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <__iob+0x3>
 480:	89 2b       	or	r24, r25
 482:	71 f4       	brne	.+28     	; 0x4a0 <fdevopen+0x8a>
 484:	f0 93 2c 02 	sts	0x022C, r31	; 0x80022c <__iob+0x3>
 488:	e0 93 2b 02 	sts	0x022B, r30	; 0x80022b <__iob+0x2>
 48c:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <__iob+0x4>
 490:	90 91 2e 02 	lds	r25, 0x022E	; 0x80022e <__iob+0x5>
 494:	89 2b       	or	r24, r25
 496:	21 f4       	brne	.+8      	; 0x4a0 <fdevopen+0x8a>
 498:	f0 93 2e 02 	sts	0x022E, r31	; 0x80022e <__iob+0x5>
 49c:	e0 93 2d 02 	sts	0x022D, r30	; 0x80022d <__iob+0x4>
 4a0:	cf 01       	movw	r24, r30
 4a2:	df 91       	pop	r29
 4a4:	cf 91       	pop	r28
 4a6:	1f 91       	pop	r17
 4a8:	0f 91       	pop	r16
 4aa:	08 95       	ret

000004ac <printf>:
 4ac:	a0 e0       	ldi	r26, 0x00	; 0
 4ae:	b0 e0       	ldi	r27, 0x00	; 0
 4b0:	ec e5       	ldi	r30, 0x5C	; 92
 4b2:	f2 e0       	ldi	r31, 0x02	; 2
 4b4:	0c 94 51 06 	jmp	0xca2	; 0xca2 <__prologue_saves__+0x20>
 4b8:	ae 01       	movw	r20, r28
 4ba:	4b 5f       	subi	r20, 0xFB	; 251
 4bc:	5f 4f       	sbci	r21, 0xFF	; 255
 4be:	fa 01       	movw	r30, r20
 4c0:	61 91       	ld	r22, Z+
 4c2:	71 91       	ld	r23, Z+
 4c4:	af 01       	movw	r20, r30
 4c6:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <__iob+0x2>
 4ca:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <__iob+0x3>
 4ce:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <vfprintf>
 4d2:	e2 e0       	ldi	r30, 0x02	; 2
 4d4:	0c 94 6d 06 	jmp	0xcda	; 0xcda <__epilogue_restores__+0x20>

000004d8 <vfprintf>:
 4d8:	ab e0       	ldi	r26, 0x0B	; 11
 4da:	b0 e0       	ldi	r27, 0x00	; 0
 4dc:	e2 e7       	ldi	r30, 0x72	; 114
 4de:	f2 e0       	ldi	r31, 0x02	; 2
 4e0:	0c 94 41 06 	jmp	0xc82	; 0xc82 <__prologue_saves__>
 4e4:	6c 01       	movw	r12, r24
 4e6:	7b 01       	movw	r14, r22
 4e8:	8a 01       	movw	r16, r20
 4ea:	fc 01       	movw	r30, r24
 4ec:	17 82       	std	Z+7, r1	; 0x07
 4ee:	16 82       	std	Z+6, r1	; 0x06
 4f0:	83 81       	ldd	r24, Z+3	; 0x03
 4f2:	81 ff       	sbrs	r24, 1
 4f4:	cc c1       	rjmp	.+920    	; 0x88e <__stack+0x38f>
 4f6:	ce 01       	movw	r24, r28
 4f8:	01 96       	adiw	r24, 0x01	; 1
 4fa:	3c 01       	movw	r6, r24
 4fc:	f6 01       	movw	r30, r12
 4fe:	93 81       	ldd	r25, Z+3	; 0x03
 500:	f7 01       	movw	r30, r14
 502:	93 fd       	sbrc	r25, 3
 504:	85 91       	lpm	r24, Z+
 506:	93 ff       	sbrs	r25, 3
 508:	81 91       	ld	r24, Z+
 50a:	7f 01       	movw	r14, r30
 50c:	88 23       	and	r24, r24
 50e:	09 f4       	brne	.+2      	; 0x512 <__stack+0x13>
 510:	ba c1       	rjmp	.+884    	; 0x886 <__stack+0x387>
 512:	85 32       	cpi	r24, 0x25	; 37
 514:	39 f4       	brne	.+14     	; 0x524 <__stack+0x25>
 516:	93 fd       	sbrc	r25, 3
 518:	85 91       	lpm	r24, Z+
 51a:	93 ff       	sbrs	r25, 3
 51c:	81 91       	ld	r24, Z+
 51e:	7f 01       	movw	r14, r30
 520:	85 32       	cpi	r24, 0x25	; 37
 522:	29 f4       	brne	.+10     	; 0x52e <__stack+0x2f>
 524:	b6 01       	movw	r22, r12
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	0e 94 a7 05 	call	0xb4e	; 0xb4e <fputc>
 52c:	e7 cf       	rjmp	.-50     	; 0x4fc <vfprintf+0x24>
 52e:	91 2c       	mov	r9, r1
 530:	21 2c       	mov	r2, r1
 532:	31 2c       	mov	r3, r1
 534:	ff e1       	ldi	r31, 0x1F	; 31
 536:	f3 15       	cp	r31, r3
 538:	d8 f0       	brcs	.+54     	; 0x570 <__stack+0x71>
 53a:	8b 32       	cpi	r24, 0x2B	; 43
 53c:	79 f0       	breq	.+30     	; 0x55c <__stack+0x5d>
 53e:	38 f4       	brcc	.+14     	; 0x54e <__stack+0x4f>
 540:	80 32       	cpi	r24, 0x20	; 32
 542:	79 f0       	breq	.+30     	; 0x562 <__stack+0x63>
 544:	83 32       	cpi	r24, 0x23	; 35
 546:	a1 f4       	brne	.+40     	; 0x570 <__stack+0x71>
 548:	23 2d       	mov	r18, r3
 54a:	20 61       	ori	r18, 0x10	; 16
 54c:	1d c0       	rjmp	.+58     	; 0x588 <__stack+0x89>
 54e:	8d 32       	cpi	r24, 0x2D	; 45
 550:	61 f0       	breq	.+24     	; 0x56a <__stack+0x6b>
 552:	80 33       	cpi	r24, 0x30	; 48
 554:	69 f4       	brne	.+26     	; 0x570 <__stack+0x71>
 556:	23 2d       	mov	r18, r3
 558:	21 60       	ori	r18, 0x01	; 1
 55a:	16 c0       	rjmp	.+44     	; 0x588 <__stack+0x89>
 55c:	83 2d       	mov	r24, r3
 55e:	82 60       	ori	r24, 0x02	; 2
 560:	38 2e       	mov	r3, r24
 562:	e3 2d       	mov	r30, r3
 564:	e4 60       	ori	r30, 0x04	; 4
 566:	3e 2e       	mov	r3, r30
 568:	2a c0       	rjmp	.+84     	; 0x5be <__stack+0xbf>
 56a:	f3 2d       	mov	r31, r3
 56c:	f8 60       	ori	r31, 0x08	; 8
 56e:	1d c0       	rjmp	.+58     	; 0x5aa <__stack+0xab>
 570:	37 fc       	sbrc	r3, 7
 572:	2d c0       	rjmp	.+90     	; 0x5ce <__stack+0xcf>
 574:	20 ed       	ldi	r18, 0xD0	; 208
 576:	28 0f       	add	r18, r24
 578:	2a 30       	cpi	r18, 0x0A	; 10
 57a:	40 f0       	brcs	.+16     	; 0x58c <__stack+0x8d>
 57c:	8e 32       	cpi	r24, 0x2E	; 46
 57e:	b9 f4       	brne	.+46     	; 0x5ae <__stack+0xaf>
 580:	36 fc       	sbrc	r3, 6
 582:	81 c1       	rjmp	.+770    	; 0x886 <__stack+0x387>
 584:	23 2d       	mov	r18, r3
 586:	20 64       	ori	r18, 0x40	; 64
 588:	32 2e       	mov	r3, r18
 58a:	19 c0       	rjmp	.+50     	; 0x5be <__stack+0xbf>
 58c:	36 fe       	sbrs	r3, 6
 58e:	06 c0       	rjmp	.+12     	; 0x59c <__stack+0x9d>
 590:	8a e0       	ldi	r24, 0x0A	; 10
 592:	98 9e       	mul	r9, r24
 594:	20 0d       	add	r18, r0
 596:	11 24       	eor	r1, r1
 598:	92 2e       	mov	r9, r18
 59a:	11 c0       	rjmp	.+34     	; 0x5be <__stack+0xbf>
 59c:	ea e0       	ldi	r30, 0x0A	; 10
 59e:	2e 9e       	mul	r2, r30
 5a0:	20 0d       	add	r18, r0
 5a2:	11 24       	eor	r1, r1
 5a4:	22 2e       	mov	r2, r18
 5a6:	f3 2d       	mov	r31, r3
 5a8:	f0 62       	ori	r31, 0x20	; 32
 5aa:	3f 2e       	mov	r3, r31
 5ac:	08 c0       	rjmp	.+16     	; 0x5be <__stack+0xbf>
 5ae:	8c 36       	cpi	r24, 0x6C	; 108
 5b0:	21 f4       	brne	.+8      	; 0x5ba <__stack+0xbb>
 5b2:	83 2d       	mov	r24, r3
 5b4:	80 68       	ori	r24, 0x80	; 128
 5b6:	38 2e       	mov	r3, r24
 5b8:	02 c0       	rjmp	.+4      	; 0x5be <__stack+0xbf>
 5ba:	88 36       	cpi	r24, 0x68	; 104
 5bc:	41 f4       	brne	.+16     	; 0x5ce <__stack+0xcf>
 5be:	f7 01       	movw	r30, r14
 5c0:	93 fd       	sbrc	r25, 3
 5c2:	85 91       	lpm	r24, Z+
 5c4:	93 ff       	sbrs	r25, 3
 5c6:	81 91       	ld	r24, Z+
 5c8:	7f 01       	movw	r14, r30
 5ca:	81 11       	cpse	r24, r1
 5cc:	b3 cf       	rjmp	.-154    	; 0x534 <__stack+0x35>
 5ce:	98 2f       	mov	r25, r24
 5d0:	9f 7d       	andi	r25, 0xDF	; 223
 5d2:	95 54       	subi	r25, 0x45	; 69
 5d4:	93 30       	cpi	r25, 0x03	; 3
 5d6:	28 f4       	brcc	.+10     	; 0x5e2 <__stack+0xe3>
 5d8:	0c 5f       	subi	r16, 0xFC	; 252
 5da:	1f 4f       	sbci	r17, 0xFF	; 255
 5dc:	9f e3       	ldi	r25, 0x3F	; 63
 5de:	99 83       	std	Y+1, r25	; 0x01
 5e0:	0d c0       	rjmp	.+26     	; 0x5fc <__stack+0xfd>
 5e2:	83 36       	cpi	r24, 0x63	; 99
 5e4:	31 f0       	breq	.+12     	; 0x5f2 <__stack+0xf3>
 5e6:	83 37       	cpi	r24, 0x73	; 115
 5e8:	71 f0       	breq	.+28     	; 0x606 <__stack+0x107>
 5ea:	83 35       	cpi	r24, 0x53	; 83
 5ec:	09 f0       	breq	.+2      	; 0x5f0 <__stack+0xf1>
 5ee:	59 c0       	rjmp	.+178    	; 0x6a2 <__stack+0x1a3>
 5f0:	21 c0       	rjmp	.+66     	; 0x634 <__stack+0x135>
 5f2:	f8 01       	movw	r30, r16
 5f4:	80 81       	ld	r24, Z
 5f6:	89 83       	std	Y+1, r24	; 0x01
 5f8:	0e 5f       	subi	r16, 0xFE	; 254
 5fa:	1f 4f       	sbci	r17, 0xFF	; 255
 5fc:	88 24       	eor	r8, r8
 5fe:	83 94       	inc	r8
 600:	91 2c       	mov	r9, r1
 602:	53 01       	movw	r10, r6
 604:	13 c0       	rjmp	.+38     	; 0x62c <__stack+0x12d>
 606:	28 01       	movw	r4, r16
 608:	f2 e0       	ldi	r31, 0x02	; 2
 60a:	4f 0e       	add	r4, r31
 60c:	51 1c       	adc	r5, r1
 60e:	f8 01       	movw	r30, r16
 610:	a0 80       	ld	r10, Z
 612:	b1 80       	ldd	r11, Z+1	; 0x01
 614:	36 fe       	sbrs	r3, 6
 616:	03 c0       	rjmp	.+6      	; 0x61e <__stack+0x11f>
 618:	69 2d       	mov	r22, r9
 61a:	70 e0       	ldi	r23, 0x00	; 0
 61c:	02 c0       	rjmp	.+4      	; 0x622 <__stack+0x123>
 61e:	6f ef       	ldi	r22, 0xFF	; 255
 620:	7f ef       	ldi	r23, 0xFF	; 255
 622:	c5 01       	movw	r24, r10
 624:	0e 94 9c 05 	call	0xb38	; 0xb38 <strnlen>
 628:	4c 01       	movw	r8, r24
 62a:	82 01       	movw	r16, r4
 62c:	f3 2d       	mov	r31, r3
 62e:	ff 77       	andi	r31, 0x7F	; 127
 630:	3f 2e       	mov	r3, r31
 632:	16 c0       	rjmp	.+44     	; 0x660 <__stack+0x161>
 634:	28 01       	movw	r4, r16
 636:	22 e0       	ldi	r18, 0x02	; 2
 638:	42 0e       	add	r4, r18
 63a:	51 1c       	adc	r5, r1
 63c:	f8 01       	movw	r30, r16
 63e:	a0 80       	ld	r10, Z
 640:	b1 80       	ldd	r11, Z+1	; 0x01
 642:	36 fe       	sbrs	r3, 6
 644:	03 c0       	rjmp	.+6      	; 0x64c <__stack+0x14d>
 646:	69 2d       	mov	r22, r9
 648:	70 e0       	ldi	r23, 0x00	; 0
 64a:	02 c0       	rjmp	.+4      	; 0x650 <__stack+0x151>
 64c:	6f ef       	ldi	r22, 0xFF	; 255
 64e:	7f ef       	ldi	r23, 0xFF	; 255
 650:	c5 01       	movw	r24, r10
 652:	0e 94 8a 05 	call	0xb14	; 0xb14 <strnlen_P>
 656:	4c 01       	movw	r8, r24
 658:	f3 2d       	mov	r31, r3
 65a:	f0 68       	ori	r31, 0x80	; 128
 65c:	3f 2e       	mov	r3, r31
 65e:	82 01       	movw	r16, r4
 660:	33 fc       	sbrc	r3, 3
 662:	1b c0       	rjmp	.+54     	; 0x69a <__stack+0x19b>
 664:	82 2d       	mov	r24, r2
 666:	90 e0       	ldi	r25, 0x00	; 0
 668:	88 16       	cp	r8, r24
 66a:	99 06       	cpc	r9, r25
 66c:	b0 f4       	brcc	.+44     	; 0x69a <__stack+0x19b>
 66e:	b6 01       	movw	r22, r12
 670:	80 e2       	ldi	r24, 0x20	; 32
 672:	90 e0       	ldi	r25, 0x00	; 0
 674:	0e 94 a7 05 	call	0xb4e	; 0xb4e <fputc>
 678:	2a 94       	dec	r2
 67a:	f4 cf       	rjmp	.-24     	; 0x664 <__stack+0x165>
 67c:	f5 01       	movw	r30, r10
 67e:	37 fc       	sbrc	r3, 7
 680:	85 91       	lpm	r24, Z+
 682:	37 fe       	sbrs	r3, 7
 684:	81 91       	ld	r24, Z+
 686:	5f 01       	movw	r10, r30
 688:	b6 01       	movw	r22, r12
 68a:	90 e0       	ldi	r25, 0x00	; 0
 68c:	0e 94 a7 05 	call	0xb4e	; 0xb4e <fputc>
 690:	21 10       	cpse	r2, r1
 692:	2a 94       	dec	r2
 694:	21 e0       	ldi	r18, 0x01	; 1
 696:	82 1a       	sub	r8, r18
 698:	91 08       	sbc	r9, r1
 69a:	81 14       	cp	r8, r1
 69c:	91 04       	cpc	r9, r1
 69e:	71 f7       	brne	.-36     	; 0x67c <__stack+0x17d>
 6a0:	e8 c0       	rjmp	.+464    	; 0x872 <__stack+0x373>
 6a2:	84 36       	cpi	r24, 0x64	; 100
 6a4:	11 f0       	breq	.+4      	; 0x6aa <__stack+0x1ab>
 6a6:	89 36       	cpi	r24, 0x69	; 105
 6a8:	41 f5       	brne	.+80     	; 0x6fa <__stack+0x1fb>
 6aa:	f8 01       	movw	r30, r16
 6ac:	37 fe       	sbrs	r3, 7
 6ae:	07 c0       	rjmp	.+14     	; 0x6be <__stack+0x1bf>
 6b0:	60 81       	ld	r22, Z
 6b2:	71 81       	ldd	r23, Z+1	; 0x01
 6b4:	82 81       	ldd	r24, Z+2	; 0x02
 6b6:	93 81       	ldd	r25, Z+3	; 0x03
 6b8:	0c 5f       	subi	r16, 0xFC	; 252
 6ba:	1f 4f       	sbci	r17, 0xFF	; 255
 6bc:	08 c0       	rjmp	.+16     	; 0x6ce <__stack+0x1cf>
 6be:	60 81       	ld	r22, Z
 6c0:	71 81       	ldd	r23, Z+1	; 0x01
 6c2:	07 2e       	mov	r0, r23
 6c4:	00 0c       	add	r0, r0
 6c6:	88 0b       	sbc	r24, r24
 6c8:	99 0b       	sbc	r25, r25
 6ca:	0e 5f       	subi	r16, 0xFE	; 254
 6cc:	1f 4f       	sbci	r17, 0xFF	; 255
 6ce:	f3 2d       	mov	r31, r3
 6d0:	ff 76       	andi	r31, 0x6F	; 111
 6d2:	3f 2e       	mov	r3, r31
 6d4:	97 ff       	sbrs	r25, 7
 6d6:	09 c0       	rjmp	.+18     	; 0x6ea <__stack+0x1eb>
 6d8:	90 95       	com	r25
 6da:	80 95       	com	r24
 6dc:	70 95       	com	r23
 6de:	61 95       	neg	r22
 6e0:	7f 4f       	sbci	r23, 0xFF	; 255
 6e2:	8f 4f       	sbci	r24, 0xFF	; 255
 6e4:	9f 4f       	sbci	r25, 0xFF	; 255
 6e6:	f0 68       	ori	r31, 0x80	; 128
 6e8:	3f 2e       	mov	r3, r31
 6ea:	2a e0       	ldi	r18, 0x0A	; 10
 6ec:	30 e0       	ldi	r19, 0x00	; 0
 6ee:	a3 01       	movw	r20, r6
 6f0:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <__ultoa_invert>
 6f4:	88 2e       	mov	r8, r24
 6f6:	86 18       	sub	r8, r6
 6f8:	45 c0       	rjmp	.+138    	; 0x784 <__stack+0x285>
 6fa:	85 37       	cpi	r24, 0x75	; 117
 6fc:	31 f4       	brne	.+12     	; 0x70a <__stack+0x20b>
 6fe:	23 2d       	mov	r18, r3
 700:	2f 7e       	andi	r18, 0xEF	; 239
 702:	b2 2e       	mov	r11, r18
 704:	2a e0       	ldi	r18, 0x0A	; 10
 706:	30 e0       	ldi	r19, 0x00	; 0
 708:	25 c0       	rjmp	.+74     	; 0x754 <__stack+0x255>
 70a:	93 2d       	mov	r25, r3
 70c:	99 7f       	andi	r25, 0xF9	; 249
 70e:	b9 2e       	mov	r11, r25
 710:	8f 36       	cpi	r24, 0x6F	; 111
 712:	c1 f0       	breq	.+48     	; 0x744 <__stack+0x245>
 714:	18 f4       	brcc	.+6      	; 0x71c <__stack+0x21d>
 716:	88 35       	cpi	r24, 0x58	; 88
 718:	79 f0       	breq	.+30     	; 0x738 <__stack+0x239>
 71a:	b5 c0       	rjmp	.+362    	; 0x886 <__stack+0x387>
 71c:	80 37       	cpi	r24, 0x70	; 112
 71e:	19 f0       	breq	.+6      	; 0x726 <__stack+0x227>
 720:	88 37       	cpi	r24, 0x78	; 120
 722:	21 f0       	breq	.+8      	; 0x72c <__stack+0x22d>
 724:	b0 c0       	rjmp	.+352    	; 0x886 <__stack+0x387>
 726:	e9 2f       	mov	r30, r25
 728:	e0 61       	ori	r30, 0x10	; 16
 72a:	be 2e       	mov	r11, r30
 72c:	b4 fe       	sbrs	r11, 4
 72e:	0d c0       	rjmp	.+26     	; 0x74a <__stack+0x24b>
 730:	fb 2d       	mov	r31, r11
 732:	f4 60       	ori	r31, 0x04	; 4
 734:	bf 2e       	mov	r11, r31
 736:	09 c0       	rjmp	.+18     	; 0x74a <__stack+0x24b>
 738:	34 fe       	sbrs	r3, 4
 73a:	0a c0       	rjmp	.+20     	; 0x750 <__stack+0x251>
 73c:	29 2f       	mov	r18, r25
 73e:	26 60       	ori	r18, 0x06	; 6
 740:	b2 2e       	mov	r11, r18
 742:	06 c0       	rjmp	.+12     	; 0x750 <__stack+0x251>
 744:	28 e0       	ldi	r18, 0x08	; 8
 746:	30 e0       	ldi	r19, 0x00	; 0
 748:	05 c0       	rjmp	.+10     	; 0x754 <__stack+0x255>
 74a:	20 e1       	ldi	r18, 0x10	; 16
 74c:	30 e0       	ldi	r19, 0x00	; 0
 74e:	02 c0       	rjmp	.+4      	; 0x754 <__stack+0x255>
 750:	20 e1       	ldi	r18, 0x10	; 16
 752:	32 e0       	ldi	r19, 0x02	; 2
 754:	f8 01       	movw	r30, r16
 756:	b7 fe       	sbrs	r11, 7
 758:	07 c0       	rjmp	.+14     	; 0x768 <__stack+0x269>
 75a:	60 81       	ld	r22, Z
 75c:	71 81       	ldd	r23, Z+1	; 0x01
 75e:	82 81       	ldd	r24, Z+2	; 0x02
 760:	93 81       	ldd	r25, Z+3	; 0x03
 762:	0c 5f       	subi	r16, 0xFC	; 252
 764:	1f 4f       	sbci	r17, 0xFF	; 255
 766:	06 c0       	rjmp	.+12     	; 0x774 <__stack+0x275>
 768:	60 81       	ld	r22, Z
 76a:	71 81       	ldd	r23, Z+1	; 0x01
 76c:	80 e0       	ldi	r24, 0x00	; 0
 76e:	90 e0       	ldi	r25, 0x00	; 0
 770:	0e 5f       	subi	r16, 0xFE	; 254
 772:	1f 4f       	sbci	r17, 0xFF	; 255
 774:	a3 01       	movw	r20, r6
 776:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <__ultoa_invert>
 77a:	88 2e       	mov	r8, r24
 77c:	86 18       	sub	r8, r6
 77e:	fb 2d       	mov	r31, r11
 780:	ff 77       	andi	r31, 0x7F	; 127
 782:	3f 2e       	mov	r3, r31
 784:	36 fe       	sbrs	r3, 6
 786:	0d c0       	rjmp	.+26     	; 0x7a2 <__stack+0x2a3>
 788:	23 2d       	mov	r18, r3
 78a:	2e 7f       	andi	r18, 0xFE	; 254
 78c:	a2 2e       	mov	r10, r18
 78e:	89 14       	cp	r8, r9
 790:	58 f4       	brcc	.+22     	; 0x7a8 <__stack+0x2a9>
 792:	34 fe       	sbrs	r3, 4
 794:	0b c0       	rjmp	.+22     	; 0x7ac <__stack+0x2ad>
 796:	32 fc       	sbrc	r3, 2
 798:	09 c0       	rjmp	.+18     	; 0x7ac <__stack+0x2ad>
 79a:	83 2d       	mov	r24, r3
 79c:	8e 7e       	andi	r24, 0xEE	; 238
 79e:	a8 2e       	mov	r10, r24
 7a0:	05 c0       	rjmp	.+10     	; 0x7ac <__stack+0x2ad>
 7a2:	b8 2c       	mov	r11, r8
 7a4:	a3 2c       	mov	r10, r3
 7a6:	03 c0       	rjmp	.+6      	; 0x7ae <__stack+0x2af>
 7a8:	b8 2c       	mov	r11, r8
 7aa:	01 c0       	rjmp	.+2      	; 0x7ae <__stack+0x2af>
 7ac:	b9 2c       	mov	r11, r9
 7ae:	a4 fe       	sbrs	r10, 4
 7b0:	0f c0       	rjmp	.+30     	; 0x7d0 <__stack+0x2d1>
 7b2:	fe 01       	movw	r30, r28
 7b4:	e8 0d       	add	r30, r8
 7b6:	f1 1d       	adc	r31, r1
 7b8:	80 81       	ld	r24, Z
 7ba:	80 33       	cpi	r24, 0x30	; 48
 7bc:	21 f4       	brne	.+8      	; 0x7c6 <__stack+0x2c7>
 7be:	9a 2d       	mov	r25, r10
 7c0:	99 7e       	andi	r25, 0xE9	; 233
 7c2:	a9 2e       	mov	r10, r25
 7c4:	09 c0       	rjmp	.+18     	; 0x7d8 <__stack+0x2d9>
 7c6:	a2 fe       	sbrs	r10, 2
 7c8:	06 c0       	rjmp	.+12     	; 0x7d6 <__stack+0x2d7>
 7ca:	b3 94       	inc	r11
 7cc:	b3 94       	inc	r11
 7ce:	04 c0       	rjmp	.+8      	; 0x7d8 <__stack+0x2d9>
 7d0:	8a 2d       	mov	r24, r10
 7d2:	86 78       	andi	r24, 0x86	; 134
 7d4:	09 f0       	breq	.+2      	; 0x7d8 <__stack+0x2d9>
 7d6:	b3 94       	inc	r11
 7d8:	a3 fc       	sbrc	r10, 3
 7da:	11 c0       	rjmp	.+34     	; 0x7fe <__stack+0x2ff>
 7dc:	a0 fe       	sbrs	r10, 0
 7de:	06 c0       	rjmp	.+12     	; 0x7ec <__stack+0x2ed>
 7e0:	b2 14       	cp	r11, r2
 7e2:	88 f4       	brcc	.+34     	; 0x806 <__stack+0x307>
 7e4:	28 0c       	add	r2, r8
 7e6:	92 2c       	mov	r9, r2
 7e8:	9b 18       	sub	r9, r11
 7ea:	0e c0       	rjmp	.+28     	; 0x808 <__stack+0x309>
 7ec:	b2 14       	cp	r11, r2
 7ee:	60 f4       	brcc	.+24     	; 0x808 <__stack+0x309>
 7f0:	b6 01       	movw	r22, r12
 7f2:	80 e2       	ldi	r24, 0x20	; 32
 7f4:	90 e0       	ldi	r25, 0x00	; 0
 7f6:	0e 94 a7 05 	call	0xb4e	; 0xb4e <fputc>
 7fa:	b3 94       	inc	r11
 7fc:	f7 cf       	rjmp	.-18     	; 0x7ec <__stack+0x2ed>
 7fe:	b2 14       	cp	r11, r2
 800:	18 f4       	brcc	.+6      	; 0x808 <__stack+0x309>
 802:	2b 18       	sub	r2, r11
 804:	02 c0       	rjmp	.+4      	; 0x80a <__stack+0x30b>
 806:	98 2c       	mov	r9, r8
 808:	21 2c       	mov	r2, r1
 80a:	a4 fe       	sbrs	r10, 4
 80c:	10 c0       	rjmp	.+32     	; 0x82e <__stack+0x32f>
 80e:	b6 01       	movw	r22, r12
 810:	80 e3       	ldi	r24, 0x30	; 48
 812:	90 e0       	ldi	r25, 0x00	; 0
 814:	0e 94 a7 05 	call	0xb4e	; 0xb4e <fputc>
 818:	a2 fe       	sbrs	r10, 2
 81a:	17 c0       	rjmp	.+46     	; 0x84a <__stack+0x34b>
 81c:	a1 fc       	sbrc	r10, 1
 81e:	03 c0       	rjmp	.+6      	; 0x826 <__stack+0x327>
 820:	88 e7       	ldi	r24, 0x78	; 120
 822:	90 e0       	ldi	r25, 0x00	; 0
 824:	02 c0       	rjmp	.+4      	; 0x82a <__stack+0x32b>
 826:	88 e5       	ldi	r24, 0x58	; 88
 828:	90 e0       	ldi	r25, 0x00	; 0
 82a:	b6 01       	movw	r22, r12
 82c:	0c c0       	rjmp	.+24     	; 0x846 <__stack+0x347>
 82e:	8a 2d       	mov	r24, r10
 830:	86 78       	andi	r24, 0x86	; 134
 832:	59 f0       	breq	.+22     	; 0x84a <__stack+0x34b>
 834:	a1 fe       	sbrs	r10, 1
 836:	02 c0       	rjmp	.+4      	; 0x83c <__stack+0x33d>
 838:	8b e2       	ldi	r24, 0x2B	; 43
 83a:	01 c0       	rjmp	.+2      	; 0x83e <__stack+0x33f>
 83c:	80 e2       	ldi	r24, 0x20	; 32
 83e:	a7 fc       	sbrc	r10, 7
 840:	8d e2       	ldi	r24, 0x2D	; 45
 842:	b6 01       	movw	r22, r12
 844:	90 e0       	ldi	r25, 0x00	; 0
 846:	0e 94 a7 05 	call	0xb4e	; 0xb4e <fputc>
 84a:	89 14       	cp	r8, r9
 84c:	38 f4       	brcc	.+14     	; 0x85c <__stack+0x35d>
 84e:	b6 01       	movw	r22, r12
 850:	80 e3       	ldi	r24, 0x30	; 48
 852:	90 e0       	ldi	r25, 0x00	; 0
 854:	0e 94 a7 05 	call	0xb4e	; 0xb4e <fputc>
 858:	9a 94       	dec	r9
 85a:	f7 cf       	rjmp	.-18     	; 0x84a <__stack+0x34b>
 85c:	8a 94       	dec	r8
 85e:	f3 01       	movw	r30, r6
 860:	e8 0d       	add	r30, r8
 862:	f1 1d       	adc	r31, r1
 864:	80 81       	ld	r24, Z
 866:	b6 01       	movw	r22, r12
 868:	90 e0       	ldi	r25, 0x00	; 0
 86a:	0e 94 a7 05 	call	0xb4e	; 0xb4e <fputc>
 86e:	81 10       	cpse	r8, r1
 870:	f5 cf       	rjmp	.-22     	; 0x85c <__stack+0x35d>
 872:	22 20       	and	r2, r2
 874:	09 f4       	brne	.+2      	; 0x878 <__stack+0x379>
 876:	42 ce       	rjmp	.-892    	; 0x4fc <vfprintf+0x24>
 878:	b6 01       	movw	r22, r12
 87a:	80 e2       	ldi	r24, 0x20	; 32
 87c:	90 e0       	ldi	r25, 0x00	; 0
 87e:	0e 94 a7 05 	call	0xb4e	; 0xb4e <fputc>
 882:	2a 94       	dec	r2
 884:	f6 cf       	rjmp	.-20     	; 0x872 <__stack+0x373>
 886:	f6 01       	movw	r30, r12
 888:	86 81       	ldd	r24, Z+6	; 0x06
 88a:	97 81       	ldd	r25, Z+7	; 0x07
 88c:	02 c0       	rjmp	.+4      	; 0x892 <__stack+0x393>
 88e:	8f ef       	ldi	r24, 0xFF	; 255
 890:	9f ef       	ldi	r25, 0xFF	; 255
 892:	2b 96       	adiw	r28, 0x0b	; 11
 894:	e2 e1       	ldi	r30, 0x12	; 18
 896:	0c 94 5d 06 	jmp	0xcba	; 0xcba <__epilogue_restores__>

0000089a <calloc>:
 89a:	0f 93       	push	r16
 89c:	1f 93       	push	r17
 89e:	cf 93       	push	r28
 8a0:	df 93       	push	r29
 8a2:	86 9f       	mul	r24, r22
 8a4:	80 01       	movw	r16, r0
 8a6:	87 9f       	mul	r24, r23
 8a8:	10 0d       	add	r17, r0
 8aa:	96 9f       	mul	r25, r22
 8ac:	10 0d       	add	r17, r0
 8ae:	11 24       	eor	r1, r1
 8b0:	c8 01       	movw	r24, r16
 8b2:	0e 94 69 04 	call	0x8d2	; 0x8d2 <malloc>
 8b6:	ec 01       	movw	r28, r24
 8b8:	00 97       	sbiw	r24, 0x00	; 0
 8ba:	29 f0       	breq	.+10     	; 0x8c6 <calloc+0x2c>
 8bc:	a8 01       	movw	r20, r16
 8be:	60 e0       	ldi	r22, 0x00	; 0
 8c0:	70 e0       	ldi	r23, 0x00	; 0
 8c2:	0e 94 95 05 	call	0xb2a	; 0xb2a <memset>
 8c6:	ce 01       	movw	r24, r28
 8c8:	df 91       	pop	r29
 8ca:	cf 91       	pop	r28
 8cc:	1f 91       	pop	r17
 8ce:	0f 91       	pop	r16
 8d0:	08 95       	ret

000008d2 <malloc>:
 8d2:	0f 93       	push	r16
 8d4:	1f 93       	push	r17
 8d6:	cf 93       	push	r28
 8d8:	df 93       	push	r29
 8da:	82 30       	cpi	r24, 0x02	; 2
 8dc:	91 05       	cpc	r25, r1
 8de:	10 f4       	brcc	.+4      	; 0x8e4 <malloc+0x12>
 8e0:	82 e0       	ldi	r24, 0x02	; 2
 8e2:	90 e0       	ldi	r25, 0x00	; 0
 8e4:	e0 91 31 02 	lds	r30, 0x0231	; 0x800231 <__flp>
 8e8:	f0 91 32 02 	lds	r31, 0x0232	; 0x800232 <__flp+0x1>
 8ec:	20 e0       	ldi	r18, 0x00	; 0
 8ee:	30 e0       	ldi	r19, 0x00	; 0
 8f0:	a0 e0       	ldi	r26, 0x00	; 0
 8f2:	b0 e0       	ldi	r27, 0x00	; 0
 8f4:	30 97       	sbiw	r30, 0x00	; 0
 8f6:	19 f1       	breq	.+70     	; 0x93e <malloc+0x6c>
 8f8:	40 81       	ld	r20, Z
 8fa:	51 81       	ldd	r21, Z+1	; 0x01
 8fc:	02 81       	ldd	r16, Z+2	; 0x02
 8fe:	13 81       	ldd	r17, Z+3	; 0x03
 900:	48 17       	cp	r20, r24
 902:	59 07       	cpc	r21, r25
 904:	c8 f0       	brcs	.+50     	; 0x938 <malloc+0x66>
 906:	84 17       	cp	r24, r20
 908:	95 07       	cpc	r25, r21
 90a:	69 f4       	brne	.+26     	; 0x926 <malloc+0x54>
 90c:	10 97       	sbiw	r26, 0x00	; 0
 90e:	31 f0       	breq	.+12     	; 0x91c <malloc+0x4a>
 910:	12 96       	adiw	r26, 0x02	; 2
 912:	0c 93       	st	X, r16
 914:	12 97       	sbiw	r26, 0x02	; 2
 916:	13 96       	adiw	r26, 0x03	; 3
 918:	1c 93       	st	X, r17
 91a:	27 c0       	rjmp	.+78     	; 0x96a <malloc+0x98>
 91c:	00 93 31 02 	sts	0x0231, r16	; 0x800231 <__flp>
 920:	10 93 32 02 	sts	0x0232, r17	; 0x800232 <__flp+0x1>
 924:	22 c0       	rjmp	.+68     	; 0x96a <malloc+0x98>
 926:	21 15       	cp	r18, r1
 928:	31 05       	cpc	r19, r1
 92a:	19 f0       	breq	.+6      	; 0x932 <malloc+0x60>
 92c:	42 17       	cp	r20, r18
 92e:	53 07       	cpc	r21, r19
 930:	18 f4       	brcc	.+6      	; 0x938 <malloc+0x66>
 932:	9a 01       	movw	r18, r20
 934:	bd 01       	movw	r22, r26
 936:	ef 01       	movw	r28, r30
 938:	df 01       	movw	r26, r30
 93a:	f8 01       	movw	r30, r16
 93c:	db cf       	rjmp	.-74     	; 0x8f4 <malloc+0x22>
 93e:	21 15       	cp	r18, r1
 940:	31 05       	cpc	r19, r1
 942:	f9 f0       	breq	.+62     	; 0x982 <malloc+0xb0>
 944:	28 1b       	sub	r18, r24
 946:	39 0b       	sbc	r19, r25
 948:	24 30       	cpi	r18, 0x04	; 4
 94a:	31 05       	cpc	r19, r1
 94c:	80 f4       	brcc	.+32     	; 0x96e <malloc+0x9c>
 94e:	8a 81       	ldd	r24, Y+2	; 0x02
 950:	9b 81       	ldd	r25, Y+3	; 0x03
 952:	61 15       	cp	r22, r1
 954:	71 05       	cpc	r23, r1
 956:	21 f0       	breq	.+8      	; 0x960 <malloc+0x8e>
 958:	fb 01       	movw	r30, r22
 95a:	93 83       	std	Z+3, r25	; 0x03
 95c:	82 83       	std	Z+2, r24	; 0x02
 95e:	04 c0       	rjmp	.+8      	; 0x968 <malloc+0x96>
 960:	90 93 32 02 	sts	0x0232, r25	; 0x800232 <__flp+0x1>
 964:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <__flp>
 968:	fe 01       	movw	r30, r28
 96a:	32 96       	adiw	r30, 0x02	; 2
 96c:	44 c0       	rjmp	.+136    	; 0x9f6 <malloc+0x124>
 96e:	fe 01       	movw	r30, r28
 970:	e2 0f       	add	r30, r18
 972:	f3 1f       	adc	r31, r19
 974:	81 93       	st	Z+, r24
 976:	91 93       	st	Z+, r25
 978:	22 50       	subi	r18, 0x02	; 2
 97a:	31 09       	sbc	r19, r1
 97c:	39 83       	std	Y+1, r19	; 0x01
 97e:	28 83       	st	Y, r18
 980:	3a c0       	rjmp	.+116    	; 0x9f6 <malloc+0x124>
 982:	20 91 2f 02 	lds	r18, 0x022F	; 0x80022f <__brkval>
 986:	30 91 30 02 	lds	r19, 0x0230	; 0x800230 <__brkval+0x1>
 98a:	23 2b       	or	r18, r19
 98c:	41 f4       	brne	.+16     	; 0x99e <malloc+0xcc>
 98e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 992:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 996:	30 93 30 02 	sts	0x0230, r19	; 0x800230 <__brkval+0x1>
 99a:	20 93 2f 02 	sts	0x022F, r18	; 0x80022f <__brkval>
 99e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 9a2:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 9a6:	21 15       	cp	r18, r1
 9a8:	31 05       	cpc	r19, r1
 9aa:	41 f4       	brne	.+16     	; 0x9bc <malloc+0xea>
 9ac:	2d b7       	in	r18, 0x3d	; 61
 9ae:	3e b7       	in	r19, 0x3e	; 62
 9b0:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 9b4:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 9b8:	24 1b       	sub	r18, r20
 9ba:	35 0b       	sbc	r19, r21
 9bc:	e0 91 2f 02 	lds	r30, 0x022F	; 0x80022f <__brkval>
 9c0:	f0 91 30 02 	lds	r31, 0x0230	; 0x800230 <__brkval+0x1>
 9c4:	e2 17       	cp	r30, r18
 9c6:	f3 07       	cpc	r31, r19
 9c8:	a0 f4       	brcc	.+40     	; 0x9f2 <malloc+0x120>
 9ca:	2e 1b       	sub	r18, r30
 9cc:	3f 0b       	sbc	r19, r31
 9ce:	28 17       	cp	r18, r24
 9d0:	39 07       	cpc	r19, r25
 9d2:	78 f0       	brcs	.+30     	; 0x9f2 <malloc+0x120>
 9d4:	ac 01       	movw	r20, r24
 9d6:	4e 5f       	subi	r20, 0xFE	; 254
 9d8:	5f 4f       	sbci	r21, 0xFF	; 255
 9da:	24 17       	cp	r18, r20
 9dc:	35 07       	cpc	r19, r21
 9de:	48 f0       	brcs	.+18     	; 0x9f2 <malloc+0x120>
 9e0:	4e 0f       	add	r20, r30
 9e2:	5f 1f       	adc	r21, r31
 9e4:	50 93 30 02 	sts	0x0230, r21	; 0x800230 <__brkval+0x1>
 9e8:	40 93 2f 02 	sts	0x022F, r20	; 0x80022f <__brkval>
 9ec:	81 93       	st	Z+, r24
 9ee:	91 93       	st	Z+, r25
 9f0:	02 c0       	rjmp	.+4      	; 0x9f6 <malloc+0x124>
 9f2:	e0 e0       	ldi	r30, 0x00	; 0
 9f4:	f0 e0       	ldi	r31, 0x00	; 0
 9f6:	cf 01       	movw	r24, r30
 9f8:	df 91       	pop	r29
 9fa:	cf 91       	pop	r28
 9fc:	1f 91       	pop	r17
 9fe:	0f 91       	pop	r16
 a00:	08 95       	ret

00000a02 <free>:
 a02:	cf 93       	push	r28
 a04:	df 93       	push	r29
 a06:	00 97       	sbiw	r24, 0x00	; 0
 a08:	09 f4       	brne	.+2      	; 0xa0c <free+0xa>
 a0a:	81 c0       	rjmp	.+258    	; 0xb0e <free+0x10c>
 a0c:	fc 01       	movw	r30, r24
 a0e:	32 97       	sbiw	r30, 0x02	; 2
 a10:	13 82       	std	Z+3, r1	; 0x03
 a12:	12 82       	std	Z+2, r1	; 0x02
 a14:	a0 91 31 02 	lds	r26, 0x0231	; 0x800231 <__flp>
 a18:	b0 91 32 02 	lds	r27, 0x0232	; 0x800232 <__flp+0x1>
 a1c:	10 97       	sbiw	r26, 0x00	; 0
 a1e:	81 f4       	brne	.+32     	; 0xa40 <free+0x3e>
 a20:	20 81       	ld	r18, Z
 a22:	31 81       	ldd	r19, Z+1	; 0x01
 a24:	82 0f       	add	r24, r18
 a26:	93 1f       	adc	r25, r19
 a28:	20 91 2f 02 	lds	r18, 0x022F	; 0x80022f <__brkval>
 a2c:	30 91 30 02 	lds	r19, 0x0230	; 0x800230 <__brkval+0x1>
 a30:	28 17       	cp	r18, r24
 a32:	39 07       	cpc	r19, r25
 a34:	51 f5       	brne	.+84     	; 0xa8a <free+0x88>
 a36:	f0 93 30 02 	sts	0x0230, r31	; 0x800230 <__brkval+0x1>
 a3a:	e0 93 2f 02 	sts	0x022F, r30	; 0x80022f <__brkval>
 a3e:	67 c0       	rjmp	.+206    	; 0xb0e <free+0x10c>
 a40:	ed 01       	movw	r28, r26
 a42:	20 e0       	ldi	r18, 0x00	; 0
 a44:	30 e0       	ldi	r19, 0x00	; 0
 a46:	ce 17       	cp	r28, r30
 a48:	df 07       	cpc	r29, r31
 a4a:	40 f4       	brcc	.+16     	; 0xa5c <free+0x5a>
 a4c:	4a 81       	ldd	r20, Y+2	; 0x02
 a4e:	5b 81       	ldd	r21, Y+3	; 0x03
 a50:	9e 01       	movw	r18, r28
 a52:	41 15       	cp	r20, r1
 a54:	51 05       	cpc	r21, r1
 a56:	f1 f0       	breq	.+60     	; 0xa94 <free+0x92>
 a58:	ea 01       	movw	r28, r20
 a5a:	f5 cf       	rjmp	.-22     	; 0xa46 <free+0x44>
 a5c:	d3 83       	std	Z+3, r29	; 0x03
 a5e:	c2 83       	std	Z+2, r28	; 0x02
 a60:	40 81       	ld	r20, Z
 a62:	51 81       	ldd	r21, Z+1	; 0x01
 a64:	84 0f       	add	r24, r20
 a66:	95 1f       	adc	r25, r21
 a68:	c8 17       	cp	r28, r24
 a6a:	d9 07       	cpc	r29, r25
 a6c:	59 f4       	brne	.+22     	; 0xa84 <free+0x82>
 a6e:	88 81       	ld	r24, Y
 a70:	99 81       	ldd	r25, Y+1	; 0x01
 a72:	84 0f       	add	r24, r20
 a74:	95 1f       	adc	r25, r21
 a76:	02 96       	adiw	r24, 0x02	; 2
 a78:	91 83       	std	Z+1, r25	; 0x01
 a7a:	80 83       	st	Z, r24
 a7c:	8a 81       	ldd	r24, Y+2	; 0x02
 a7e:	9b 81       	ldd	r25, Y+3	; 0x03
 a80:	93 83       	std	Z+3, r25	; 0x03
 a82:	82 83       	std	Z+2, r24	; 0x02
 a84:	21 15       	cp	r18, r1
 a86:	31 05       	cpc	r19, r1
 a88:	29 f4       	brne	.+10     	; 0xa94 <free+0x92>
 a8a:	f0 93 32 02 	sts	0x0232, r31	; 0x800232 <__flp+0x1>
 a8e:	e0 93 31 02 	sts	0x0231, r30	; 0x800231 <__flp>
 a92:	3d c0       	rjmp	.+122    	; 0xb0e <free+0x10c>
 a94:	e9 01       	movw	r28, r18
 a96:	fb 83       	std	Y+3, r31	; 0x03
 a98:	ea 83       	std	Y+2, r30	; 0x02
 a9a:	49 91       	ld	r20, Y+
 a9c:	59 91       	ld	r21, Y+
 a9e:	c4 0f       	add	r28, r20
 aa0:	d5 1f       	adc	r29, r21
 aa2:	ec 17       	cp	r30, r28
 aa4:	fd 07       	cpc	r31, r29
 aa6:	61 f4       	brne	.+24     	; 0xac0 <free+0xbe>
 aa8:	80 81       	ld	r24, Z
 aaa:	91 81       	ldd	r25, Z+1	; 0x01
 aac:	84 0f       	add	r24, r20
 aae:	95 1f       	adc	r25, r21
 ab0:	02 96       	adiw	r24, 0x02	; 2
 ab2:	e9 01       	movw	r28, r18
 ab4:	99 83       	std	Y+1, r25	; 0x01
 ab6:	88 83       	st	Y, r24
 ab8:	82 81       	ldd	r24, Z+2	; 0x02
 aba:	93 81       	ldd	r25, Z+3	; 0x03
 abc:	9b 83       	std	Y+3, r25	; 0x03
 abe:	8a 83       	std	Y+2, r24	; 0x02
 ac0:	e0 e0       	ldi	r30, 0x00	; 0
 ac2:	f0 e0       	ldi	r31, 0x00	; 0
 ac4:	12 96       	adiw	r26, 0x02	; 2
 ac6:	8d 91       	ld	r24, X+
 ac8:	9c 91       	ld	r25, X
 aca:	13 97       	sbiw	r26, 0x03	; 3
 acc:	00 97       	sbiw	r24, 0x00	; 0
 ace:	19 f0       	breq	.+6      	; 0xad6 <free+0xd4>
 ad0:	fd 01       	movw	r30, r26
 ad2:	dc 01       	movw	r26, r24
 ad4:	f7 cf       	rjmp	.-18     	; 0xac4 <free+0xc2>
 ad6:	8d 91       	ld	r24, X+
 ad8:	9c 91       	ld	r25, X
 ada:	11 97       	sbiw	r26, 0x01	; 1
 adc:	9d 01       	movw	r18, r26
 ade:	2e 5f       	subi	r18, 0xFE	; 254
 ae0:	3f 4f       	sbci	r19, 0xFF	; 255
 ae2:	82 0f       	add	r24, r18
 ae4:	93 1f       	adc	r25, r19
 ae6:	20 91 2f 02 	lds	r18, 0x022F	; 0x80022f <__brkval>
 aea:	30 91 30 02 	lds	r19, 0x0230	; 0x800230 <__brkval+0x1>
 aee:	28 17       	cp	r18, r24
 af0:	39 07       	cpc	r19, r25
 af2:	69 f4       	brne	.+26     	; 0xb0e <free+0x10c>
 af4:	30 97       	sbiw	r30, 0x00	; 0
 af6:	29 f4       	brne	.+10     	; 0xb02 <free+0x100>
 af8:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <__flp+0x1>
 afc:	10 92 31 02 	sts	0x0231, r1	; 0x800231 <__flp>
 b00:	02 c0       	rjmp	.+4      	; 0xb06 <free+0x104>
 b02:	13 82       	std	Z+3, r1	; 0x03
 b04:	12 82       	std	Z+2, r1	; 0x02
 b06:	b0 93 30 02 	sts	0x0230, r27	; 0x800230 <__brkval+0x1>
 b0a:	a0 93 2f 02 	sts	0x022F, r26	; 0x80022f <__brkval>
 b0e:	df 91       	pop	r29
 b10:	cf 91       	pop	r28
 b12:	08 95       	ret

00000b14 <strnlen_P>:
 b14:	fc 01       	movw	r30, r24
 b16:	05 90       	lpm	r0, Z+
 b18:	61 50       	subi	r22, 0x01	; 1
 b1a:	70 40       	sbci	r23, 0x00	; 0
 b1c:	01 10       	cpse	r0, r1
 b1e:	d8 f7       	brcc	.-10     	; 0xb16 <strnlen_P+0x2>
 b20:	80 95       	com	r24
 b22:	90 95       	com	r25
 b24:	8e 0f       	add	r24, r30
 b26:	9f 1f       	adc	r25, r31
 b28:	08 95       	ret

00000b2a <memset>:
 b2a:	dc 01       	movw	r26, r24
 b2c:	01 c0       	rjmp	.+2      	; 0xb30 <memset+0x6>
 b2e:	6d 93       	st	X+, r22
 b30:	41 50       	subi	r20, 0x01	; 1
 b32:	50 40       	sbci	r21, 0x00	; 0
 b34:	e0 f7       	brcc	.-8      	; 0xb2e <memset+0x4>
 b36:	08 95       	ret

00000b38 <strnlen>:
 b38:	fc 01       	movw	r30, r24
 b3a:	61 50       	subi	r22, 0x01	; 1
 b3c:	70 40       	sbci	r23, 0x00	; 0
 b3e:	01 90       	ld	r0, Z+
 b40:	01 10       	cpse	r0, r1
 b42:	d8 f7       	brcc	.-10     	; 0xb3a <strnlen+0x2>
 b44:	80 95       	com	r24
 b46:	90 95       	com	r25
 b48:	8e 0f       	add	r24, r30
 b4a:	9f 1f       	adc	r25, r31
 b4c:	08 95       	ret

00000b4e <fputc>:
 b4e:	0f 93       	push	r16
 b50:	1f 93       	push	r17
 b52:	cf 93       	push	r28
 b54:	df 93       	push	r29
 b56:	fb 01       	movw	r30, r22
 b58:	23 81       	ldd	r18, Z+3	; 0x03
 b5a:	21 fd       	sbrc	r18, 1
 b5c:	03 c0       	rjmp	.+6      	; 0xb64 <fputc+0x16>
 b5e:	8f ef       	ldi	r24, 0xFF	; 255
 b60:	9f ef       	ldi	r25, 0xFF	; 255
 b62:	2c c0       	rjmp	.+88     	; 0xbbc <fputc+0x6e>
 b64:	22 ff       	sbrs	r18, 2
 b66:	16 c0       	rjmp	.+44     	; 0xb94 <fputc+0x46>
 b68:	46 81       	ldd	r20, Z+6	; 0x06
 b6a:	57 81       	ldd	r21, Z+7	; 0x07
 b6c:	24 81       	ldd	r18, Z+4	; 0x04
 b6e:	35 81       	ldd	r19, Z+5	; 0x05
 b70:	42 17       	cp	r20, r18
 b72:	53 07       	cpc	r21, r19
 b74:	44 f4       	brge	.+16     	; 0xb86 <fputc+0x38>
 b76:	a0 81       	ld	r26, Z
 b78:	b1 81       	ldd	r27, Z+1	; 0x01
 b7a:	9d 01       	movw	r18, r26
 b7c:	2f 5f       	subi	r18, 0xFF	; 255
 b7e:	3f 4f       	sbci	r19, 0xFF	; 255
 b80:	31 83       	std	Z+1, r19	; 0x01
 b82:	20 83       	st	Z, r18
 b84:	8c 93       	st	X, r24
 b86:	26 81       	ldd	r18, Z+6	; 0x06
 b88:	37 81       	ldd	r19, Z+7	; 0x07
 b8a:	2f 5f       	subi	r18, 0xFF	; 255
 b8c:	3f 4f       	sbci	r19, 0xFF	; 255
 b8e:	37 83       	std	Z+7, r19	; 0x07
 b90:	26 83       	std	Z+6, r18	; 0x06
 b92:	14 c0       	rjmp	.+40     	; 0xbbc <fputc+0x6e>
 b94:	8b 01       	movw	r16, r22
 b96:	ec 01       	movw	r28, r24
 b98:	fb 01       	movw	r30, r22
 b9a:	00 84       	ldd	r0, Z+8	; 0x08
 b9c:	f1 85       	ldd	r31, Z+9	; 0x09
 b9e:	e0 2d       	mov	r30, r0
 ba0:	09 95       	icall
 ba2:	89 2b       	or	r24, r25
 ba4:	e1 f6       	brne	.-72     	; 0xb5e <fputc+0x10>
 ba6:	d8 01       	movw	r26, r16
 ba8:	16 96       	adiw	r26, 0x06	; 6
 baa:	8d 91       	ld	r24, X+
 bac:	9c 91       	ld	r25, X
 bae:	17 97       	sbiw	r26, 0x07	; 7
 bb0:	01 96       	adiw	r24, 0x01	; 1
 bb2:	17 96       	adiw	r26, 0x07	; 7
 bb4:	9c 93       	st	X, r25
 bb6:	8e 93       	st	-X, r24
 bb8:	16 97       	sbiw	r26, 0x06	; 6
 bba:	ce 01       	movw	r24, r28
 bbc:	df 91       	pop	r29
 bbe:	cf 91       	pop	r28
 bc0:	1f 91       	pop	r17
 bc2:	0f 91       	pop	r16
 bc4:	08 95       	ret

00000bc6 <__ultoa_invert>:
 bc6:	fa 01       	movw	r30, r20
 bc8:	aa 27       	eor	r26, r26
 bca:	28 30       	cpi	r18, 0x08	; 8
 bcc:	51 f1       	breq	.+84     	; 0xc22 <__ultoa_invert+0x5c>
 bce:	20 31       	cpi	r18, 0x10	; 16
 bd0:	81 f1       	breq	.+96     	; 0xc32 <__ultoa_invert+0x6c>
 bd2:	e8 94       	clt
 bd4:	6f 93       	push	r22
 bd6:	6e 7f       	andi	r22, 0xFE	; 254
 bd8:	6e 5f       	subi	r22, 0xFE	; 254
 bda:	7f 4f       	sbci	r23, 0xFF	; 255
 bdc:	8f 4f       	sbci	r24, 0xFF	; 255
 bde:	9f 4f       	sbci	r25, 0xFF	; 255
 be0:	af 4f       	sbci	r26, 0xFF	; 255
 be2:	b1 e0       	ldi	r27, 0x01	; 1
 be4:	3e d0       	rcall	.+124    	; 0xc62 <__ultoa_invert+0x9c>
 be6:	b4 e0       	ldi	r27, 0x04	; 4
 be8:	3c d0       	rcall	.+120    	; 0xc62 <__ultoa_invert+0x9c>
 bea:	67 0f       	add	r22, r23
 bec:	78 1f       	adc	r23, r24
 bee:	89 1f       	adc	r24, r25
 bf0:	9a 1f       	adc	r25, r26
 bf2:	a1 1d       	adc	r26, r1
 bf4:	68 0f       	add	r22, r24
 bf6:	79 1f       	adc	r23, r25
 bf8:	8a 1f       	adc	r24, r26
 bfa:	91 1d       	adc	r25, r1
 bfc:	a1 1d       	adc	r26, r1
 bfe:	6a 0f       	add	r22, r26
 c00:	71 1d       	adc	r23, r1
 c02:	81 1d       	adc	r24, r1
 c04:	91 1d       	adc	r25, r1
 c06:	a1 1d       	adc	r26, r1
 c08:	20 d0       	rcall	.+64     	; 0xc4a <__ultoa_invert+0x84>
 c0a:	09 f4       	brne	.+2      	; 0xc0e <__ultoa_invert+0x48>
 c0c:	68 94       	set
 c0e:	3f 91       	pop	r19
 c10:	2a e0       	ldi	r18, 0x0A	; 10
 c12:	26 9f       	mul	r18, r22
 c14:	11 24       	eor	r1, r1
 c16:	30 19       	sub	r19, r0
 c18:	30 5d       	subi	r19, 0xD0	; 208
 c1a:	31 93       	st	Z+, r19
 c1c:	de f6       	brtc	.-74     	; 0xbd4 <__ultoa_invert+0xe>
 c1e:	cf 01       	movw	r24, r30
 c20:	08 95       	ret
 c22:	46 2f       	mov	r20, r22
 c24:	47 70       	andi	r20, 0x07	; 7
 c26:	40 5d       	subi	r20, 0xD0	; 208
 c28:	41 93       	st	Z+, r20
 c2a:	b3 e0       	ldi	r27, 0x03	; 3
 c2c:	0f d0       	rcall	.+30     	; 0xc4c <__ultoa_invert+0x86>
 c2e:	c9 f7       	brne	.-14     	; 0xc22 <__ultoa_invert+0x5c>
 c30:	f6 cf       	rjmp	.-20     	; 0xc1e <__ultoa_invert+0x58>
 c32:	46 2f       	mov	r20, r22
 c34:	4f 70       	andi	r20, 0x0F	; 15
 c36:	40 5d       	subi	r20, 0xD0	; 208
 c38:	4a 33       	cpi	r20, 0x3A	; 58
 c3a:	18 f0       	brcs	.+6      	; 0xc42 <__ultoa_invert+0x7c>
 c3c:	49 5d       	subi	r20, 0xD9	; 217
 c3e:	31 fd       	sbrc	r19, 1
 c40:	40 52       	subi	r20, 0x20	; 32
 c42:	41 93       	st	Z+, r20
 c44:	02 d0       	rcall	.+4      	; 0xc4a <__ultoa_invert+0x84>
 c46:	a9 f7       	brne	.-22     	; 0xc32 <__ultoa_invert+0x6c>
 c48:	ea cf       	rjmp	.-44     	; 0xc1e <__ultoa_invert+0x58>
 c4a:	b4 e0       	ldi	r27, 0x04	; 4
 c4c:	a6 95       	lsr	r26
 c4e:	97 95       	ror	r25
 c50:	87 95       	ror	r24
 c52:	77 95       	ror	r23
 c54:	67 95       	ror	r22
 c56:	ba 95       	dec	r27
 c58:	c9 f7       	brne	.-14     	; 0xc4c <__ultoa_invert+0x86>
 c5a:	00 97       	sbiw	r24, 0x00	; 0
 c5c:	61 05       	cpc	r22, r1
 c5e:	71 05       	cpc	r23, r1
 c60:	08 95       	ret
 c62:	9b 01       	movw	r18, r22
 c64:	ac 01       	movw	r20, r24
 c66:	0a 2e       	mov	r0, r26
 c68:	06 94       	lsr	r0
 c6a:	57 95       	ror	r21
 c6c:	47 95       	ror	r20
 c6e:	37 95       	ror	r19
 c70:	27 95       	ror	r18
 c72:	ba 95       	dec	r27
 c74:	c9 f7       	brne	.-14     	; 0xc68 <__ultoa_invert+0xa2>
 c76:	62 0f       	add	r22, r18
 c78:	73 1f       	adc	r23, r19
 c7a:	84 1f       	adc	r24, r20
 c7c:	95 1f       	adc	r25, r21
 c7e:	a0 1d       	adc	r26, r0
 c80:	08 95       	ret

00000c82 <__prologue_saves__>:
 c82:	2f 92       	push	r2
 c84:	3f 92       	push	r3
 c86:	4f 92       	push	r4
 c88:	5f 92       	push	r5
 c8a:	6f 92       	push	r6
 c8c:	7f 92       	push	r7
 c8e:	8f 92       	push	r8
 c90:	9f 92       	push	r9
 c92:	af 92       	push	r10
 c94:	bf 92       	push	r11
 c96:	cf 92       	push	r12
 c98:	df 92       	push	r13
 c9a:	ef 92       	push	r14
 c9c:	ff 92       	push	r15
 c9e:	0f 93       	push	r16
 ca0:	1f 93       	push	r17
 ca2:	cf 93       	push	r28
 ca4:	df 93       	push	r29
 ca6:	cd b7       	in	r28, 0x3d	; 61
 ca8:	de b7       	in	r29, 0x3e	; 62
 caa:	ca 1b       	sub	r28, r26
 cac:	db 0b       	sbc	r29, r27
 cae:	0f b6       	in	r0, 0x3f	; 63
 cb0:	f8 94       	cli
 cb2:	de bf       	out	0x3e, r29	; 62
 cb4:	0f be       	out	0x3f, r0	; 63
 cb6:	cd bf       	out	0x3d, r28	; 61
 cb8:	09 94       	ijmp

00000cba <__epilogue_restores__>:
 cba:	2a 88       	ldd	r2, Y+18	; 0x12
 cbc:	39 88       	ldd	r3, Y+17	; 0x11
 cbe:	48 88       	ldd	r4, Y+16	; 0x10
 cc0:	5f 84       	ldd	r5, Y+15	; 0x0f
 cc2:	6e 84       	ldd	r6, Y+14	; 0x0e
 cc4:	7d 84       	ldd	r7, Y+13	; 0x0d
 cc6:	8c 84       	ldd	r8, Y+12	; 0x0c
 cc8:	9b 84       	ldd	r9, Y+11	; 0x0b
 cca:	aa 84       	ldd	r10, Y+10	; 0x0a
 ccc:	b9 84       	ldd	r11, Y+9	; 0x09
 cce:	c8 84       	ldd	r12, Y+8	; 0x08
 cd0:	df 80       	ldd	r13, Y+7	; 0x07
 cd2:	ee 80       	ldd	r14, Y+6	; 0x06
 cd4:	fd 80       	ldd	r15, Y+5	; 0x05
 cd6:	0c 81       	ldd	r16, Y+4	; 0x04
 cd8:	1b 81       	ldd	r17, Y+3	; 0x03
 cda:	aa 81       	ldd	r26, Y+2	; 0x02
 cdc:	b9 81       	ldd	r27, Y+1	; 0x01
 cde:	ce 0f       	add	r28, r30
 ce0:	d1 1d       	adc	r29, r1
 ce2:	0f b6       	in	r0, 0x3f	; 63
 ce4:	f8 94       	cli
 ce6:	de bf       	out	0x3e, r29	; 62
 ce8:	0f be       	out	0x3f, r0	; 63
 cea:	cd bf       	out	0x3d, r28	; 61
 cec:	ed 01       	movw	r28, r26
 cee:	08 95       	ret

00000cf0 <_exit>:
 cf0:	f8 94       	cli

00000cf2 <__stop_program>:
 cf2:	ff cf       	rjmp	.-2      	; 0xcf2 <__stop_program>
