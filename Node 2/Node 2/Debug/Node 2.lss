
Node 2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d18  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20000000  00080d18  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000088  20000434  0008114c  00020434  2**2
                  ALLOC
  3 .stack        00000404  200004bc  000811d4  00020434  2**0
                  ALLOC
  4 .heap         00000200  200008c0  000815d8  00020434  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002045d  2**0
                  CONTENTS, READONLY
  7 .debug_info   00008a91  00000000  00000000  000204b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014fe  00000000  00000000  00028f47  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000f90  00000000  00000000  0002a445  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000270  00000000  00000000  0002b3d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001e0  00000000  00000000  0002b645  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00013d76  00000000  00000000  0002b825  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00005c25  00000000  00000000  0003f59b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00056718  00000000  00000000  000451c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000658  00000000  00000000  0009b8d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	c0 08 00 20 8d 03 08 00 89 03 08 00 89 03 08 00     ... ............
   80010:	89 03 08 00 89 03 08 00 89 03 08 00 00 00 00 00     ................
	...
   8002c:	89 03 08 00 89 03 08 00 00 00 00 00 89 03 08 00     ................
   8003c:	89 03 08 00 89 03 08 00 89 03 08 00 89 03 08 00     ................
   8004c:	89 03 08 00 89 03 08 00 89 03 08 00 89 03 08 00     ................
   8005c:	89 03 08 00 b5 0a 08 00 89 03 08 00 00 00 00 00     ................
   8006c:	89 03 08 00 89 03 08 00 89 03 08 00 89 03 08 00     ................
	...
   80084:	89 03 08 00 89 03 08 00 89 03 08 00 89 03 08 00     ................
   80094:	89 03 08 00 89 03 08 00 89 03 08 00 89 03 08 00     ................
   800a4:	00 00 00 00 89 03 08 00 89 03 08 00 89 03 08 00     ................
   800b4:	89 03 08 00 89 03 08 00 89 03 08 00 89 03 08 00     ................
   800c4:	89 03 08 00 89 03 08 00 89 03 08 00 89 03 08 00     ................
   800d4:	89 03 08 00 89 03 08 00 89 03 08 00 89 03 08 00     ................
   800e4:	89 03 08 00 89 03 08 00 d9 02 08 00 89 03 08 00     ................

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20000434 	.word	0x20000434
   80110:	00000000 	.word	0x00000000
   80114:	00080d18 	.word	0x00080d18

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00080d18 	.word	0x00080d18
   80154:	20000438 	.word	0x20000438
   80158:	00080d18 	.word	0x00080d18
   8015c:	00000000 	.word	0x00000000

00080160 <can_init>:
 * \retval Success(0) or failure(1)
 */


uint8_t can_init(uint32_t can_br, uint8_t num_tx_mb, uint8_t num_rx_mb)
{
   80160:	b4f0      	push	{r4, r5, r6, r7}
	
	//Make sure num_rx_mb and num_tx_mb is valid
	if(num_rx_mb > 8 | num_tx_mb > 8 | num_rx_mb + num_tx_mb > 8)
   80162:	1857      	adds	r7, r2, r1
   80164:	2f08      	cmp	r7, #8
   80166:	bfd4      	ite	le
   80168:	2300      	movle	r3, #0
   8016a:	2301      	movgt	r3, #1
   8016c:	2908      	cmp	r1, #8
   8016e:	bf98      	it	ls
   80170:	2a08      	cmpls	r2, #8
   80172:	d85c      	bhi.n	8022e <can_init+0xce>
   80174:	460d      	mov	r5, r1
   80176:	2b00      	cmp	r3, #0
   80178:	d159      	bne.n	8022e <can_init+0xce>


	uint32_t ul_status; 
	
	//Disable can
	CAN0->CAN_MR &= ~CAN_MR_CANEN; 
   8017a:	4a2e      	ldr	r2, [pc, #184]	; (80234 <can_init+0xd4>)
   8017c:	6813      	ldr	r3, [r2, #0]
   8017e:	f023 0301 	bic.w	r3, r3, #1
   80182:	6013      	str	r3, [r2, #0]
	//Clear status register on read
	ul_status = CAN0->CAN_SR; 
   80184:	6913      	ldr	r3, [r2, #16]
	
	
	// Disable interrupts on CANH and CANL pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80186:	4b2c      	ldr	r3, [pc, #176]	; (80238 <can_init+0xd8>)
   80188:	f44f 7440 	mov.w	r4, #768	; 0x300
   8018c:	645c      	str	r4, [r3, #68]	; 0x44
	
	//Select CAN0 RX and TX in PIOA
	uint32_t ul_sr = PIOA->PIO_ABSR;
   8018e:	6f1c      	ldr	r4, [r3, #112]	; 0x70
	PIOA->PIO_ABSR = ~(PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0) & ul_sr;
   80190:	f024 0403 	bic.w	r4, r4, #3
   80194:	671c      	str	r4, [r3, #112]	; 0x70
	
	// Disable the Parallel IO (PIO) of the Rx and Tx pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0;
   80196:	2403      	movs	r4, #3
   80198:	605c      	str	r4, [r3, #4]
	
	// Enable pull up on CANH and CANL pin
	PIOA->PIO_PUER = (PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0);
   8019a:	665c      	str	r4, [r3, #100]	; 0x64
	
	
	//Enable Clock for CAN0 in PMC
	PMC->PMC_PCR = PMC_PCR_EN | (0 << PMC_PCR_DIV_Pos) | PMC_PCR_CMD | (ID_CAN0 << PMC_PCR_PID_Pos); // DIV = 1(can clk = MCK/2), CMD = 1 (write), PID = 2B (CAN0)
   8019c:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   801a0:	4c26      	ldr	r4, [pc, #152]	; (8023c <can_init+0xdc>)
   801a2:	f8c3 410c 	str.w	r4, [r3, #268]	; 0x10c
	PMC->PMC_PCER1 |= 1 << (ID_CAN0 - 32);
   801a6:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
   801aa:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
   801ae:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	
	//Set baudrate, Phase1, phase2 and propagation delay for can bus. Must match on all nodes!
	
	CAN0->CAN_BR = can_br; 
   801b2:	6150      	str	r0, [r2, #20]
	//
	

	/****** Start of mailbox configuration ******/

	uint32_t can_ier = 0;
   801b4:	2400      	movs	r4, #0

	/* Configure receive mailboxes */
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   801b6:	e019      	b.n	801ec <can_init+0x8c>
	{
		CAN0->CAN_MB[n].CAN_MAM = 0; //Accept all messages
   801b8:	481e      	ldr	r0, [pc, #120]	; (80234 <can_init+0xd4>)
   801ba:	f101 0310 	add.w	r3, r1, #16
   801be:	015b      	lsls	r3, r3, #5
   801c0:	18c2      	adds	r2, r0, r3
   801c2:	2600      	movs	r6, #0
   801c4:	6056      	str	r6, [r2, #4]
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   801c6:	eb00 1241 	add.w	r2, r0, r1, lsl #5
   801ca:	f04f 5600 	mov.w	r6, #536870912	; 0x20000000
   801ce:	f8c2 6208 	str.w	r6, [r2, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_RX);
   801d2:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
   801d6:	50c6      	str	r6, [r0, r3]
		CAN0->CAN_MB[n].CAN_MCR |= CAN_MCR_MTCR;
   801d8:	f8d2 321c 	ldr.w	r3, [r2, #540]	; 0x21c
   801dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   801e0:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c

		can_ier |= 1 << n; //Enable interrupt on rx mailbox
   801e4:	2301      	movs	r3, #1
   801e6:	408b      	lsls	r3, r1
   801e8:	431c      	orrs	r4, r3
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   801ea:	3101      	adds	r1, #1
   801ec:	42b9      	cmp	r1, r7
   801ee:	dde3      	ble.n	801b8 <can_init+0x58>
   801f0:	2300      	movs	r3, #0
   801f2:	e00d      	b.n	80210 <can_init+0xb0>
	}
	
	/*Configure transmit mailboxes */
	for (int n = 0; n < num_tx_mb; n++)
	{
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   801f4:	490f      	ldr	r1, [pc, #60]	; (80234 <can_init+0xd4>)
   801f6:	eb01 1243 	add.w	r2, r1, r3, lsl #5
   801fa:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
   801fe:	f8c2 0208 	str.w	r0, [r2, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_TX);
   80202:	f103 0210 	add.w	r2, r3, #16
   80206:	0152      	lsls	r2, r2, #5
   80208:	f04f 7040 	mov.w	r0, #50331648	; 0x3000000
   8020c:	5088      	str	r0, [r1, r2]
	for (int n = 0; n < num_tx_mb; n++)
   8020e:	3301      	adds	r3, #1
   80210:	42ab      	cmp	r3, r5
   80212:	dbef      	blt.n	801f4 <can_init+0x94>
	}
	
	/****** End of mailbox configuraion ******/

	//Enable interrupt on receive mailboxes
	CAN0->CAN_IER = can_ier;
   80214:	4b07      	ldr	r3, [pc, #28]	; (80234 <can_init+0xd4>)
   80216:	605c      	str	r4, [r3, #4]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80218:	f44f 6100 	mov.w	r1, #2048	; 0x800
   8021c:	4a08      	ldr	r2, [pc, #32]	; (80240 <can_init+0xe0>)
   8021e:	6051      	str	r1, [r2, #4]

	//Enable interrupt in NVIC 
	NVIC_EnableIRQ(ID_CAN0);

	//enable CAN
	CAN0->CAN_MR |= CAN_MR_CANEN;
   80220:	681a      	ldr	r2, [r3, #0]
   80222:	f042 0201 	orr.w	r2, r2, #1
   80226:	601a      	str	r2, [r3, #0]

	return 0;
   80228:	2000      	movs	r0, #0
}
   8022a:	bcf0      	pop	{r4, r5, r6, r7}
   8022c:	4770      	bx	lr
		return 1; //Too many mailboxes is configured
   8022e:	2001      	movs	r0, #1
   80230:	e7fb      	b.n	8022a <can_init+0xca>
   80232:	bf00      	nop
   80234:	400b4000 	.word	0x400b4000
   80238:	400e0e00 	.word	0x400e0e00
   8023c:	1000102b 	.word	0x1000102b
   80240:	e000e100 	.word	0xe000e100

00080244 <can_init_def_tx_rx_mb>:
{
   80244:	b508      	push	{r3, lr}
	return can_init(can_br, 1, 2);
   80246:	2202      	movs	r2, #2
   80248:	2101      	movs	r1, #1
   8024a:	4b01      	ldr	r3, [pc, #4]	; (80250 <can_init_def_tx_rx_mb+0xc>)
   8024c:	4798      	blx	r3
}
   8024e:	bd08      	pop	{r3, pc}
   80250:	00080161 	.word	0x00080161

00080254 <can_receive>:
 * \retval Success(0) or failure(1)
 */
uint8_t can_receive(CAN_MESSAGE* can_msg, uint8_t rx_mb_id)
{
	//Check that mailbox is ready
	if(CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MRDY)
   80254:	014b      	lsls	r3, r1, #5
   80256:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   8025a:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   8025e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   80262:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   80266:	d033      	beq.n	802d0 <can_receive+0x7c>
{
   80268:	b470      	push	{r4, r5, r6}
	{
		//Get data from CAN mailbox
		uint32_t data_low = CAN0->CAN_MB[rx_mb_id].CAN_MDL;
   8026a:	014b      	lsls	r3, r1, #5
   8026c:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   80270:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   80274:	f8d3 4214 	ldr.w	r4, [r3, #532]	; 0x214
		uint32_t data_high = CAN0->CAN_MB[rx_mb_id].CAN_MDH;
   80278:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
		
		//Get message ID
		can_msg->id = (uint16_t)((CAN0->CAN_MB[rx_mb_id].CAN_MID & CAN_MID_MIDvA_Msk) >> CAN_MID_MIDvA_Pos);
   8027c:	f8d3 5208 	ldr.w	r5, [r3, #520]	; 0x208
   80280:	f3c5 458a 	ubfx	r5, r5, #18, #11
   80284:	8005      	strh	r5, [r0, #0]
		
		//Get data length
		can_msg->data_length = (uint8_t)((CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MDLC_Msk) >> CAN_MSR_MDLC_Pos);
   80286:	f8d3 5210 	ldr.w	r5, [r3, #528]	; 0x210
   8028a:	f3c5 4503 	ubfx	r5, r5, #16, #4
   8028e:	7085      	strb	r5, [r0, #2]
		
		//Put data in CAN_MESSAGE object
		for(int i = 0; i < can_msg->data_length;i++)
   80290:	2300      	movs	r3, #0
   80292:	e003      	b.n	8029c <can_receive+0x48>
				can_msg->data[i] = (char)(data_low & 0xff);
				data_low = data_low >> 8;
			}
			else
			{
				can_msg->data[i] = (uint8_t)(data_high & 0xff);
   80294:	18c6      	adds	r6, r0, r3
   80296:	70f2      	strb	r2, [r6, #3]
				data_high = data_high >> 8;
   80298:	0a12      	lsrs	r2, r2, #8
		for(int i = 0; i < can_msg->data_length;i++)
   8029a:	3301      	adds	r3, #1
   8029c:	42ab      	cmp	r3, r5
   8029e:	da05      	bge.n	802ac <can_receive+0x58>
			if(i < 4)
   802a0:	2b03      	cmp	r3, #3
   802a2:	dcf7      	bgt.n	80294 <can_receive+0x40>
				can_msg->data[i] = (char)(data_low & 0xff);
   802a4:	18c6      	adds	r6, r0, r3
   802a6:	70f4      	strb	r4, [r6, #3]
				data_low = data_low >> 8;
   802a8:	0a24      	lsrs	r4, r4, #8
   802aa:	e7f6      	b.n	8029a <can_receive+0x46>
			}
		}
		
		//Reset for new receive
		CAN0->CAN_MB[rx_mb_id].CAN_MMR = CAN_MMR_MOT_MB_RX;
   802ac:	4b09      	ldr	r3, [pc, #36]	; (802d4 <can_receive+0x80>)
   802ae:	f101 0210 	add.w	r2, r1, #16
   802b2:	0152      	lsls	r2, r2, #5
   802b4:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   802b8:	5098      	str	r0, [r3, r2]
		CAN0->CAN_MB[rx_mb_id].CAN_MCR |= CAN_MCR_MTCR;
   802ba:	eb03 1141 	add.w	r1, r3, r1, lsl #5
   802be:	f8d1 321c 	ldr.w	r3, [r1, #540]	; 0x21c
   802c2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   802c6:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
		return 0;
   802ca:	2000      	movs	r0, #0
	}
	else //Mailbox busy
	{
		return 1;
	}
}
   802cc:	bc70      	pop	{r4, r5, r6}
   802ce:	4770      	bx	lr
		return 1;
   802d0:	2001      	movs	r0, #1
   802d2:	4770      	bx	lr
   802d4:	400b4000 	.word	0x400b4000

000802d8 <CAN0_Handler>:
 * \param void
 *
 * \retval 
 */
void CAN0_Handler( void )
{
   802d8:	b510      	push	{r4, lr}
   802da:	b084      	sub	sp, #16
	if(DEBUG_INTERRUPT)printf("CAN0 interrupt\n\r");
	char can_sr = CAN0->CAN_SR; 
   802dc:	4b21      	ldr	r3, [pc, #132]	; (80364 <CAN0_Handler+0x8c>)
   802de:	691c      	ldr	r4, [r3, #16]
	
	//RX interrupt
	if(can_sr & (CAN_SR_MB1 | CAN_SR_MB2) )//Only mailbox 1 and 2 specified for receiving
   802e0:	f014 0f06 	tst.w	r4, #6
   802e4:	d030      	beq.n	80348 <CAN0_Handler+0x70>
	{
		CAN_MESSAGE message;
		if(can_sr & CAN_SR_MB1)  //Mailbox 1 event
   802e6:	f014 0f02 	tst.w	r4, #2
   802ea:	d108      	bne.n	802fe <CAN0_Handler+0x26>
			set_servo_posistion(message.data[0]);
			//joystick_horizontal_to_speed(message.data[0]);
			

		}
		else if(can_sr & CAN_SR_MB2) //Mailbox 2 event
   802ec:	f014 0f04 	tst.w	r4, #4
   802f0:	d021      	beq.n	80336 <CAN0_Handler+0x5e>
		
		{
			can_receive(&message, 2);
   802f2:	2102      	movs	r1, #2
   802f4:	a801      	add	r0, sp, #4
   802f6:	4b1c      	ldr	r3, [pc, #112]	; (80368 <CAN0_Handler+0x90>)
   802f8:	4798      	blx	r3
			printf("CAN0 message arrived in non-used mailbox\n\r");
		}

		if(DEBUG_INTERRUPT)printf("message id: %d\n\r", message.id);
		if(DEBUG_INTERRUPT)printf("message data length: %d\n\r", message.data_length);
		for (int i = 0; i < message.data_length; i++)
   802fa:	2300      	movs	r3, #0
   802fc:	e020      	b.n	80340 <CAN0_Handler+0x68>
			can_receive(&message, 1);
   802fe:	2101      	movs	r1, #1
   80300:	a801      	add	r0, sp, #4
   80302:	4b19      	ldr	r3, [pc, #100]	; (80368 <CAN0_Handler+0x90>)
   80304:	4798      	blx	r3
			set_joystick_horizontal_val(message.data[0]);
   80306:	f89d 0007 	ldrb.w	r0, [sp, #7]
   8030a:	4b18      	ldr	r3, [pc, #96]	; (8036c <CAN0_Handler+0x94>)
   8030c:	4798      	blx	r3
			set_right_slider_val(message.data[1]);
   8030e:	f89d 0008 	ldrb.w	r0, [sp, #8]
   80312:	4b17      	ldr	r3, [pc, #92]	; (80370 <CAN0_Handler+0x98>)
   80314:	4798      	blx	r3
			set_right_button_val(message.data[2]);
   80316:	f89d 0009 	ldrb.w	r0, [sp, #9]
   8031a:	4b16      	ldr	r3, [pc, #88]	; (80374 <CAN0_Handler+0x9c>)
   8031c:	4798      	blx	r3
			for (int i = 0; i< message.data_length; i++)
   8031e:	2300      	movs	r3, #0
   80320:	e000      	b.n	80324 <CAN0_Handler+0x4c>
   80322:	3301      	adds	r3, #1
   80324:	f89d 2006 	ldrb.w	r2, [sp, #6]
   80328:	4293      	cmp	r3, r2
   8032a:	dbfa      	blt.n	80322 <CAN0_Handler+0x4a>
			set_servo_posistion(message.data[0]);
   8032c:	f89d 0007 	ldrb.w	r0, [sp, #7]
   80330:	4b11      	ldr	r3, [pc, #68]	; (80378 <CAN0_Handler+0xa0>)
   80332:	4798      	blx	r3
   80334:	e7e1      	b.n	802fa <CAN0_Handler+0x22>
			printf("CAN0 message arrived in non-used mailbox\n\r");
   80336:	4811      	ldr	r0, [pc, #68]	; (8037c <CAN0_Handler+0xa4>)
   80338:	4b11      	ldr	r3, [pc, #68]	; (80380 <CAN0_Handler+0xa8>)
   8033a:	4798      	blx	r3
   8033c:	e7dd      	b.n	802fa <CAN0_Handler+0x22>
		for (int i = 0; i < message.data_length; i++)
   8033e:	3301      	adds	r3, #1
   80340:	f89d 2006 	ldrb.w	r2, [sp, #6]
   80344:	4293      	cmp	r3, r2
   80346:	dbfa      	blt.n	8033e <CAN0_Handler+0x66>
			if(DEBUG_INTERRUPT)printf("%d ", message.data[i]);
		}
		if(DEBUG_INTERRUPT)printf("\n\r");
	}
	
	if(can_sr & CAN_SR_MB0)
   80348:	f014 0f01 	tst.w	r4, #1
   8034c:	d002      	beq.n	80354 <CAN0_Handler+0x7c>
	{
		if(DEBUG_INTERRUPT) printf("CAN0 MB0 ready to send \n\r");
		
	//Disable interrupt
		CAN0->CAN_IDR = CAN_IER_MB0;
   8034e:	2201      	movs	r2, #1
   80350:	4b04      	ldr	r3, [pc, #16]	; (80364 <CAN0_Handler+0x8c>)
   80352:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80354:	f44f 6200 	mov.w	r2, #2048	; 0x800
   80358:	4b0a      	ldr	r3, [pc, #40]	; (80384 <CAN0_Handler+0xac>)
   8035a:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

	}
	
	NVIC_ClearPendingIRQ(ID_CAN0);
	//sei();*/
}
   8035e:	b004      	add	sp, #16
   80360:	bd10      	pop	{r4, pc}
   80362:	bf00      	nop
   80364:	400b4000 	.word	0x400b4000
   80368:	00080255 	.word	0x00080255
   8036c:	00080531 	.word	0x00080531
   80370:	0008053d 	.word	0x0008053d
   80374:	00080549 	.word	0x00080549
   80378:	000806f9 	.word	0x000806f9
   8037c:	00080c8c 	.word	0x00080c8c
   80380:	00080a05 	.word	0x00080a05
   80384:	e000e100 	.word	0xe000e100

00080388 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80388:	e7fe      	b.n	80388 <Dummy_Handler>
	...

0008038c <Reset_Handler>:
{
   8038c:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
   8038e:	4b11      	ldr	r3, [pc, #68]	; (803d4 <Reset_Handler+0x48>)
   80390:	4a11      	ldr	r2, [pc, #68]	; (803d8 <Reset_Handler+0x4c>)
   80392:	429a      	cmp	r2, r3
   80394:	d009      	beq.n	803aa <Reset_Handler+0x1e>
   80396:	4b0f      	ldr	r3, [pc, #60]	; (803d4 <Reset_Handler+0x48>)
   80398:	4a0f      	ldr	r2, [pc, #60]	; (803d8 <Reset_Handler+0x4c>)
   8039a:	e003      	b.n	803a4 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
   8039c:	6811      	ldr	r1, [r2, #0]
   8039e:	6019      	str	r1, [r3, #0]
   803a0:	3304      	adds	r3, #4
   803a2:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
   803a4:	490d      	ldr	r1, [pc, #52]	; (803dc <Reset_Handler+0x50>)
   803a6:	428b      	cmp	r3, r1
   803a8:	d3f8      	bcc.n	8039c <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
   803aa:	4b0d      	ldr	r3, [pc, #52]	; (803e0 <Reset_Handler+0x54>)
   803ac:	e002      	b.n	803b4 <Reset_Handler+0x28>
                *pDest++ = 0;
   803ae:	2200      	movs	r2, #0
   803b0:	601a      	str	r2, [r3, #0]
   803b2:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
   803b4:	4a0b      	ldr	r2, [pc, #44]	; (803e4 <Reset_Handler+0x58>)
   803b6:	4293      	cmp	r3, r2
   803b8:	d3f9      	bcc.n	803ae <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   803ba:	4b0b      	ldr	r3, [pc, #44]	; (803e8 <Reset_Handler+0x5c>)
   803bc:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   803c0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   803c4:	4a09      	ldr	r2, [pc, #36]	; (803ec <Reset_Handler+0x60>)
   803c6:	6093      	str	r3, [r2, #8]
        __libc_init_array();
   803c8:	4b09      	ldr	r3, [pc, #36]	; (803f0 <Reset_Handler+0x64>)
   803ca:	4798      	blx	r3
        main();
   803cc:	4b09      	ldr	r3, [pc, #36]	; (803f4 <Reset_Handler+0x68>)
   803ce:	4798      	blx	r3
   803d0:	e7fe      	b.n	803d0 <Reset_Handler+0x44>
   803d2:	bf00      	nop
   803d4:	20000000 	.word	0x20000000
   803d8:	00080d18 	.word	0x00080d18
   803dc:	20000434 	.word	0x20000434
   803e0:	20000434 	.word	0x20000434
   803e4:	200004bc 	.word	0x200004bc
   803e8:	00080000 	.word	0x00080000
   803ec:	e000ed00 	.word	0xe000ed00
   803f0:	00080b1d 	.word	0x00080b1d
   803f4:	0008049d 	.word	0x0008049d

000803f8 <SystemInit>:
 * Initialize the System and update the SystemFrequency variable.
 */
void SystemInit( void )
{
  /* Set FWS according to SYS_BOARD_MCKR configuration */
  EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   803f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
   803fc:	4a20      	ldr	r2, [pc, #128]	; (80480 <SystemInit+0x88>)
   803fe:	6013      	str	r3, [r2, #0]
  EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
   80400:	f502 7200 	add.w	r2, r2, #512	; 0x200
   80404:	6013      	str	r3, [r2, #0]

  /* Initialize main oscillator */
  if ( !(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) )
   80406:	4b1f      	ldr	r3, [pc, #124]	; (80484 <SystemInit+0x8c>)
   80408:	6a1b      	ldr	r3, [r3, #32]
   8040a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   8040e:	d107      	bne.n	80420 <SystemInit+0x28>
  {
    PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
   80410:	4a1d      	ldr	r2, [pc, #116]	; (80488 <SystemInit+0x90>)
   80412:	4b1c      	ldr	r3, [pc, #112]	; (80484 <SystemInit+0x8c>)
   80414:	621a      	str	r2, [r3, #32]
    while ( !(PMC->PMC_SR & PMC_SR_MOSCXTS) )
   80416:	4b1b      	ldr	r3, [pc, #108]	; (80484 <SystemInit+0x8c>)
   80418:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8041a:	f013 0f01 	tst.w	r3, #1
   8041e:	d0fa      	beq.n	80416 <SystemInit+0x1e>
    {
    }
  }

  /* Switch to 3-20MHz Xtal oscillator */
  PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;
   80420:	4a1a      	ldr	r2, [pc, #104]	; (8048c <SystemInit+0x94>)
   80422:	4b18      	ldr	r3, [pc, #96]	; (80484 <SystemInit+0x8c>)
   80424:	621a      	str	r2, [r3, #32]

  while ( !(PMC->PMC_SR & PMC_SR_MOSCSELS) )
   80426:	4b17      	ldr	r3, [pc, #92]	; (80484 <SystemInit+0x8c>)
   80428:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8042a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   8042e:	d0fa      	beq.n	80426 <SystemInit+0x2e>
  {
  }
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   80430:	4a14      	ldr	r2, [pc, #80]	; (80484 <SystemInit+0x8c>)
   80432:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80434:	f023 0303 	bic.w	r3, r3, #3
   80438:	f043 0301 	orr.w	r3, r3, #1
   8043c:	6313      	str	r3, [r2, #48]	; 0x30
  while (!(PMC->PMC_SR & PMC_SR_MCKRDY))
   8043e:	4b11      	ldr	r3, [pc, #68]	; (80484 <SystemInit+0x8c>)
   80440:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80442:	f013 0f08 	tst.w	r3, #8
   80446:	d0fa      	beq.n	8043e <SystemInit+0x46>
  {
  }

  /* Initialize PLLA */
  PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
   80448:	4a11      	ldr	r2, [pc, #68]	; (80490 <SystemInit+0x98>)
   8044a:	4b0e      	ldr	r3, [pc, #56]	; (80484 <SystemInit+0x8c>)
   8044c:	629a      	str	r2, [r3, #40]	; 0x28
  while ( !(PMC->PMC_SR & PMC_SR_LOCKA) )
   8044e:	4b0d      	ldr	r3, [pc, #52]	; (80484 <SystemInit+0x8c>)
   80450:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80452:	f013 0f02 	tst.w	r3, #2
   80456:	d0fa      	beq.n	8044e <SystemInit+0x56>
  {
  }

  /* Switch to main clock */
  PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   80458:	2211      	movs	r2, #17
   8045a:	4b0a      	ldr	r3, [pc, #40]	; (80484 <SystemInit+0x8c>)
   8045c:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   8045e:	4b09      	ldr	r3, [pc, #36]	; (80484 <SystemInit+0x8c>)
   80460:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80462:	f013 0f08 	tst.w	r3, #8
   80466:	d0fa      	beq.n	8045e <SystemInit+0x66>
  {
  }

  /* Switch to PLLA */
  PMC->PMC_MCKR = SYS_BOARD_MCKR;
   80468:	2212      	movs	r2, #18
   8046a:	4b06      	ldr	r3, [pc, #24]	; (80484 <SystemInit+0x8c>)
   8046c:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   8046e:	4b05      	ldr	r3, [pc, #20]	; (80484 <SystemInit+0x8c>)
   80470:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80472:	f013 0f08 	tst.w	r3, #8
   80476:	d0fa      	beq.n	8046e <SystemInit+0x76>
  {
  }

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
   80478:	4a06      	ldr	r2, [pc, #24]	; (80494 <SystemInit+0x9c>)
   8047a:	4b07      	ldr	r3, [pc, #28]	; (80498 <SystemInit+0xa0>)
   8047c:	601a      	str	r2, [r3, #0]
   8047e:	4770      	bx	lr
   80480:	400e0a00 	.word	0x400e0a00
   80484:	400e0600 	.word	0x400e0600
   80488:	00370809 	.word	0x00370809
   8048c:	01370809 	.word	0x01370809
   80490:	200d3f01 	.word	0x200d3f01
   80494:	0501bd00 	.word	0x0501bd00
   80498:	20000000 	.word	0x20000000

0008049c <main>:



#define can_br 0x01141255 
int main(void)
{
   8049c:	b508      	push	{r3, lr}
    /* Initialize the SAM system */
    SystemInit();
   8049e:	4b15      	ldr	r3, [pc, #84]	; (804f4 <main+0x58>)
   804a0:	4798      	blx	r3
	configure_uart();
   804a2:	4b15      	ldr	r3, [pc, #84]	; (804f8 <main+0x5c>)
   804a4:	4798      	blx	r3
	can_init_def_tx_rx_mb(can_br);
   804a6:	4815      	ldr	r0, [pc, #84]	; (804fc <main+0x60>)
   804a8:	4b15      	ldr	r3, [pc, #84]	; (80500 <main+0x64>)
   804aa:	4798      	blx	r3
	timer_init();
   804ac:	4b15      	ldr	r3, [pc, #84]	; (80504 <main+0x68>)
   804ae:	4798      	blx	r3
	PWM_init();
   804b0:	4b15      	ldr	r3, [pc, #84]	; (80508 <main+0x6c>)
   804b2:	4798      	blx	r3
	ADC_init();
   804b4:	4b15      	ldr	r3, [pc, #84]	; (8050c <main+0x70>)
   804b6:	4798      	blx	r3
	motor_init();
   804b8:	4b15      	ldr	r3, [pc, #84]	; (80510 <main+0x74>)
   804ba:	4798      	blx	r3
	DAC_init();
   804bc:	4b15      	ldr	r3, [pc, #84]	; (80514 <main+0x78>)
   804be:	4798      	blx	r3
	
	
	WDT->WDT_MR = WDT_MR_WDDIS; // Disable WDT
   804c0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   804c4:	4b14      	ldr	r3, [pc, #80]	; (80518 <main+0x7c>)
   804c6:	605a      	str	r2, [r3, #4]
	
	PIOA->PIO_OER = PIO_OER_P19 | PIO_OER_P20; // Output enable on PA19 and PA20
   804c8:	f5a3 6345 	sub.w	r3, r3, #3152	; 0xc50
   804cc:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
   804d0:	611a      	str	r2, [r3, #16]
	
	PIOA->PIO_SODR = PIO_SODR_P19; // | PIO_SODR_P20; // Set PA19 and PA20 high ( Turn on both leds ) 
   804d2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   804d6:	631a      	str	r2, [r3, #48]	; 0x30
	//motor_set_direction(1);
	motor_disable_break(1);
   804d8:	2001      	movs	r0, #1
   804da:	4b10      	ldr	r3, [pc, #64]	; (8051c <main+0x80>)
   804dc:	4798      	blx	r3
    /* Replace with your application code */
	//motor_encoder_reset();
    while (1) 
    {	
		//PWM_update_dutycycle(7);
		printf("HELLO\n\r");
   804de:	4810      	ldr	r0, [pc, #64]	; (80520 <main+0x84>)
   804e0:	4c10      	ldr	r4, [pc, #64]	; (80524 <main+0x88>)
   804e2:	47a0      	blx	r4
		delay_ms(3000);
   804e4:	f640 30b8 	movw	r0, #3000	; 0xbb8
   804e8:	4b0f      	ldr	r3, [pc, #60]	; (80528 <main+0x8c>)
   804ea:	4798      	blx	r3
		//
		//motor_raw_dog();
		//print_joy_h();
		//motor_set_speed(50);
		//uint16_t encoder_val = motor_encoder_read();
		printf("HELff\n\r");
   804ec:	480f      	ldr	r0, [pc, #60]	; (8052c <main+0x90>)
   804ee:	47a0      	blx	r4
   804f0:	e7f5      	b.n	804de <main+0x42>
   804f2:	bf00      	nop
   804f4:	000803f9 	.word	0x000803f9
   804f8:	00080a29 	.word	0x00080a29
   804fc:	01141255 	.word	0x01141255
   80500:	00080245 	.word	0x00080245
   80504:	00080715 	.word	0x00080715
   80508:	0008062d 	.word	0x0008062d
   8050c:	000805ed 	.word	0x000805ed
   80510:	000805ad 	.word	0x000805ad
   80514:	00080571 	.word	0x00080571
   80518:	400e1a50 	.word	0x400e1a50
   8051c:	00080555 	.word	0x00080555
   80520:	00080cb8 	.word	0x00080cb8
   80524:	00080a05 	.word	0x00080a05
   80528:	00080745 	.word	0x00080745
   8052c:	00080cc0 	.word	0x00080cc0

00080530 <set_joystick_horizontal_val>:

#define ENCODER_DATA_MASK   (0xFF << DO0_IDX)
#define MIN_ENCODER_VALUE   0
#define MAX_ENCODER_VALUE   8800

void set_joystick_horizontal_val(uint8_t val) {joystick_horizontal_val = val;}
   80530:	4b01      	ldr	r3, [pc, #4]	; (80538 <set_joystick_horizontal_val+0x8>)
   80532:	7018      	strb	r0, [r3, #0]
   80534:	4770      	bx	lr
   80536:	bf00      	nop
   80538:	20000450 	.word	0x20000450

0008053c <set_right_slider_val>:
void set_right_slider_val(uint8_t val) {right_slider_val = val;}
   8053c:	4b01      	ldr	r3, [pc, #4]	; (80544 <set_right_slider_val+0x8>)
   8053e:	7058      	strb	r0, [r3, #1]
   80540:	4770      	bx	lr
   80542:	bf00      	nop
   80544:	20000450 	.word	0x20000450

00080548 <set_right_button_val>:
void set_right_button_val(uint8_t val) {right_button_val = val;}
   80548:	4b01      	ldr	r3, [pc, #4]	; (80550 <set_right_button_val+0x8>)
   8054a:	7098      	strb	r0, [r3, #2]
   8054c:	4770      	bx	lr
   8054e:	bf00      	nop
   80550:	20000450 	.word	0x20000450

00080554 <motor_disable_break>:
	PIOD->PIO_OER = DIR | EN | SEL | NOT_RST | NOT_IOE ;
	PIOC->PIO_ODR = (DO0 | DO1 | DO2 | DO3 | DO4 | DO5 | DO6 | DO7);
}

void motor_disable_break(uint8_t bool){
	if(bool){
   80554:	b920      	cbnz	r0, 80560 <motor_disable_break+0xc>
		PIOD->PIO_SODR = PIO_SODR_P9; // Set MJ1_EN high
		return;
	}
	PIOD->PIO_CODR = PIO_CODR_P9; // Set MJ1_EN low
   80556:	f44f 7200 	mov.w	r2, #512	; 0x200
   8055a:	4b04      	ldr	r3, [pc, #16]	; (8056c <motor_disable_break+0x18>)
   8055c:	635a      	str	r2, [r3, #52]	; 0x34
   8055e:	4770      	bx	lr
		PIOD->PIO_SODR = PIO_SODR_P9; // Set MJ1_EN high
   80560:	f44f 7200 	mov.w	r2, #512	; 0x200
   80564:	4b01      	ldr	r3, [pc, #4]	; (8056c <motor_disable_break+0x18>)
   80566:	631a      	str	r2, [r3, #48]	; 0x30
		return;
   80568:	4770      	bx	lr
   8056a:	bf00      	nop
   8056c:	400e1400 	.word	0x400e1400

00080570 <DAC_init>:

void DAC_init(void){
	
	//set perifiral clk on PMC
	// Enable peripheral clock on PID38 (DACC)
	PMC->PMC_PCER1 |= PMC_PCER1_PID38;
   80570:	4a0c      	ldr	r2, [pc, #48]	; (805a4 <DAC_init+0x34>)
   80572:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   80576:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8057a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
	
	// Disable IO for PB16, which enables Peripheral control of the pin
	PIOB->PIO_PDR |= PIO_PDR_P16;
   8057e:	f502 6220 	add.w	r2, r2, #2560	; 0xa00
   80582:	6853      	ldr	r3, [r2, #4]
   80584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80588:	6053      	str	r3, [r2, #4]
	
	
	//set DAC Mode
	
	DACC->DACC_MR |= DACC_MR_USER_SEL_CHANNEL1;
   8058a:	4b07      	ldr	r3, [pc, #28]	; (805a8 <DAC_init+0x38>)
   8058c:	685a      	ldr	r2, [r3, #4]
   8058e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
   80592:	605a      	str	r2, [r3, #4]
	DACC->DACC_MR |= DACC_MR_WORD_HALF;
   80594:	685a      	ldr	r2, [r3, #4]
   80596:	605a      	str	r2, [r3, #4]
	
	//Enable channel 1
	DACC->DACC_CHER |= DACC_CHER_CH1;
   80598:	691a      	ldr	r2, [r3, #16]
   8059a:	f042 0202 	orr.w	r2, r2, #2
   8059e:	611a      	str	r2, [r3, #16]
   805a0:	4770      	bx	lr
   805a2:	bf00      	nop
   805a4:	400e0600 	.word	0x400e0600
   805a8:	400c8000 	.word	0x400c8000

000805ac <motor_init>:
void motor_init(void){
   805ac:	b508      	push	{r3, lr}
	DAC_init(); 
   805ae:	4b0c      	ldr	r3, [pc, #48]	; (805e0 <motor_init+0x34>)
   805b0:	4798      	blx	r3
	PMC->PMC_PCER0 |= PMC_PCER0_PID13 ;
   805b2:	4a0c      	ldr	r2, [pc, #48]	; (805e4 <motor_init+0x38>)
   805b4:	6913      	ldr	r3, [r2, #16]
   805b6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   805ba:	6113      	str	r3, [r2, #16]
	PMC->PMC_PCR |= PMC_PCR_EN | PMC_PCR_PID(13) ;
   805bc:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
   805c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   805c4:	f043 030d 	orr.w	r3, r3, #13
   805c8:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
	PIOD->PIO_OER = DIR | EN | SEL | NOT_RST | NOT_IOE ;
   805cc:	f240 6207 	movw	r2, #1543	; 0x607
   805d0:	4b05      	ldr	r3, [pc, #20]	; (805e8 <motor_init+0x3c>)
   805d2:	611a      	str	r2, [r3, #16]
	PIOC->PIO_ODR = (DO0 | DO1 | DO2 | DO3 | DO4 | DO5 | DO6 | DO7);
   805d4:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
   805d8:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
   805dc:	615a      	str	r2, [r3, #20]
   805de:	bd08      	pop	{r3, pc}
   805e0:	00080571 	.word	0x00080571
   805e4:	400e0600 	.word	0x400e0600
   805e8:	400e1400 	.word	0x400e1400

000805ec <ADC_init>:
#include "sam.h"

void ADC_init( void ) {

	// Enable periferal clock on PID37 (The ADC)
	PMC->PMC_PCER1 |= PMC_PCER1_PID37;
   805ec:	4a0d      	ldr	r2, [pc, #52]	; (80624 <ADC_init+0x38>)
   805ee:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   805f2:	f043 0320 	orr.w	r3, r3, #32
   805f6:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
	
	// Disable IO for P2, which enables Peripheral control of the pin
	 PIOA->PIO_PDR |= PIO_PDR_P2;
   805fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
   805fe:	6853      	ldr	r3, [r2, #4]
   80600:	f043 0304 	orr.w	r3, r3, #4
   80604:	6053      	str	r3, [r2, #4]
	
	// Enable ADC chanel 0
	ADC->ADC_CHER |= ADC_CHER_CH0;
   80606:	4b08      	ldr	r3, [pc, #32]	; (80628 <ADC_init+0x3c>)
   80608:	691a      	ldr	r2, [r3, #16]
   8060a:	f042 0201 	orr.w	r2, r2, #1
   8060e:	611a      	str	r2, [r3, #16]
	
	// Enable freerun, sample all the time
	ADC->ADC_MR |= ADC_MR_FREERUN_ON;
   80610:	685a      	ldr	r2, [r3, #4]
   80612:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   80616:	605a      	str	r2, [r3, #4]

	
	// Start ADC-Conversion
	ADC->ADC_CR |= ADC_CR_START;
   80618:	681a      	ldr	r2, [r3, #0]
   8061a:	f042 0202 	orr.w	r2, r2, #2
   8061e:	601a      	str	r2, [r3, #0]
   80620:	4770      	bx	lr
   80622:	bf00      	nop
   80624:	400e0600 	.word	0x400e0600
   80628:	400c0000 	.word	0x400c0000

0008062c <PWM_init>:
#include "PWM.h"

void PWM_init(void){
	
	//enable PWM in PMC
	PMC->PMC_PCER1 |= PMC_PCER1_PID36;
   8062c:	4a21      	ldr	r2, [pc, #132]	; (806b4 <PWM_init+0x88>)
   8062e:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   80632:	f043 0310 	orr.w	r3, r3, #16
   80636:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
	
	//Select functionality of PIO-pis, on PC19 - (pin 44) and PC18 - (pin 45)
	//choosing PWM channel H5 and H6
	
	//PIO disable  
	PIOC->PIO_PDR |= PIO_PDR_P19;
   8063a:	4b1f      	ldr	r3, [pc, #124]	; (806b8 <PWM_init+0x8c>)
   8063c:	685a      	ldr	r2, [r3, #4]
   8063e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   80642:	605a      	str	r2, [r3, #4]
	PIOC->PIO_PDR |= PIO_PDR_P18;	
   80644:	685a      	ldr	r2, [r3, #4]
   80646:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
   8064a:	605a      	str	r2, [r3, #4]
	
	//PWM peripheral select
	PIOC->PIO_ABSR |= PIO_ABSR_P19;
   8064c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   8064e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   80652:	671a      	str	r2, [r3, #112]	; 0x70
	PIOC->PIO_ABSR |= PIO_ABSR_P18;
   80654:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80656:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
   8065a:	671a      	str	r2, [r3, #112]	; 0x70
	//Set PWM Clk = MCK = 84 Mhz
	 
	 
	//set channel mode
	// Set clk source = 656250 hz
	REG_PWM_CMR5 |= PWM_CMR_CPRE_MCK_DIV_128;
   8065c:	4a17      	ldr	r2, [pc, #92]	; (806bc <PWM_init+0x90>)
   8065e:	6813      	ldr	r3, [r2, #0]
   80660:	f043 0307 	orr.w	r3, r3, #7
   80664:	6013      	str	r3, [r2, #0]
	REG_PWM_CMR6 |= PWM_CMR_CPRE_MCK_DIV_128;
   80666:	3220      	adds	r2, #32
   80668:	6813      	ldr	r3, [r2, #0]
   8066a:	f043 0307 	orr.w	r3, r3, #7
   8066e:	6013      	str	r3, [r2, #0]
	


	//Set Period = CPRD/21 Mhz
	// CPRD = 0x3345 => T=20 ms
	REG_PWM_CPRD5 |= 0x3345;
   80670:	4b13      	ldr	r3, [pc, #76]	; (806c0 <PWM_init+0x94>)
   80672:	681a      	ldr	r2, [r3, #0]
   80674:	f243 3145 	movw	r1, #13125	; 0x3345
   80678:	430a      	orrs	r2, r1
   8067a:	601a      	str	r2, [r3, #0]
	REG_PWM_CPRD6 |= 0x3345;
   8067c:	4a11      	ldr	r2, [pc, #68]	; (806c4 <PWM_init+0x98>)
   8067e:	6813      	ldr	r3, [r2, #0]
   80680:	430b      	orrs	r3, r1
   80682:	6013      	str	r3, [r2, #0]
	
	//Set duty Cycle = 1 - CDTY/CPRD
	//CDTY = 0x30F5 => d =  0.9 ms
	//CDTY = 0x2DE2 => d =  2.1 ms
	
	REG_PWM_CDTY5 |= 0x30F5;
   80684:	3a28      	subs	r2, #40	; 0x28
   80686:	6813      	ldr	r3, [r2, #0]
   80688:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
   8068c:	f043 0335 	orr.w	r3, r3, #53	; 0x35
   80690:	6013      	str	r3, [r2, #0]
	REG_PWM_CDTY6 |= 0x2DE2;
   80692:	3220      	adds	r2, #32
   80694:	6813      	ldr	r3, [r2, #0]
   80696:	f443 5337 	orr.w	r3, r3, #11712	; 0x2dc0
   8069a:	f043 0322 	orr.w	r3, r3, #34	; 0x22
   8069e:	6013      	str	r3, [r2, #0]
	
	PWM->PWM_ENA |= PWM_ENA_CHID5;
   806a0:	4b09      	ldr	r3, [pc, #36]	; (806c8 <PWM_init+0x9c>)
   806a2:	685a      	ldr	r2, [r3, #4]
   806a4:	f042 0220 	orr.w	r2, r2, #32
   806a8:	605a      	str	r2, [r3, #4]
	PWM->PWM_ENA |= PWM_ENA_CHID6;
   806aa:	685a      	ldr	r2, [r3, #4]
   806ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   806b0:	605a      	str	r2, [r3, #4]
   806b2:	4770      	bx	lr
   806b4:	400e0600 	.word	0x400e0600
   806b8:	400e1200 	.word	0x400e1200
   806bc:	400942a0 	.word	0x400942a0
   806c0:	400942ac 	.word	0x400942ac
   806c4:	400942cc 	.word	0x400942cc
   806c8:	40094000 	.word	0x40094000

000806cc <PWM_update_dutycycle>:
	
}

void PWM_update_dutycycle(uint32_t percentage){
	
	REG_PWM_CDTYUPD5 = ((100 - percentage)*13124)/100;
   806cc:	4b07      	ldr	r3, [pc, #28]	; (806ec <PWM_update_dutycycle+0x20>)
   806ce:	fb03 f000 	mul.w	r0, r3, r0
   806d2:	f500 10a0 	add.w	r0, r0, #1310720	; 0x140000
   806d6:	f500 60d2 	add.w	r0, r0, #1680	; 0x690
   806da:	4b05      	ldr	r3, [pc, #20]	; (806f0 <PWM_update_dutycycle+0x24>)
   806dc:	fba3 3000 	umull	r3, r0, r3, r0
   806e0:	0940      	lsrs	r0, r0, #5
   806e2:	4b04      	ldr	r3, [pc, #16]	; (806f4 <PWM_update_dutycycle+0x28>)
   806e4:	6018      	str	r0, [r3, #0]

	REG_PWM_CDTYUPD6 = ((100 - percentage)*13124)/100;
   806e6:	3320      	adds	r3, #32
   806e8:	6018      	str	r0, [r3, #0]
   806ea:	4770      	bx	lr
   806ec:	ffffccbc 	.word	0xffffccbc
   806f0:	51eb851f 	.word	0x51eb851f
   806f4:	400942a8 	.word	0x400942a8

000806f8 <set_servo_posistion>:
 */ 

#include "servocontrol.h"


void set_servo_posistion(uint32_t joystick_percentage){
   806f8:	b508      	push	{r3, lr}
	
	uint32_t dutyCycle = joystick_percentage/20 + 5;
   806fa:	4b04      	ldr	r3, [pc, #16]	; (8070c <set_servo_posistion+0x14>)
   806fc:	fba3 3000 	umull	r3, r0, r3, r0
   80700:	0900      	lsrs	r0, r0, #4
	
	//printf("dutyculce %d \n\r", dutyCycle);
	
	
	PWM_update_dutycycle(dutyCycle);
   80702:	3005      	adds	r0, #5
   80704:	4b02      	ldr	r3, [pc, #8]	; (80710 <set_servo_posistion+0x18>)
   80706:	4798      	blx	r3
   80708:	bd08      	pop	{r3, pc}
   8070a:	bf00      	nop
   8070c:	cccccccd 	.word	0xcccccccd
   80710:	000806cd 	.word	0x000806cd

00080714 <timer_init>:
	// Use TC0 for delay (Peripheral ID27)
	// Use TC1 for interrupt (Peripheral ID28)
	
	// Configure PMC
	// Enable peripheral clock for TC0 (ID27)
	PMC->PMC_PCER0 |= PMC_PCER0_PID27;
   80714:	4b09      	ldr	r3, [pc, #36]	; (8073c <timer_init+0x28>)
   80716:	691a      	ldr	r2, [r3, #16]
   80718:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
   8071c:	611a      	str	r2, [r3, #16]
	PMC->PMC_PCR |= PMC_PCR_EN;
   8071e:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
   80722:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   80726:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

	REG_TC0_CCR0 = TC_CCR_CLKEN;
   8072a:	2201      	movs	r2, #1
   8072c:	4b04      	ldr	r3, [pc, #16]	; (80740 <timer_init+0x2c>)
   8072e:	601a      	str	r2, [r3, #0]
	REG_TC0_CMR0 = TC_CMR_TCCLKS_TIMER_CLOCK1 | TC_CMR_ETRGEDG_RISING | TC_CMR_CPCDIS | TC_CMR_WAVE;
   80730:	f248 1280 	movw	r2, #33152	; 0x8180
   80734:	3304      	adds	r3, #4
   80736:	601a      	str	r2, [r3, #0]
   80738:	4770      	bx	lr
   8073a:	bf00      	nop
   8073c:	400e0600 	.word	0x400e0600
   80740:	40080000 	.word	0x40080000

00080744 <delay_ms>:
}

void delay_ms(int delay){
	
	uint32_t count_val = (MCK/MCK_CLOCK_DIVISOR)/1000;
	REG_TC0_RC0 = count_val;
   80744:	f44f 7224 	mov.w	r2, #656	; 0x290
   80748:	4b07      	ldr	r3, [pc, #28]	; (80768 <delay_ms+0x24>)
   8074a:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < delay; i++)
   8074c:	2200      	movs	r2, #0
   8074e:	e008      	b.n	80762 <delay_ms+0x1e>
	{
		REG_TC0_CCR0 = TC_CCR_SWTRG;
   80750:	2104      	movs	r1, #4
   80752:	4b06      	ldr	r3, [pc, #24]	; (8076c <delay_ms+0x28>)
   80754:	6019      	str	r1, [r3, #0]
		while(!(REG_TC0_SR0 & TC_SR_CPCS));
   80756:	4b06      	ldr	r3, [pc, #24]	; (80770 <delay_ms+0x2c>)
   80758:	681b      	ldr	r3, [r3, #0]
   8075a:	f013 0f10 	tst.w	r3, #16
   8075e:	d0fa      	beq.n	80756 <delay_ms+0x12>
	for (int i = 0; i < delay; i++)
   80760:	3201      	adds	r2, #1
   80762:	4282      	cmp	r2, r0
   80764:	dbf4      	blt.n	80750 <delay_ms+0xc>
	}
}
   80766:	4770      	bx	lr
   80768:	4008001c 	.word	0x4008001c
   8076c:	40080000 	.word	0x40080000
   80770:	40080020 	.word	0x40080020

00080774 <printchar>:
#include "uart.h"


//insert function to print to here
static void printchar(char **str, int c)
{
   80774:	b508      	push	{r3, lr}
	(void) uart_putchar(c);  //Send characters to uart
   80776:	b2c8      	uxtb	r0, r1
   80778:	4b01      	ldr	r3, [pc, #4]	; (80780 <printchar+0xc>)
   8077a:	4798      	blx	r3
   8077c:	bd08      	pop	{r3, pc}
   8077e:	bf00      	nop
   80780:	00080a91 	.word	0x00080a91

00080784 <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
   80784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80788:	4607      	mov	r7, r0
   8078a:	460e      	mov	r6, r1
	register int pc = 0, padchar = ' ';

	if (width > 0) {
   8078c:	1e15      	subs	r5, r2, #0
   8078e:	dd02      	ble.n	80796 <prints+0x12>
   80790:	460a      	mov	r2, r1
   80792:	2100      	movs	r1, #0
   80794:	e004      	b.n	807a0 <prints+0x1c>
	register int pc = 0, padchar = ' ';
   80796:	f04f 0820 	mov.w	r8, #32
   8079a:	e00e      	b.n	807ba <prints+0x36>
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
   8079c:	3101      	adds	r1, #1
   8079e:	3201      	adds	r2, #1
   807a0:	7810      	ldrb	r0, [r2, #0]
   807a2:	2800      	cmp	r0, #0
   807a4:	d1fa      	bne.n	8079c <prints+0x18>
		if (len >= width) width = 0;
   807a6:	42a9      	cmp	r1, r5
   807a8:	da01      	bge.n	807ae <prints+0x2a>
		else width -= len;
   807aa:	1a6d      	subs	r5, r5, r1
   807ac:	e000      	b.n	807b0 <prints+0x2c>
		if (len >= width) width = 0;
   807ae:	2500      	movs	r5, #0
		if (pad & PAD_ZERO) padchar = '0';
   807b0:	f013 0f02 	tst.w	r3, #2
   807b4:	d106      	bne.n	807c4 <prints+0x40>
	register int pc = 0, padchar = ' ';
   807b6:	f04f 0820 	mov.w	r8, #32
	}
	if (!(pad & PAD_RIGHT)) {
   807ba:	f013 0401 	ands.w	r4, r3, #1
   807be:	d00a      	beq.n	807d6 <prints+0x52>
	register int pc = 0, padchar = ' ';
   807c0:	2400      	movs	r4, #0
   807c2:	e010      	b.n	807e6 <prints+0x62>
		if (pad & PAD_ZERO) padchar = '0';
   807c4:	f04f 0830 	mov.w	r8, #48	; 0x30
   807c8:	e7f7      	b.n	807ba <prints+0x36>
		for ( ; width > 0; --width) {
			printchar (out, padchar);
   807ca:	4641      	mov	r1, r8
   807cc:	4638      	mov	r0, r7
   807ce:	4b0d      	ldr	r3, [pc, #52]	; (80804 <prints+0x80>)
   807d0:	4798      	blx	r3
			++pc;
   807d2:	3401      	adds	r4, #1
		for ( ; width > 0; --width) {
   807d4:	3d01      	subs	r5, #1
   807d6:	2d00      	cmp	r5, #0
   807d8:	dcf7      	bgt.n	807ca <prints+0x46>
   807da:	e004      	b.n	807e6 <prints+0x62>
		}
	}
	for ( ; *string ; ++string) {
		printchar (out, *string);
   807dc:	4638      	mov	r0, r7
   807de:	4b09      	ldr	r3, [pc, #36]	; (80804 <prints+0x80>)
   807e0:	4798      	blx	r3
		++pc;
   807e2:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
   807e4:	3601      	adds	r6, #1
   807e6:	7831      	ldrb	r1, [r6, #0]
   807e8:	2900      	cmp	r1, #0
   807ea:	d1f7      	bne.n	807dc <prints+0x58>
   807ec:	e005      	b.n	807fa <prints+0x76>
	}
	for ( ; width > 0; --width) {
		printchar (out, padchar);
   807ee:	4641      	mov	r1, r8
   807f0:	4638      	mov	r0, r7
   807f2:	4b04      	ldr	r3, [pc, #16]	; (80804 <prints+0x80>)
   807f4:	4798      	blx	r3
		++pc;
   807f6:	3401      	adds	r4, #1
	for ( ; width > 0; --width) {
   807f8:	3d01      	subs	r5, #1
   807fa:	2d00      	cmp	r5, #0
   807fc:	dcf7      	bgt.n	807ee <prints+0x6a>
	}

	return pc;
}
   807fe:	4620      	mov	r0, r4
   80800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80804:	00080775 	.word	0x00080775

00080808 <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
   80808:	b5f0      	push	{r4, r5, r6, r7, lr}
   8080a:	b085      	sub	sp, #20
   8080c:	4607      	mov	r7, r0
   8080e:	980c      	ldr	r0, [sp, #48]	; 0x30
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
	register unsigned int u = i;

	if (i == 0) {
   80810:	b151      	cbz	r1, 80828 <printi+0x20>
   80812:	461e      	mov	r6, r3
   80814:	460c      	mov	r4, r1
		print_buf[0] = '0';
		print_buf[1] = '\0';
		return prints (out, print_buf, width, pad);
	}

	if (sg && b == 10 && i < 0) {
   80816:	b113      	cbz	r3, 8081e <printi+0x16>
   80818:	2a0a      	cmp	r2, #10
   8081a:	d012      	beq.n	80842 <printi+0x3a>
	register int t, neg = 0, pc = 0;
   8081c:	2600      	movs	r6, #0
		neg = 1;
		u = -i;
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';
   8081e:	ad04      	add	r5, sp, #16
   80820:	2300      	movs	r3, #0
   80822:	f805 3d01 	strb.w	r3, [r5, #-1]!

	while (u) {
   80826:	e018      	b.n	8085a <printi+0x52>
		print_buf[0] = '0';
   80828:	2330      	movs	r3, #48	; 0x30
   8082a:	f88d 3004 	strb.w	r3, [sp, #4]
		print_buf[1] = '\0';
   8082e:	2300      	movs	r3, #0
   80830:	f88d 3005 	strb.w	r3, [sp, #5]
		return prints (out, print_buf, width, pad);
   80834:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80836:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   80838:	a901      	add	r1, sp, #4
   8083a:	4638      	mov	r0, r7
   8083c:	4c1b      	ldr	r4, [pc, #108]	; (808ac <printi+0xa4>)
   8083e:	47a0      	blx	r4
   80840:	e029      	b.n	80896 <printi+0x8e>
	if (sg && b == 10 && i < 0) {
   80842:	2900      	cmp	r1, #0
   80844:	db01      	blt.n	8084a <printi+0x42>
	register int t, neg = 0, pc = 0;
   80846:	2600      	movs	r6, #0
   80848:	e7e9      	b.n	8081e <printi+0x16>
		u = -i;
   8084a:	424c      	negs	r4, r1
		neg = 1;
   8084c:	2601      	movs	r6, #1
   8084e:	e7e6      	b.n	8081e <printi+0x16>
		t = u % b;
		if( t >= 10 )
			t += letbase - '0' - 10;
		*--s = t + '0';
   80850:	3330      	adds	r3, #48	; 0x30
   80852:	f805 3d01 	strb.w	r3, [r5, #-1]!
		u /= b;
   80856:	fbb4 f4f2 	udiv	r4, r4, r2
	while (u) {
   8085a:	b14c      	cbz	r4, 80870 <printi+0x68>
		t = u % b;
   8085c:	fbb4 f3f2 	udiv	r3, r4, r2
   80860:	fb02 4313 	mls	r3, r2, r3, r4
		if( t >= 10 )
   80864:	2b09      	cmp	r3, #9
   80866:	ddf3      	ble.n	80850 <printi+0x48>
			t += letbase - '0' - 10;
   80868:	f1a0 013a 	sub.w	r1, r0, #58	; 0x3a
   8086c:	440b      	add	r3, r1
   8086e:	e7ef      	b.n	80850 <printi+0x48>
	}

	if (neg) {
   80870:	b156      	cbz	r6, 80888 <printi+0x80>
		if( width && (pad & PAD_ZERO) ) {
   80872:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80874:	b11b      	cbz	r3, 8087e <printi+0x76>
   80876:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80878:	f013 0f02 	tst.w	r3, #2
   8087c:	d10d      	bne.n	8089a <printi+0x92>
			printchar (out, '-');
			++pc;
			--width;
		}
		else {
			*--s = '-';
   8087e:	232d      	movs	r3, #45	; 0x2d
   80880:	f805 3c01 	strb.w	r3, [r5, #-1]
   80884:	3d01      	subs	r5, #1
	register int t, neg = 0, pc = 0;
   80886:	2600      	movs	r6, #0
		}
	}

	return pc + prints (out, s, width, pad);
   80888:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8088a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   8088c:	4629      	mov	r1, r5
   8088e:	4638      	mov	r0, r7
   80890:	4c06      	ldr	r4, [pc, #24]	; (808ac <printi+0xa4>)
   80892:	47a0      	blx	r4
   80894:	4430      	add	r0, r6
}
   80896:	b005      	add	sp, #20
   80898:	bdf0      	pop	{r4, r5, r6, r7, pc}
			printchar (out, '-');
   8089a:	212d      	movs	r1, #45	; 0x2d
   8089c:	4638      	mov	r0, r7
   8089e:	4b04      	ldr	r3, [pc, #16]	; (808b0 <printi+0xa8>)
   808a0:	4798      	blx	r3
			--width;
   808a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   808a4:	3b01      	subs	r3, #1
   808a6:	930a      	str	r3, [sp, #40]	; 0x28
   808a8:	e7ee      	b.n	80888 <printi+0x80>
   808aa:	bf00      	nop
   808ac:	00080785 	.word	0x00080785
   808b0:	00080775 	.word	0x00080775

000808b4 <print>:

static int print( char **out, const char *format, va_list args )
{
   808b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   808b6:	b089      	sub	sp, #36	; 0x24
   808b8:	4606      	mov	r6, r0
   808ba:	460c      	mov	r4, r1
   808bc:	9205      	str	r2, [sp, #20]
	register int width, pad;
	register int pc = 0;
   808be:	2500      	movs	r5, #0
	char scr[2];

	for (; *format != 0; ++format) {
   808c0:	e081      	b.n	809c6 <print+0x112>
			++format;
			width = pad = 0;
			if (*format == '\0') break;
			if (*format == '%') goto out;
			if (*format == '-') {
				++format;
   808c2:	1ca2      	adds	r2, r4, #2
				pad = PAD_RIGHT;
   808c4:	2301      	movs	r3, #1
   808c6:	e08b      	b.n	809e0 <print+0x12c>
			}
			while (*format == '0') {
				++format;
   808c8:	3401      	adds	r4, #1
				pad |= PAD_ZERO;
   808ca:	f043 0302 	orr.w	r3, r3, #2
			while (*format == '0') {
   808ce:	7822      	ldrb	r2, [r4, #0]
   808d0:	2a30      	cmp	r2, #48	; 0x30
   808d2:	d0f9      	beq.n	808c8 <print+0x14>
   808d4:	2200      	movs	r2, #0
   808d6:	e006      	b.n	808e6 <print+0x32>
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
				width *= 10;
   808d8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   808dc:	0050      	lsls	r0, r2, #1
				width += *format - '0';
   808de:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   808e2:	4402      	add	r2, r0
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   808e4:	3401      	adds	r4, #1
   808e6:	7821      	ldrb	r1, [r4, #0]
   808e8:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
   808ec:	b2c0      	uxtb	r0, r0
   808ee:	2809      	cmp	r0, #9
   808f0:	d9f2      	bls.n	808d8 <print+0x24>
			}
			if( *format == 's' ) {
   808f2:	2973      	cmp	r1, #115	; 0x73
   808f4:	d018      	beq.n	80928 <print+0x74>
				register char *s = (char *)va_arg( args, int );
				pc += prints (out, s?s:"(null)", width, pad);
				continue;
			}
			if( *format == 'd' ) {
   808f6:	2964      	cmp	r1, #100	; 0x64
   808f8:	d022      	beq.n	80940 <print+0x8c>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
				continue;
			}
			if( *format == 'x' ) {
   808fa:	2978      	cmp	r1, #120	; 0x78
   808fc:	d02f      	beq.n	8095e <print+0xaa>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
				continue;
			}
			if( *format == 'X' ) {
   808fe:	2958      	cmp	r1, #88	; 0x58
   80900:	d03c      	beq.n	8097c <print+0xc8>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
				continue;
			}
			if( *format == 'u' ) {
   80902:	2975      	cmp	r1, #117	; 0x75
   80904:	d049      	beq.n	8099a <print+0xe6>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
				continue;
			}
			if( *format == 'c' ) {
   80906:	2963      	cmp	r1, #99	; 0x63
   80908:	d15c      	bne.n	809c4 <print+0x110>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
   8090a:	9905      	ldr	r1, [sp, #20]
   8090c:	1d08      	adds	r0, r1, #4
   8090e:	9005      	str	r0, [sp, #20]
   80910:	7809      	ldrb	r1, [r1, #0]
   80912:	f88d 101c 	strb.w	r1, [sp, #28]
				scr[1] = '\0';
   80916:	2100      	movs	r1, #0
   80918:	f88d 101d 	strb.w	r1, [sp, #29]
				pc += prints (out, scr, width, pad);
   8091c:	a907      	add	r1, sp, #28
   8091e:	4630      	mov	r0, r6
   80920:	4f34      	ldr	r7, [pc, #208]	; (809f4 <print+0x140>)
   80922:	47b8      	blx	r7
   80924:	4405      	add	r5, r0
				continue;
   80926:	e04d      	b.n	809c4 <print+0x110>
				register char *s = (char *)va_arg( args, int );
   80928:	9905      	ldr	r1, [sp, #20]
   8092a:	1d08      	adds	r0, r1, #4
   8092c:	9005      	str	r0, [sp, #20]
   8092e:	6809      	ldr	r1, [r1, #0]
				pc += prints (out, s?s:"(null)", width, pad);
   80930:	b121      	cbz	r1, 8093c <print+0x88>
   80932:	4630      	mov	r0, r6
   80934:	4f2f      	ldr	r7, [pc, #188]	; (809f4 <print+0x140>)
   80936:	47b8      	blx	r7
   80938:	4405      	add	r5, r0
				continue;
   8093a:	e043      	b.n	809c4 <print+0x110>
				pc += prints (out, s?s:"(null)", width, pad);
   8093c:	492e      	ldr	r1, [pc, #184]	; (809f8 <print+0x144>)
   8093e:	e7f8      	b.n	80932 <print+0x7e>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
   80940:	9905      	ldr	r1, [sp, #20]
   80942:	1d08      	adds	r0, r1, #4
   80944:	9005      	str	r0, [sp, #20]
   80946:	6809      	ldr	r1, [r1, #0]
   80948:	2061      	movs	r0, #97	; 0x61
   8094a:	9002      	str	r0, [sp, #8]
   8094c:	9301      	str	r3, [sp, #4]
   8094e:	9200      	str	r2, [sp, #0]
   80950:	2301      	movs	r3, #1
   80952:	220a      	movs	r2, #10
   80954:	4630      	mov	r0, r6
   80956:	4f29      	ldr	r7, [pc, #164]	; (809fc <print+0x148>)
   80958:	47b8      	blx	r7
   8095a:	4405      	add	r5, r0
				continue;
   8095c:	e032      	b.n	809c4 <print+0x110>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
   8095e:	9905      	ldr	r1, [sp, #20]
   80960:	1d08      	adds	r0, r1, #4
   80962:	9005      	str	r0, [sp, #20]
   80964:	6809      	ldr	r1, [r1, #0]
   80966:	2061      	movs	r0, #97	; 0x61
   80968:	9002      	str	r0, [sp, #8]
   8096a:	9301      	str	r3, [sp, #4]
   8096c:	9200      	str	r2, [sp, #0]
   8096e:	2300      	movs	r3, #0
   80970:	2210      	movs	r2, #16
   80972:	4630      	mov	r0, r6
   80974:	4f21      	ldr	r7, [pc, #132]	; (809fc <print+0x148>)
   80976:	47b8      	blx	r7
   80978:	4405      	add	r5, r0
				continue;
   8097a:	e023      	b.n	809c4 <print+0x110>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
   8097c:	9905      	ldr	r1, [sp, #20]
   8097e:	1d08      	adds	r0, r1, #4
   80980:	9005      	str	r0, [sp, #20]
   80982:	6809      	ldr	r1, [r1, #0]
   80984:	2041      	movs	r0, #65	; 0x41
   80986:	9002      	str	r0, [sp, #8]
   80988:	9301      	str	r3, [sp, #4]
   8098a:	9200      	str	r2, [sp, #0]
   8098c:	2300      	movs	r3, #0
   8098e:	2210      	movs	r2, #16
   80990:	4630      	mov	r0, r6
   80992:	4f1a      	ldr	r7, [pc, #104]	; (809fc <print+0x148>)
   80994:	47b8      	blx	r7
   80996:	4405      	add	r5, r0
				continue;
   80998:	e014      	b.n	809c4 <print+0x110>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
   8099a:	9905      	ldr	r1, [sp, #20]
   8099c:	1d08      	adds	r0, r1, #4
   8099e:	9005      	str	r0, [sp, #20]
   809a0:	6809      	ldr	r1, [r1, #0]
   809a2:	2061      	movs	r0, #97	; 0x61
   809a4:	9002      	str	r0, [sp, #8]
   809a6:	9301      	str	r3, [sp, #4]
   809a8:	9200      	str	r2, [sp, #0]
   809aa:	2300      	movs	r3, #0
   809ac:	220a      	movs	r2, #10
   809ae:	4630      	mov	r0, r6
   809b0:	4f12      	ldr	r7, [pc, #72]	; (809fc <print+0x148>)
   809b2:	47b8      	blx	r7
   809b4:	4405      	add	r5, r0
				continue;
   809b6:	e005      	b.n	809c4 <print+0x110>
			++format;
   809b8:	4614      	mov	r4, r2
			}
		}
		else {
		out:
			printchar (out, *format);
   809ba:	7821      	ldrb	r1, [r4, #0]
   809bc:	4630      	mov	r0, r6
   809be:	4b10      	ldr	r3, [pc, #64]	; (80a00 <print+0x14c>)
   809c0:	4798      	blx	r3
			++pc;
   809c2:	3501      	adds	r5, #1
	for (; *format != 0; ++format) {
   809c4:	3401      	adds	r4, #1
   809c6:	7823      	ldrb	r3, [r4, #0]
   809c8:	b163      	cbz	r3, 809e4 <print+0x130>
		if (*format == '%') {
   809ca:	2b25      	cmp	r3, #37	; 0x25
   809cc:	d1f5      	bne.n	809ba <print+0x106>
			++format;
   809ce:	1c62      	adds	r2, r4, #1
			if (*format == '\0') break;
   809d0:	7863      	ldrb	r3, [r4, #1]
   809d2:	b13b      	cbz	r3, 809e4 <print+0x130>
			if (*format == '%') goto out;
   809d4:	2b25      	cmp	r3, #37	; 0x25
   809d6:	d0ef      	beq.n	809b8 <print+0x104>
			if (*format == '-') {
   809d8:	2b2d      	cmp	r3, #45	; 0x2d
   809da:	f43f af72 	beq.w	808c2 <print+0xe>
			width = pad = 0;
   809de:	2300      	movs	r3, #0
   809e0:	4614      	mov	r4, r2
   809e2:	e774      	b.n	808ce <print+0x1a>
		}
	}
	if (out) **out = '\0';
   809e4:	b116      	cbz	r6, 809ec <print+0x138>
   809e6:	6833      	ldr	r3, [r6, #0]
   809e8:	2200      	movs	r2, #0
   809ea:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
}
   809ec:	4628      	mov	r0, r5
   809ee:	b009      	add	sp, #36	; 0x24
   809f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   809f2:	bf00      	nop
   809f4:	00080785 	.word	0x00080785
   809f8:	00080cc8 	.word	0x00080cc8
   809fc:	00080809 	.word	0x00080809
   80a00:	00080775 	.word	0x00080775

00080a04 <printf>:

int printf(const char *format, ...)
{
   80a04:	b40f      	push	{r0, r1, r2, r3}
   80a06:	b500      	push	{lr}
   80a08:	b083      	sub	sp, #12
   80a0a:	aa04      	add	r2, sp, #16
   80a0c:	f852 1b04 	ldr.w	r1, [r2], #4
        va_list args;
        
        va_start( args, format );
   80a10:	9201      	str	r2, [sp, #4]
        return print( 0, format, args );
   80a12:	2000      	movs	r0, #0
   80a14:	4b03      	ldr	r3, [pc, #12]	; (80a24 <printf+0x20>)
   80a16:	4798      	blx	r3
}
   80a18:	b003      	add	sp, #12
   80a1a:	f85d eb04 	ldr.w	lr, [sp], #4
   80a1e:	b004      	add	sp, #16
   80a20:	4770      	bx	lr
   80a22:	bf00      	nop
   80a24:	000808b5 	.word	0x000808b5

00080a28 <configure_uart>:
	uint32_t ul_sr;

/*
Initialize UART ring buffer as empty
*/
rx_buffer.head=0;
   80a28:	4b16      	ldr	r3, [pc, #88]	; (80a84 <configure_uart+0x5c>)
   80a2a:	2200      	movs	r2, #0
   80a2c:	701a      	strb	r2, [r3, #0]
rx_buffer.tail=0;
   80a2e:	705a      	strb	r2, [r3, #1]
/*
Initialize UART communication
*/
	// Pin configuration
	// Disable interrupts on Uart receive (URXD) and transmit (UTXD) pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80a30:	4b15      	ldr	r3, [pc, #84]	; (80a88 <configure_uart+0x60>)
   80a32:	f44f 7140 	mov.w	r1, #768	; 0x300
   80a36:	6459      	str	r1, [r3, #68]	; 0x44

	// Disable the Parallel IO (PIO) of the URXD and UTXD pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80a38:	6059      	str	r1, [r3, #4]

	// Read current peripheral AB select register and set the UTXD and URXD pins to 0 (UART is connected as peripheral A)
	ul_sr = PIOA->PIO_ABSR;
   80a3a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
	PIOA->PIO_ABSR &= ~(PIO_PA8A_URXD | PIO_PA9A_UTXD) & ul_sr;
   80a3c:	6f18      	ldr	r0, [r3, #112]	; 0x70
   80a3e:	4002      	ands	r2, r0
   80a40:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   80a44:	671a      	str	r2, [r3, #112]	; 0x70

	// Enable pull up resistor on URXD and UTXD pin
	PIOA->PIO_PUER = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80a46:	6659      	str	r1, [r3, #100]	; 0x64

	// Uart configuration
	
	// Enable the peripheral UART controller in Power Management Controller (PMC)
	PMC->PMC_PCER0 = 1 << ID_UART;
   80a48:	f44f 7280 	mov.w	r2, #256	; 0x100
   80a4c:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   80a50:	611a      	str	r2, [r3, #16]

	// Reset and disable receiver and transmitter
	UART->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX | UART_CR_RXDIS | UART_CR_TXDIS;
   80a52:	f503 7300 	add.w	r3, r3, #512	; 0x200
   80a56:	21ac      	movs	r1, #172	; 0xac
   80a58:	6019      	str	r1, [r3, #0]

	// Set the baudrate
	UART->UART_BRGR = 547; // MCK / 16 * x = BaudRate (write x into UART_BRGR)  
   80a5a:	f240 2123 	movw	r1, #547	; 0x223
   80a5e:	6219      	str	r1, [r3, #32]

	// No parity bits
	UART->UART_MR = UART_MR_PAR_NO | UART_MR_CHMODE_NORMAL;	
   80a60:	f44f 6100 	mov.w	r1, #2048	; 0x800
   80a64:	6059      	str	r1, [r3, #4]

	// Disable PDC channel
	UART->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80a66:	f240 2102 	movw	r1, #514	; 0x202
   80a6a:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120

	// Configure interrupts on receive ready and errors
	UART->UART_IDR = 0xFFFFFFFF;
   80a6e:	f04f 31ff 	mov.w	r1, #4294967295
   80a72:	60d9      	str	r1, [r3, #12]
	UART->UART_IER = UART_IER_RXRDY | UART_IER_OVRE | UART_IER_FRAME | UART_IER_PARE;
   80a74:	21e1      	movs	r1, #225	; 0xe1
   80a76:	6099      	str	r1, [r3, #8]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80a78:	4904      	ldr	r1, [pc, #16]	; (80a8c <configure_uart+0x64>)
   80a7a:	600a      	str	r2, [r1, #0]

	// Enable UART interrupt in the Nested Vectored Interrupt Controller(NVIC)
	NVIC_EnableIRQ((IRQn_Type) ID_UART);

	// Enable UART receiver and transmitter
	UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80a7c:	2250      	movs	r2, #80	; 0x50
   80a7e:	601a      	str	r2, [r3, #0]
   80a80:	4770      	bx	lr
   80a82:	bf00      	nop
   80a84:	20000454 	.word	0x20000454
   80a88:	400e0e00 	.word	0x400e0e00
   80a8c:	e000e100 	.word	0xe000e100

00080a90 <uart_putchar>:
 * \retval Success(0) or failure(1).
 */
int uart_putchar(const uint8_t c)
{
	// Check if the transmitter is ready
	if((UART->UART_SR & UART_SR_TXRDY) != UART_SR_TXRDY)
   80a90:	4b07      	ldr	r3, [pc, #28]	; (80ab0 <uart_putchar+0x20>)
   80a92:	695b      	ldr	r3, [r3, #20]
   80a94:	f013 0f02 	tst.w	r3, #2
   80a98:	d008      	beq.n	80aac <uart_putchar+0x1c>
	return 1;

	// Send the character
	UART->UART_THR = c;
   80a9a:	4b05      	ldr	r3, [pc, #20]	; (80ab0 <uart_putchar+0x20>)
   80a9c:	61d8      	str	r0, [r3, #28]
	while(!((UART->UART_SR) & UART_SR_TXEMPTY)); // Wait for the character to be sent, can implement ring buffer to remove the wait
   80a9e:	4b04      	ldr	r3, [pc, #16]	; (80ab0 <uart_putchar+0x20>)
   80aa0:	695b      	ldr	r3, [r3, #20]
   80aa2:	f413 7f00 	tst.w	r3, #512	; 0x200
   80aa6:	d0fa      	beq.n	80a9e <uart_putchar+0xe>
	return 0;
   80aa8:	2000      	movs	r0, #0
   80aaa:	4770      	bx	lr
	return 1;
   80aac:	2001      	movs	r0, #1
}
   80aae:	4770      	bx	lr
   80ab0:	400e0800 	.word	0x400e0800

00080ab4 <UART_Handler>:

void UART_Handler(void)
{
   80ab4:	b508      	push	{r3, lr}
	uint32_t status = UART->UART_SR;
   80ab6:	4b15      	ldr	r3, [pc, #84]	; (80b0c <UART_Handler+0x58>)
   80ab8:	695b      	ldr	r3, [r3, #20]
	
	//Reset UART at overflow error and frame error
	if(status & (UART_SR_OVRE | UART_SR_FRAME | UART_SR_PARE))
   80aba:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   80abe:	d003      	beq.n	80ac8 <UART_Handler+0x14>
	{
		UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN | UART_CR_RSTSTA;
   80ac0:	f44f 71a8 	mov.w	r1, #336	; 0x150
   80ac4:	4a11      	ldr	r2, [pc, #68]	; (80b0c <UART_Handler+0x58>)
   80ac6:	6011      	str	r1, [r2, #0]
	}
	
	//Check if message is ready to be received
	if(status & UART_SR_RXRDY)
   80ac8:	f013 0f01 	tst.w	r3, #1
   80acc:	d012      	beq.n	80af4 <UART_Handler+0x40>
	{
		//Check if receive ring buffer is full and 
		if((rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE == rx_buffer.head)
   80ace:	4810      	ldr	r0, [pc, #64]	; (80b10 <UART_Handler+0x5c>)
   80ad0:	7842      	ldrb	r2, [r0, #1]
   80ad2:	1c53      	adds	r3, r2, #1
   80ad4:	4259      	negs	r1, r3
   80ad6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   80ada:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   80ade:	bf58      	it	pl
   80ae0:	424b      	negpl	r3, r1
   80ae2:	7801      	ldrb	r1, [r0, #0]
   80ae4:	428b      	cmp	r3, r1
   80ae6:	d006      	beq.n	80af6 <UART_Handler+0x42>
		{
			printf("ERR: UART RX buffer is full\n\r");
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
			return;
		}
		rx_buffer.data[rx_buffer.tail] = UART->UART_RHR;
   80ae8:	4908      	ldr	r1, [pc, #32]	; (80b0c <UART_Handler+0x58>)
   80aea:	6988      	ldr	r0, [r1, #24]
   80aec:	4908      	ldr	r1, [pc, #32]	; (80b10 <UART_Handler+0x5c>)
   80aee:	440a      	add	r2, r1
   80af0:	7090      	strb	r0, [r2, #2]
		rx_buffer.tail = (rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE;
   80af2:	704b      	strb	r3, [r1, #1]
   80af4:	bd08      	pop	{r3, pc}
			printf("ERR: UART RX buffer is full\n\r");
   80af6:	4807      	ldr	r0, [pc, #28]	; (80b14 <UART_Handler+0x60>)
   80af8:	4b07      	ldr	r3, [pc, #28]	; (80b18 <UART_Handler+0x64>)
   80afa:	4798      	blx	r3
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
   80afc:	4b04      	ldr	r3, [pc, #16]	; (80b10 <UART_Handler+0x5c>)
   80afe:	7859      	ldrb	r1, [r3, #1]
   80b00:	4a02      	ldr	r2, [pc, #8]	; (80b0c <UART_Handler+0x58>)
   80b02:	6992      	ldr	r2, [r2, #24]
   80b04:	440b      	add	r3, r1
   80b06:	709a      	strb	r2, [r3, #2]
			return;
   80b08:	bd08      	pop	{r3, pc}
   80b0a:	bf00      	nop
   80b0c:	400e0800 	.word	0x400e0800
   80b10:	20000454 	.word	0x20000454
   80b14:	00080cd0 	.word	0x00080cd0
   80b18:	00080a05 	.word	0x00080a05

00080b1c <__libc_init_array>:
   80b1c:	b570      	push	{r4, r5, r6, lr}
   80b1e:	4e0f      	ldr	r6, [pc, #60]	; (80b5c <__libc_init_array+0x40>)
   80b20:	4d0f      	ldr	r5, [pc, #60]	; (80b60 <__libc_init_array+0x44>)
   80b22:	1b76      	subs	r6, r6, r5
   80b24:	10b6      	asrs	r6, r6, #2
   80b26:	bf18      	it	ne
   80b28:	2400      	movne	r4, #0
   80b2a:	d005      	beq.n	80b38 <__libc_init_array+0x1c>
   80b2c:	3401      	adds	r4, #1
   80b2e:	f855 3b04 	ldr.w	r3, [r5], #4
   80b32:	4798      	blx	r3
   80b34:	42a6      	cmp	r6, r4
   80b36:	d1f9      	bne.n	80b2c <__libc_init_array+0x10>
   80b38:	4e0a      	ldr	r6, [pc, #40]	; (80b64 <__libc_init_array+0x48>)
   80b3a:	4d0b      	ldr	r5, [pc, #44]	; (80b68 <__libc_init_array+0x4c>)
   80b3c:	f000 f8da 	bl	80cf4 <_init>
   80b40:	1b76      	subs	r6, r6, r5
   80b42:	10b6      	asrs	r6, r6, #2
   80b44:	bf18      	it	ne
   80b46:	2400      	movne	r4, #0
   80b48:	d006      	beq.n	80b58 <__libc_init_array+0x3c>
   80b4a:	3401      	adds	r4, #1
   80b4c:	f855 3b04 	ldr.w	r3, [r5], #4
   80b50:	4798      	blx	r3
   80b52:	42a6      	cmp	r6, r4
   80b54:	d1f9      	bne.n	80b4a <__libc_init_array+0x2e>
   80b56:	bd70      	pop	{r4, r5, r6, pc}
   80b58:	bd70      	pop	{r4, r5, r6, pc}
   80b5a:	bf00      	nop
   80b5c:	00080d00 	.word	0x00080d00
   80b60:	00080d00 	.word	0x00080d00
   80b64:	00080d08 	.word	0x00080d08
   80b68:	00080d00 	.word	0x00080d00

00080b6c <register_fini>:
   80b6c:	4b02      	ldr	r3, [pc, #8]	; (80b78 <register_fini+0xc>)
   80b6e:	b113      	cbz	r3, 80b76 <register_fini+0xa>
   80b70:	4802      	ldr	r0, [pc, #8]	; (80b7c <register_fini+0x10>)
   80b72:	f000 b805 	b.w	80b80 <atexit>
   80b76:	4770      	bx	lr
   80b78:	00000000 	.word	0x00000000
   80b7c:	00080b8d 	.word	0x00080b8d

00080b80 <atexit>:
   80b80:	2300      	movs	r3, #0
   80b82:	4601      	mov	r1, r0
   80b84:	461a      	mov	r2, r3
   80b86:	4618      	mov	r0, r3
   80b88:	f000 b81e 	b.w	80bc8 <__register_exitproc>

00080b8c <__libc_fini_array>:
   80b8c:	b538      	push	{r3, r4, r5, lr}
   80b8e:	4c0a      	ldr	r4, [pc, #40]	; (80bb8 <__libc_fini_array+0x2c>)
   80b90:	4d0a      	ldr	r5, [pc, #40]	; (80bbc <__libc_fini_array+0x30>)
   80b92:	1b64      	subs	r4, r4, r5
   80b94:	10a4      	asrs	r4, r4, #2
   80b96:	d00a      	beq.n	80bae <__libc_fini_array+0x22>
   80b98:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   80b9c:	3b01      	subs	r3, #1
   80b9e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   80ba2:	3c01      	subs	r4, #1
   80ba4:	f855 3904 	ldr.w	r3, [r5], #-4
   80ba8:	4798      	blx	r3
   80baa:	2c00      	cmp	r4, #0
   80bac:	d1f9      	bne.n	80ba2 <__libc_fini_array+0x16>
   80bae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   80bb2:	f000 b8a9 	b.w	80d08 <_fini>
   80bb6:	bf00      	nop
   80bb8:	00080d18 	.word	0x00080d18
   80bbc:	00080d14 	.word	0x00080d14

00080bc0 <__retarget_lock_acquire_recursive>:
   80bc0:	4770      	bx	lr
   80bc2:	bf00      	nop

00080bc4 <__retarget_lock_release_recursive>:
   80bc4:	4770      	bx	lr
   80bc6:	bf00      	nop

00080bc8 <__register_exitproc>:
   80bc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80bcc:	4d2c      	ldr	r5, [pc, #176]	; (80c80 <__register_exitproc+0xb8>)
   80bce:	4606      	mov	r6, r0
   80bd0:	6828      	ldr	r0, [r5, #0]
   80bd2:	4698      	mov	r8, r3
   80bd4:	460f      	mov	r7, r1
   80bd6:	4691      	mov	r9, r2
   80bd8:	f7ff fff2 	bl	80bc0 <__retarget_lock_acquire_recursive>
   80bdc:	4b29      	ldr	r3, [pc, #164]	; (80c84 <__register_exitproc+0xbc>)
   80bde:	681c      	ldr	r4, [r3, #0]
   80be0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   80be4:	2b00      	cmp	r3, #0
   80be6:	d03e      	beq.n	80c66 <__register_exitproc+0x9e>
   80be8:	685a      	ldr	r2, [r3, #4]
   80bea:	2a1f      	cmp	r2, #31
   80bec:	dc1c      	bgt.n	80c28 <__register_exitproc+0x60>
   80bee:	f102 0e01 	add.w	lr, r2, #1
   80bf2:	b176      	cbz	r6, 80c12 <__register_exitproc+0x4a>
   80bf4:	2101      	movs	r1, #1
   80bf6:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   80bfa:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   80bfe:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   80c02:	4091      	lsls	r1, r2
   80c04:	4308      	orrs	r0, r1
   80c06:	2e02      	cmp	r6, #2
   80c08:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   80c0c:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   80c10:	d023      	beq.n	80c5a <__register_exitproc+0x92>
   80c12:	3202      	adds	r2, #2
   80c14:	f8c3 e004 	str.w	lr, [r3, #4]
   80c18:	6828      	ldr	r0, [r5, #0]
   80c1a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   80c1e:	f7ff ffd1 	bl	80bc4 <__retarget_lock_release_recursive>
   80c22:	2000      	movs	r0, #0
   80c24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80c28:	4b17      	ldr	r3, [pc, #92]	; (80c88 <__register_exitproc+0xc0>)
   80c2a:	b30b      	cbz	r3, 80c70 <__register_exitproc+0xa8>
   80c2c:	f44f 70c8 	mov.w	r0, #400	; 0x190
   80c30:	f3af 8000 	nop.w
   80c34:	4603      	mov	r3, r0
   80c36:	b1d8      	cbz	r0, 80c70 <__register_exitproc+0xa8>
   80c38:	2000      	movs	r0, #0
   80c3a:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   80c3e:	f04f 0e01 	mov.w	lr, #1
   80c42:	6058      	str	r0, [r3, #4]
   80c44:	6019      	str	r1, [r3, #0]
   80c46:	4602      	mov	r2, r0
   80c48:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   80c4c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   80c50:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   80c54:	2e00      	cmp	r6, #0
   80c56:	d0dc      	beq.n	80c12 <__register_exitproc+0x4a>
   80c58:	e7cc      	b.n	80bf4 <__register_exitproc+0x2c>
   80c5a:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   80c5e:	4301      	orrs	r1, r0
   80c60:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   80c64:	e7d5      	b.n	80c12 <__register_exitproc+0x4a>
   80c66:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   80c6a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   80c6e:	e7bb      	b.n	80be8 <__register_exitproc+0x20>
   80c70:	6828      	ldr	r0, [r5, #0]
   80c72:	f7ff ffa7 	bl	80bc4 <__retarget_lock_release_recursive>
   80c76:	f04f 30ff 	mov.w	r0, #4294967295
   80c7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80c7e:	bf00      	nop
   80c80:	20000430 	.word	0x20000430
   80c84:	00080cf0 	.word	0x00080cf0
   80c88:	00000000 	.word	0x00000000
   80c8c:	304e4143 	.word	0x304e4143
   80c90:	73656d20 	.word	0x73656d20
   80c94:	65676173 	.word	0x65676173
   80c98:	72726120 	.word	0x72726120
   80c9c:	64657669 	.word	0x64657669
   80ca0:	206e6920 	.word	0x206e6920
   80ca4:	2d6e6f6e 	.word	0x2d6e6f6e
   80ca8:	64657375 	.word	0x64657375
   80cac:	69616d20 	.word	0x69616d20
   80cb0:	786f626c 	.word	0x786f626c
   80cb4:	00000d0a 	.word	0x00000d0a
   80cb8:	4c4c4548 	.word	0x4c4c4548
   80cbc:	000d0a4f 	.word	0x000d0a4f
   80cc0:	664c4548 	.word	0x664c4548
   80cc4:	000d0a66 	.word	0x000d0a66
   80cc8:	6c756e28 	.word	0x6c756e28
   80ccc:	0000296c 	.word	0x0000296c
   80cd0:	3a525245 	.word	0x3a525245
   80cd4:	52415520 	.word	0x52415520
   80cd8:	58522054 	.word	0x58522054
   80cdc:	66756220 	.word	0x66756220
   80ce0:	20726566 	.word	0x20726566
   80ce4:	66207369 	.word	0x66207369
   80ce8:	0a6c6c75 	.word	0x0a6c6c75
   80cec:	0000000d 	.word	0x0000000d

00080cf0 <_global_impure_ptr>:
   80cf0:	20000008                                ... 

00080cf4 <_init>:
   80cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80cf6:	bf00      	nop
   80cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   80cfa:	bc08      	pop	{r3}
   80cfc:	469e      	mov	lr, r3
   80cfe:	4770      	bx	lr

00080d00 <__init_array_start>:
   80d00:	00080b6d 	.word	0x00080b6d

00080d04 <__frame_dummy_init_array_entry>:
   80d04:	00080119                                ....

00080d08 <_fini>:
   80d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80d0a:	bf00      	nop
   80d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   80d0e:	bc08      	pop	{r3}
   80d10:	469e      	mov	lr, r3
   80d12:	4770      	bx	lr

00080d14 <__fini_array_start>:
   80d14:	000800f5 	.word	0x000800f5
