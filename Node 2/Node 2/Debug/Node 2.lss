
Node 2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c5c  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20000000  00080c5c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000084  20000434  00081090  00020434  2**2
                  ALLOC
  3 .stack        00000400  200004b8  00081114  00020434  2**0
                  ALLOC
  4 .heap         00000200  200008b8  00081514  00020434  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002045d  2**0
                  CONTENTS, READONLY
  7 .debug_info   00008467  00000000  00000000  000204b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001378  00000000  00000000  0002891d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000ee6  00000000  00000000  00029c95  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000210  00000000  00000000  0002ab7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000190  00000000  00000000  0002ad8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000135d3  00000000  00000000  0002af1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00004f4e  00000000  00000000  0003e4ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000564f9  00000000  00000000  0004343c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000598  00000000  00000000  00099938  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	b8 08 00 20 71 03 08 00 6d 03 08 00 6d 03 08 00     ... q...m...m...
   80010:	6d 03 08 00 6d 03 08 00 6d 03 08 00 00 00 00 00     m...m...m.......
	...
   8002c:	6d 03 08 00 6d 03 08 00 00 00 00 00 6d 03 08 00     m...m.......m...
   8003c:	6d 03 08 00 6d 03 08 00 6d 03 08 00 6d 03 08 00     m...m...m...m...
   8004c:	6d 03 08 00 6d 03 08 00 6d 03 08 00 6d 03 08 00     m...m...m...m...
   8005c:	6d 03 08 00 dd 09 08 00 6d 03 08 00 00 00 00 00     m.......m.......
   8006c:	6d 03 08 00 6d 03 08 00 6d 03 08 00 6d 03 08 00     m...m...m...m...
	...
   80084:	6d 03 08 00 6d 03 08 00 6d 03 08 00 6d 03 08 00     m...m...m...m...
   80094:	6d 03 08 00 6d 03 08 00 6d 03 08 00 6d 03 08 00     m...m...m...m...
   800a4:	00 00 00 00 6d 03 08 00 6d 03 08 00 6d 03 08 00     ....m...m...m...
   800b4:	6d 03 08 00 6d 03 08 00 6d 03 08 00 6d 03 08 00     m...m...m...m...
   800c4:	6d 03 08 00 6d 03 08 00 6d 03 08 00 6d 03 08 00     m...m...m...m...
   800d4:	6d 03 08 00 6d 03 08 00 6d 03 08 00 6d 03 08 00     m...m...m...m...
   800e4:	6d 03 08 00 6d 03 08 00 d9 02 08 00 6d 03 08 00     m...m.......m...

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20000434 	.word	0x20000434
   80110:	00000000 	.word	0x00000000
   80114:	00080c5c 	.word	0x00080c5c

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00080c5c 	.word	0x00080c5c
   80154:	20000438 	.word	0x20000438
   80158:	00080c5c 	.word	0x00080c5c
   8015c:	00000000 	.word	0x00000000

00080160 <can_init>:
 * \retval Success(0) or failure(1)
 */


uint8_t can_init(uint32_t can_br, uint8_t num_tx_mb, uint8_t num_rx_mb)
{
   80160:	b4f0      	push	{r4, r5, r6, r7}
	
	//Make sure num_rx_mb and num_tx_mb is valid
	if(num_rx_mb > 8 | num_tx_mb > 8 | num_rx_mb + num_tx_mb > 8)
   80162:	1857      	adds	r7, r2, r1
   80164:	2f08      	cmp	r7, #8
   80166:	bfd4      	ite	le
   80168:	2300      	movle	r3, #0
   8016a:	2301      	movgt	r3, #1
   8016c:	2908      	cmp	r1, #8
   8016e:	bf98      	it	ls
   80170:	2a08      	cmpls	r2, #8
   80172:	d85c      	bhi.n	8022e <can_init+0xce>
   80174:	460d      	mov	r5, r1
   80176:	2b00      	cmp	r3, #0
   80178:	d159      	bne.n	8022e <can_init+0xce>


	uint32_t ul_status; 
	
	//Disable can
	CAN0->CAN_MR &= ~CAN_MR_CANEN; 
   8017a:	4a2e      	ldr	r2, [pc, #184]	; (80234 <can_init+0xd4>)
   8017c:	6813      	ldr	r3, [r2, #0]
   8017e:	f023 0301 	bic.w	r3, r3, #1
   80182:	6013      	str	r3, [r2, #0]
	//Clear status register on read
	ul_status = CAN0->CAN_SR; 
   80184:	6913      	ldr	r3, [r2, #16]
	
	
	// Disable interrupts on CANH and CANL pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80186:	4b2c      	ldr	r3, [pc, #176]	; (80238 <can_init+0xd8>)
   80188:	f44f 7440 	mov.w	r4, #768	; 0x300
   8018c:	645c      	str	r4, [r3, #68]	; 0x44
	
	//Select CAN0 RX and TX in PIOA
	uint32_t ul_sr = PIOA->PIO_ABSR;
   8018e:	6f1c      	ldr	r4, [r3, #112]	; 0x70
	PIOA->PIO_ABSR = ~(PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0) & ul_sr;
   80190:	f024 0403 	bic.w	r4, r4, #3
   80194:	671c      	str	r4, [r3, #112]	; 0x70
	
	// Disable the Parallel IO (PIO) of the Rx and Tx pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0;
   80196:	2403      	movs	r4, #3
   80198:	605c      	str	r4, [r3, #4]
	
	// Enable pull up on CANH and CANL pin
	PIOA->PIO_PUER = (PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0);
   8019a:	665c      	str	r4, [r3, #100]	; 0x64
	
	
	//Enable Clock for CAN0 in PMC
	PMC->PMC_PCR = PMC_PCR_EN | (0 << PMC_PCR_DIV_Pos) | PMC_PCR_CMD | (ID_CAN0 << PMC_PCR_PID_Pos); // DIV = 1(can clk = MCK/2), CMD = 1 (write), PID = 2B (CAN0)
   8019c:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   801a0:	4c26      	ldr	r4, [pc, #152]	; (8023c <can_init+0xdc>)
   801a2:	f8c3 410c 	str.w	r4, [r3, #268]	; 0x10c
	PMC->PMC_PCER1 |= 1 << (ID_CAN0 - 32);
   801a6:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
   801aa:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
   801ae:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	
	//Set baudrate, Phase1, phase2 and propagation delay for can bus. Must match on all nodes!
	
	CAN0->CAN_BR = can_br; 
   801b2:	6150      	str	r0, [r2, #20]
	//
	

	/****** Start of mailbox configuration ******/

	uint32_t can_ier = 0;
   801b4:	2400      	movs	r4, #0

	/* Configure receive mailboxes */
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   801b6:	e019      	b.n	801ec <can_init+0x8c>
	{
		CAN0->CAN_MB[n].CAN_MAM = 0; //Accept all messages
   801b8:	481e      	ldr	r0, [pc, #120]	; (80234 <can_init+0xd4>)
   801ba:	f101 0310 	add.w	r3, r1, #16
   801be:	015b      	lsls	r3, r3, #5
   801c0:	18c2      	adds	r2, r0, r3
   801c2:	2600      	movs	r6, #0
   801c4:	6056      	str	r6, [r2, #4]
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   801c6:	eb00 1241 	add.w	r2, r0, r1, lsl #5
   801ca:	f04f 5600 	mov.w	r6, #536870912	; 0x20000000
   801ce:	f8c2 6208 	str.w	r6, [r2, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_RX);
   801d2:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
   801d6:	50c6      	str	r6, [r0, r3]
		CAN0->CAN_MB[n].CAN_MCR |= CAN_MCR_MTCR;
   801d8:	f8d2 321c 	ldr.w	r3, [r2, #540]	; 0x21c
   801dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   801e0:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c

		can_ier |= 1 << n; //Enable interrupt on rx mailbox
   801e4:	2301      	movs	r3, #1
   801e6:	408b      	lsls	r3, r1
   801e8:	431c      	orrs	r4, r3
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   801ea:	3101      	adds	r1, #1
   801ec:	42b9      	cmp	r1, r7
   801ee:	dde3      	ble.n	801b8 <can_init+0x58>
   801f0:	2300      	movs	r3, #0
   801f2:	e00d      	b.n	80210 <can_init+0xb0>
	}
	
	/*Configure transmit mailboxes */
	for (int n = 0; n < num_tx_mb; n++)
	{
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   801f4:	490f      	ldr	r1, [pc, #60]	; (80234 <can_init+0xd4>)
   801f6:	eb01 1243 	add.w	r2, r1, r3, lsl #5
   801fa:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
   801fe:	f8c2 0208 	str.w	r0, [r2, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_TX);
   80202:	f103 0210 	add.w	r2, r3, #16
   80206:	0152      	lsls	r2, r2, #5
   80208:	f04f 7040 	mov.w	r0, #50331648	; 0x3000000
   8020c:	5088      	str	r0, [r1, r2]
	for (int n = 0; n < num_tx_mb; n++)
   8020e:	3301      	adds	r3, #1
   80210:	42ab      	cmp	r3, r5
   80212:	dbef      	blt.n	801f4 <can_init+0x94>
	}
	
	/****** End of mailbox configuraion ******/

	//Enable interrupt on receive mailboxes
	CAN0->CAN_IER = can_ier;
   80214:	4b07      	ldr	r3, [pc, #28]	; (80234 <can_init+0xd4>)
   80216:	605c      	str	r4, [r3, #4]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80218:	f44f 6100 	mov.w	r1, #2048	; 0x800
   8021c:	4a08      	ldr	r2, [pc, #32]	; (80240 <can_init+0xe0>)
   8021e:	6051      	str	r1, [r2, #4]

	//Enable interrupt in NVIC 
	NVIC_EnableIRQ(ID_CAN0);

	//enable CAN
	CAN0->CAN_MR |= CAN_MR_CANEN;
   80220:	681a      	ldr	r2, [r3, #0]
   80222:	f042 0201 	orr.w	r2, r2, #1
   80226:	601a      	str	r2, [r3, #0]

	return 0;
   80228:	2000      	movs	r0, #0
}
   8022a:	bcf0      	pop	{r4, r5, r6, r7}
   8022c:	4770      	bx	lr
		return 1; //Too many mailboxes is configured
   8022e:	2001      	movs	r0, #1
   80230:	e7fb      	b.n	8022a <can_init+0xca>
   80232:	bf00      	nop
   80234:	400b4000 	.word	0x400b4000
   80238:	400e0e00 	.word	0x400e0e00
   8023c:	1000102b 	.word	0x1000102b
   80240:	e000e100 	.word	0xe000e100

00080244 <can_init_def_tx_rx_mb>:
{
   80244:	b508      	push	{r3, lr}
	return can_init(can_br, 1, 2);
   80246:	2202      	movs	r2, #2
   80248:	2101      	movs	r1, #1
   8024a:	4b01      	ldr	r3, [pc, #4]	; (80250 <can_init_def_tx_rx_mb+0xc>)
   8024c:	4798      	blx	r3
}
   8024e:	bd08      	pop	{r3, pc}
   80250:	00080161 	.word	0x00080161

00080254 <can_receive>:
 * \retval Success(0) or failure(1)
 */
uint8_t can_receive(CAN_MESSAGE* can_msg, uint8_t rx_mb_id)
{
	//Check that mailbox is ready
	if(CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MRDY)
   80254:	014b      	lsls	r3, r1, #5
   80256:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   8025a:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   8025e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   80262:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   80266:	d033      	beq.n	802d0 <can_receive+0x7c>
{
   80268:	b470      	push	{r4, r5, r6}
	{
		//Get data from CAN mailbox
		uint32_t data_low = CAN0->CAN_MB[rx_mb_id].CAN_MDL;
   8026a:	014b      	lsls	r3, r1, #5
   8026c:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   80270:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   80274:	f8d3 4214 	ldr.w	r4, [r3, #532]	; 0x214
		uint32_t data_high = CAN0->CAN_MB[rx_mb_id].CAN_MDH;
   80278:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
		
		//Get message ID
		can_msg->id = (uint16_t)((CAN0->CAN_MB[rx_mb_id].CAN_MID & CAN_MID_MIDvA_Msk) >> CAN_MID_MIDvA_Pos);
   8027c:	f8d3 5208 	ldr.w	r5, [r3, #520]	; 0x208
   80280:	f3c5 458a 	ubfx	r5, r5, #18, #11
   80284:	8005      	strh	r5, [r0, #0]
		
		//Get data length
		can_msg->data_length = (uint8_t)((CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MDLC_Msk) >> CAN_MSR_MDLC_Pos);
   80286:	f8d3 5210 	ldr.w	r5, [r3, #528]	; 0x210
   8028a:	f3c5 4503 	ubfx	r5, r5, #16, #4
   8028e:	7085      	strb	r5, [r0, #2]
		
		//Put data in CAN_MESSAGE object
		for(int i = 0; i < can_msg->data_length;i++)
   80290:	2300      	movs	r3, #0
   80292:	e003      	b.n	8029c <can_receive+0x48>
				can_msg->data[i] = (char)(data_low & 0xff);
				data_low = data_low >> 8;
			}
			else
			{
				can_msg->data[i] = (uint8_t)(data_high & 0xff);
   80294:	18c6      	adds	r6, r0, r3
   80296:	70f2      	strb	r2, [r6, #3]
				data_high = data_high >> 8;
   80298:	0a12      	lsrs	r2, r2, #8
		for(int i = 0; i < can_msg->data_length;i++)
   8029a:	3301      	adds	r3, #1
   8029c:	42ab      	cmp	r3, r5
   8029e:	da05      	bge.n	802ac <can_receive+0x58>
			if(i < 4)
   802a0:	2b03      	cmp	r3, #3
   802a2:	dcf7      	bgt.n	80294 <can_receive+0x40>
				can_msg->data[i] = (char)(data_low & 0xff);
   802a4:	18c6      	adds	r6, r0, r3
   802a6:	70f4      	strb	r4, [r6, #3]
				data_low = data_low >> 8;
   802a8:	0a24      	lsrs	r4, r4, #8
   802aa:	e7f6      	b.n	8029a <can_receive+0x46>
			}
		}
		
		//Reset for new receive
		CAN0->CAN_MB[rx_mb_id].CAN_MMR = CAN_MMR_MOT_MB_RX;
   802ac:	4b09      	ldr	r3, [pc, #36]	; (802d4 <can_receive+0x80>)
   802ae:	f101 0210 	add.w	r2, r1, #16
   802b2:	0152      	lsls	r2, r2, #5
   802b4:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   802b8:	5098      	str	r0, [r3, r2]
		CAN0->CAN_MB[rx_mb_id].CAN_MCR |= CAN_MCR_MTCR;
   802ba:	eb03 1141 	add.w	r1, r3, r1, lsl #5
   802be:	f8d1 321c 	ldr.w	r3, [r1, #540]	; 0x21c
   802c2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   802c6:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
		return 0;
   802ca:	2000      	movs	r0, #0
	}
	else //Mailbox busy
	{
		return 1;
	}
}
   802cc:	bc70      	pop	{r4, r5, r6}
   802ce:	4770      	bx	lr
		return 1;
   802d0:	2001      	movs	r0, #1
   802d2:	4770      	bx	lr
   802d4:	400b4000 	.word	0x400b4000

000802d8 <CAN0_Handler>:
 * \param void
 *
 * \retval 
 */
void CAN0_Handler( void )
{
   802d8:	b530      	push	{r4, r5, lr}
   802da:	b085      	sub	sp, #20
	if(DEBUG_INTERRUPT)printf("CAN0 interrupt\n\r");
	char can_sr = CAN0->CAN_SR; 
   802dc:	4b1d      	ldr	r3, [pc, #116]	; (80354 <CAN0_Handler+0x7c>)
   802de:	691d      	ldr	r5, [r3, #16]
	
	//RX interrupt
	if(can_sr & (CAN_SR_MB1 | CAN_SR_MB2) )//Only mailbox 1 and 2 specified for receiving
   802e0:	f015 0f06 	tst.w	r5, #6
   802e4:	d028      	beq.n	80338 <CAN0_Handler+0x60>
	{
		CAN_MESSAGE message;
		if(can_sr & CAN_SR_MB1)  //Mailbox 1 event
   802e6:	f015 0f02 	tst.w	r5, #2
   802ea:	d108      	bne.n	802fe <CAN0_Handler+0x26>
			//set_servo_posistion(message.data[0]);
			//joystick_horizontal_to_speed(message.data[0]);
			

		}
		else if(can_sr & CAN_SR_MB2) //Mailbox 2 event
   802ec:	f015 0f04 	tst.w	r5, #4
   802f0:	d019      	beq.n	80326 <CAN0_Handler+0x4e>
		
		{
			can_receive(&message, 2);
   802f2:	2102      	movs	r1, #2
   802f4:	a801      	add	r0, sp, #4
   802f6:	4b18      	ldr	r3, [pc, #96]	; (80358 <CAN0_Handler+0x80>)
   802f8:	4798      	blx	r3
			printf("CAN0 message arrived in non-used mailbox\n\r");
		}

		if(DEBUG_INTERRUPT)printf("message id: %d\n\r", message.id);
		if(DEBUG_INTERRUPT)printf("message data length: %d\n\r", message.data_length);
		for (int i = 0; i < message.data_length; i++)
   802fa:	2300      	movs	r3, #0
   802fc:	e018      	b.n	80330 <CAN0_Handler+0x58>
			can_receive(&message, 1);
   802fe:	2101      	movs	r1, #1
   80300:	a801      	add	r0, sp, #4
   80302:	4b15      	ldr	r3, [pc, #84]	; (80358 <CAN0_Handler+0x80>)
   80304:	4798      	blx	r3
			for (int i = 0; i< message.data_length; i++)
   80306:	2400      	movs	r4, #0
   80308:	e008      	b.n	8031c <CAN0_Handler+0x44>
				printf("data[%d] : %d \n\r", i, message.data[i]);
   8030a:	ab04      	add	r3, sp, #16
   8030c:	4423      	add	r3, r4
   8030e:	f813 2c09 	ldrb.w	r2, [r3, #-9]
   80312:	4621      	mov	r1, r4
   80314:	4811      	ldr	r0, [pc, #68]	; (8035c <CAN0_Handler+0x84>)
   80316:	4b12      	ldr	r3, [pc, #72]	; (80360 <CAN0_Handler+0x88>)
   80318:	4798      	blx	r3
			for (int i = 0; i< message.data_length; i++)
   8031a:	3401      	adds	r4, #1
   8031c:	f89d 3006 	ldrb.w	r3, [sp, #6]
   80320:	429c      	cmp	r4, r3
   80322:	dbf2      	blt.n	8030a <CAN0_Handler+0x32>
   80324:	e7e9      	b.n	802fa <CAN0_Handler+0x22>
			printf("CAN0 message arrived in non-used mailbox\n\r");
   80326:	480f      	ldr	r0, [pc, #60]	; (80364 <CAN0_Handler+0x8c>)
   80328:	4b0d      	ldr	r3, [pc, #52]	; (80360 <CAN0_Handler+0x88>)
   8032a:	4798      	blx	r3
   8032c:	e7e5      	b.n	802fa <CAN0_Handler+0x22>
		for (int i = 0; i < message.data_length; i++)
   8032e:	3301      	adds	r3, #1
   80330:	f89d 2006 	ldrb.w	r2, [sp, #6]
   80334:	4293      	cmp	r3, r2
   80336:	dbfa      	blt.n	8032e <CAN0_Handler+0x56>
			if(DEBUG_INTERRUPT)printf("%d ", message.data[i]);
		}
		if(DEBUG_INTERRUPT)printf("\n\r");
	}
	
	if(can_sr & CAN_SR_MB0)
   80338:	f015 0f01 	tst.w	r5, #1
   8033c:	d002      	beq.n	80344 <CAN0_Handler+0x6c>
	{
		if(DEBUG_INTERRUPT) printf("CAN0 MB0 ready to send \n\r");
		
	//Disable interrupt
		CAN0->CAN_IDR = CAN_IER_MB0;
   8033e:	2201      	movs	r2, #1
   80340:	4b04      	ldr	r3, [pc, #16]	; (80354 <CAN0_Handler+0x7c>)
   80342:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80344:	f44f 6200 	mov.w	r2, #2048	; 0x800
   80348:	4b07      	ldr	r3, [pc, #28]	; (80368 <CAN0_Handler+0x90>)
   8034a:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

	}
	
	NVIC_ClearPendingIRQ(ID_CAN0);
	//sei();*/
}
   8034e:	b005      	add	sp, #20
   80350:	bd30      	pop	{r4, r5, pc}
   80352:	bf00      	nop
   80354:	400b4000 	.word	0x400b4000
   80358:	00080255 	.word	0x00080255
   8035c:	00080bb4 	.word	0x00080bb4
   80360:	0008092d 	.word	0x0008092d
   80364:	00080bc8 	.word	0x00080bc8
   80368:	e000e100 	.word	0xe000e100

0008036c <Dummy_Handler>:
   8036c:	e7fe      	b.n	8036c <Dummy_Handler>
	...

00080370 <Reset_Handler>:
   80370:	b508      	push	{r3, lr}
   80372:	4b11      	ldr	r3, [pc, #68]	; (803b8 <Reset_Handler+0x48>)
   80374:	4a11      	ldr	r2, [pc, #68]	; (803bc <Reset_Handler+0x4c>)
   80376:	429a      	cmp	r2, r3
   80378:	d009      	beq.n	8038e <Reset_Handler+0x1e>
   8037a:	4b0f      	ldr	r3, [pc, #60]	; (803b8 <Reset_Handler+0x48>)
   8037c:	4a0f      	ldr	r2, [pc, #60]	; (803bc <Reset_Handler+0x4c>)
   8037e:	e003      	b.n	80388 <Reset_Handler+0x18>
   80380:	6811      	ldr	r1, [r2, #0]
   80382:	6019      	str	r1, [r3, #0]
   80384:	3304      	adds	r3, #4
   80386:	3204      	adds	r2, #4
   80388:	490d      	ldr	r1, [pc, #52]	; (803c0 <Reset_Handler+0x50>)
   8038a:	428b      	cmp	r3, r1
   8038c:	d3f8      	bcc.n	80380 <Reset_Handler+0x10>
   8038e:	4b0d      	ldr	r3, [pc, #52]	; (803c4 <Reset_Handler+0x54>)
   80390:	e002      	b.n	80398 <Reset_Handler+0x28>
   80392:	2200      	movs	r2, #0
   80394:	601a      	str	r2, [r3, #0]
   80396:	3304      	adds	r3, #4
   80398:	4a0b      	ldr	r2, [pc, #44]	; (803c8 <Reset_Handler+0x58>)
   8039a:	4293      	cmp	r3, r2
   8039c:	d3f9      	bcc.n	80392 <Reset_Handler+0x22>
   8039e:	4b0b      	ldr	r3, [pc, #44]	; (803cc <Reset_Handler+0x5c>)
   803a0:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   803a4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   803a8:	4a09      	ldr	r2, [pc, #36]	; (803d0 <Reset_Handler+0x60>)
   803aa:	6093      	str	r3, [r2, #8]
   803ac:	4b09      	ldr	r3, [pc, #36]	; (803d4 <Reset_Handler+0x64>)
   803ae:	4798      	blx	r3
   803b0:	4b09      	ldr	r3, [pc, #36]	; (803d8 <Reset_Handler+0x68>)
   803b2:	4798      	blx	r3
   803b4:	e7fe      	b.n	803b4 <Reset_Handler+0x44>
   803b6:	bf00      	nop
   803b8:	20000000 	.word	0x20000000
   803bc:	00080c5c 	.word	0x00080c5c
   803c0:	20000434 	.word	0x20000434
   803c4:	20000434 	.word	0x20000434
   803c8:	200004b8 	.word	0x200004b8
   803cc:	00080000 	.word	0x00080000
   803d0:	e000ed00 	.word	0xe000ed00
   803d4:	00080a45 	.word	0x00080a45
   803d8:	00080481 	.word	0x00080481

000803dc <SystemInit>:
   803dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
   803e0:	4a20      	ldr	r2, [pc, #128]	; (80464 <SystemInit+0x88>)
   803e2:	6013      	str	r3, [r2, #0]
   803e4:	f502 7200 	add.w	r2, r2, #512	; 0x200
   803e8:	6013      	str	r3, [r2, #0]
   803ea:	4b1f      	ldr	r3, [pc, #124]	; (80468 <SystemInit+0x8c>)
   803ec:	6a1b      	ldr	r3, [r3, #32]
   803ee:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   803f2:	d107      	bne.n	80404 <SystemInit+0x28>
   803f4:	4a1d      	ldr	r2, [pc, #116]	; (8046c <SystemInit+0x90>)
   803f6:	4b1c      	ldr	r3, [pc, #112]	; (80468 <SystemInit+0x8c>)
   803f8:	621a      	str	r2, [r3, #32]
   803fa:	4b1b      	ldr	r3, [pc, #108]	; (80468 <SystemInit+0x8c>)
   803fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   803fe:	f013 0f01 	tst.w	r3, #1
   80402:	d0fa      	beq.n	803fa <SystemInit+0x1e>
   80404:	4a1a      	ldr	r2, [pc, #104]	; (80470 <SystemInit+0x94>)
   80406:	4b18      	ldr	r3, [pc, #96]	; (80468 <SystemInit+0x8c>)
   80408:	621a      	str	r2, [r3, #32]
   8040a:	4b17      	ldr	r3, [pc, #92]	; (80468 <SystemInit+0x8c>)
   8040c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8040e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   80412:	d0fa      	beq.n	8040a <SystemInit+0x2e>
   80414:	4a14      	ldr	r2, [pc, #80]	; (80468 <SystemInit+0x8c>)
   80416:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80418:	f023 0303 	bic.w	r3, r3, #3
   8041c:	f043 0301 	orr.w	r3, r3, #1
   80420:	6313      	str	r3, [r2, #48]	; 0x30
   80422:	4b11      	ldr	r3, [pc, #68]	; (80468 <SystemInit+0x8c>)
   80424:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80426:	f013 0f08 	tst.w	r3, #8
   8042a:	d0fa      	beq.n	80422 <SystemInit+0x46>
   8042c:	4a11      	ldr	r2, [pc, #68]	; (80474 <SystemInit+0x98>)
   8042e:	4b0e      	ldr	r3, [pc, #56]	; (80468 <SystemInit+0x8c>)
   80430:	629a      	str	r2, [r3, #40]	; 0x28
   80432:	4b0d      	ldr	r3, [pc, #52]	; (80468 <SystemInit+0x8c>)
   80434:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80436:	f013 0f02 	tst.w	r3, #2
   8043a:	d0fa      	beq.n	80432 <SystemInit+0x56>
   8043c:	2211      	movs	r2, #17
   8043e:	4b0a      	ldr	r3, [pc, #40]	; (80468 <SystemInit+0x8c>)
   80440:	631a      	str	r2, [r3, #48]	; 0x30
   80442:	4b09      	ldr	r3, [pc, #36]	; (80468 <SystemInit+0x8c>)
   80444:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80446:	f013 0f08 	tst.w	r3, #8
   8044a:	d0fa      	beq.n	80442 <SystemInit+0x66>
   8044c:	2212      	movs	r2, #18
   8044e:	4b06      	ldr	r3, [pc, #24]	; (80468 <SystemInit+0x8c>)
   80450:	631a      	str	r2, [r3, #48]	; 0x30
   80452:	4b05      	ldr	r3, [pc, #20]	; (80468 <SystemInit+0x8c>)
   80454:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80456:	f013 0f08 	tst.w	r3, #8
   8045a:	d0fa      	beq.n	80452 <SystemInit+0x76>
   8045c:	4a06      	ldr	r2, [pc, #24]	; (80478 <SystemInit+0x9c>)
   8045e:	4b07      	ldr	r3, [pc, #28]	; (8047c <SystemInit+0xa0>)
   80460:	601a      	str	r2, [r3, #0]
   80462:	4770      	bx	lr
   80464:	400e0a00 	.word	0x400e0a00
   80468:	400e0600 	.word	0x400e0600
   8046c:	00370809 	.word	0x00370809
   80470:	01370809 	.word	0x01370809
   80474:	200d3f01 	.word	0x200d3f01
   80478:	0501bd00 	.word	0x0501bd00
   8047c:	20000000 	.word	0x20000000

00080480 <main>:
#include "motor/motor_controller.h"


#define can_br 0x01141255 
int main(void)
{
   80480:	b508      	push	{r3, lr}
    /* Initialize the SAM system */
    SystemInit();
   80482:	4b12      	ldr	r3, [pc, #72]	; (804cc <main+0x4c>)
   80484:	4798      	blx	r3
	configure_uart();
   80486:	4b12      	ldr	r3, [pc, #72]	; (804d0 <main+0x50>)
   80488:	4798      	blx	r3
	can_init_def_tx_rx_mb(can_br);
   8048a:	4812      	ldr	r0, [pc, #72]	; (804d4 <main+0x54>)
   8048c:	4b12      	ldr	r3, [pc, #72]	; (804d8 <main+0x58>)
   8048e:	4798      	blx	r3
	PWM_init();
   80490:	4b12      	ldr	r3, [pc, #72]	; (804dc <main+0x5c>)
   80492:	4798      	blx	r3
	ADC_init();
   80494:	4b12      	ldr	r3, [pc, #72]	; (804e0 <main+0x60>)
   80496:	4798      	blx	r3
	motor_init();
   80498:	4b12      	ldr	r3, [pc, #72]	; (804e4 <main+0x64>)
   8049a:	4798      	blx	r3
	DAC_init();
   8049c:	4b12      	ldr	r3, [pc, #72]	; (804e8 <main+0x68>)
   8049e:	4798      	blx	r3
	
	
	WDT->WDT_MR = WDT_MR_WDDIS; // Disable WDT
   804a0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   804a4:	4b11      	ldr	r3, [pc, #68]	; (804ec <main+0x6c>)
   804a6:	605a      	str	r2, [r3, #4]
	
	PIOA->PIO_OER = PIO_OER_P19 | PIO_OER_P20; // Output enable on PA19 and PA20
   804a8:	f5a3 6345 	sub.w	r3, r3, #3152	; 0xc50
   804ac:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
   804b0:	611a      	str	r2, [r3, #16]
	
	PIOA->PIO_SODR = PIO_SODR_P19; // | PIO_SODR_P20; // Set PA19 and PA20 high ( Turn on both leds ) 
   804b2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   804b6:	631a      	str	r2, [r3, #48]	; 0x30
	//motor_set_direction(1);
	motor_disable_break(1);
   804b8:	2001      	movs	r0, #1
   804ba:	4b0d      	ldr	r3, [pc, #52]	; (804f0 <main+0x70>)
   804bc:	4798      	blx	r3
    /* Replace with your application code */
    while (1) 
    {	
		//PWM_update_dutycycle(7);
		
		uint32_t goal_val = goal();
   804be:	4b0d      	ldr	r3, [pc, #52]	; (804f4 <main+0x74>)
   804c0:	4798      	blx	r3
		
		motor_set_speed(50);
   804c2:	2032      	movs	r0, #50	; 0x32
   804c4:	4b0c      	ldr	r3, [pc, #48]	; (804f8 <main+0x78>)
   804c6:	4798      	blx	r3
   804c8:	e7f9      	b.n	804be <main+0x3e>
   804ca:	bf00      	nop
   804cc:	000803dd 	.word	0x000803dd
   804d0:	00080951 	.word	0x00080951
   804d4:	01141255 	.word	0x01141255
   804d8:	00080245 	.word	0x00080245
   804dc:	000805fd 	.word	0x000805fd
   804e0:	00080599 	.word	0x00080599
   804e4:	000804fd 	.word	0x000804fd
   804e8:	0008052d 	.word	0x0008052d
   804ec:	400e1a50 	.word	0x400e1a50
   804f0:	0008050d 	.word	0x0008050d
   804f4:	000805e5 	.word	0x000805e5
   804f8:	00080569 	.word	0x00080569

000804fc <motor_init>:
 */ 
#include "motor_controller.h"

void motor_init(void){
	
	PIOD->PIO_OER = PIO_OER_P2 | PIO_OER_P9 | PIO_OER_P10 ; // Output enable on MJ1_EN, MJ1_SEL and MJ1_DIR
   804fc:	f240 6204 	movw	r2, #1540	; 0x604
   80500:	4b01      	ldr	r3, [pc, #4]	; (80508 <motor_init+0xc>)
   80502:	611a      	str	r2, [r3, #16]
   80504:	4770      	bx	lr
   80506:	bf00      	nop
   80508:	400e1400 	.word	0x400e1400

0008050c <motor_disable_break>:
}

void motor_disable_break(uint8_t bool){
	if(bool){
   8050c:	b928      	cbnz	r0, 8051a <motor_disable_break+0xe>
		PIOD->PIO_SODR |= PIO_SODR_P2; // Set MJ1_EN high
		return;
	}
	PIOD->PIO_SODR &= ~PIO_SODR_P2; // Set MJ1_EN low
   8050e:	4a06      	ldr	r2, [pc, #24]	; (80528 <motor_disable_break+0x1c>)
   80510:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80512:	f023 0304 	bic.w	r3, r3, #4
   80516:	6313      	str	r3, [r2, #48]	; 0x30
   80518:	4770      	bx	lr
		PIOD->PIO_SODR |= PIO_SODR_P2; // Set MJ1_EN high
   8051a:	4a03      	ldr	r2, [pc, #12]	; (80528 <motor_disable_break+0x1c>)
   8051c:	6b13      	ldr	r3, [r2, #48]	; 0x30
   8051e:	f043 0304 	orr.w	r3, r3, #4
   80522:	6313      	str	r3, [r2, #48]	; 0x30
		return;
   80524:	4770      	bx	lr
   80526:	bf00      	nop
   80528:	400e1400 	.word	0x400e1400

0008052c <DAC_init>:
void DAC_init(void){
	
	//set perifiral clk on PMC
	
	// Enable peripheral clock on PID38 (DACC)
	PMC->PMC_PCER1 |= PMC_PCER1_PID38;
   8052c:	4a0c      	ldr	r2, [pc, #48]	; (80560 <DAC_init+0x34>)
   8052e:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   80532:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   80536:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
	
	// Disable IO for PB16, which enables Peripheral control of the pin
	PIOB->PIO_PDR |= PIO_PDR_P16;
   8053a:	f502 6220 	add.w	r2, r2, #2560	; 0xa00
   8053e:	6853      	ldr	r3, [r2, #4]
   80540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80544:	6053      	str	r3, [r2, #4]
	
	
	//set DAC Mode
	
	DACC->DACC_MR |= DACC_MR_USER_SEL_CHANNEL1;
   80546:	4b07      	ldr	r3, [pc, #28]	; (80564 <DAC_init+0x38>)
   80548:	685a      	ldr	r2, [r3, #4]
   8054a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
   8054e:	605a      	str	r2, [r3, #4]
	DACC->DACC_MR |= DACC_MR_WORD_HALF;
   80550:	685a      	ldr	r2, [r3, #4]
   80552:	605a      	str	r2, [r3, #4]
	
	//Enable channel 1
	DACC->DACC_CHER |= DACC_CHER_CH1;
   80554:	691a      	ldr	r2, [r3, #16]
   80556:	f042 0202 	orr.w	r2, r2, #2
   8055a:	611a      	str	r2, [r3, #16]
   8055c:	4770      	bx	lr
   8055e:	bf00      	nop
   80560:	400e0600 	.word	0x400e0600
   80564:	400c8000 	.word	0x400c8000

00080568 <motor_set_speed>:
	
	
}


void motor_set_speed(uint32_t percentage){
   80568:	b510      	push	{r4, lr}
   8056a:	4604      	mov	r4, r0
	
	DAC_init();
   8056c:	4b05      	ldr	r3, [pc, #20]	; (80584 <motor_set_speed+0x1c>)
   8056e:	4798      	blx	r3
	
	uint32_t digitalspeed = ((percentage)/100) ;
   80570:	4905      	ldr	r1, [pc, #20]	; (80588 <motor_set_speed+0x20>)
   80572:	fba1 3104 	umull	r3, r1, r1, r4
   80576:	0949      	lsrs	r1, r1, #5
	
	//digitalspeed = percentage;
	
	//set conversion reg in DAC
	DACC->DACC_CDR = digitalspeed;
   80578:	4b04      	ldr	r3, [pc, #16]	; (8058c <motor_set_speed+0x24>)
   8057a:	6219      	str	r1, [r3, #32]
	printf("digital speed: %d \n\r",digitalspeed);
   8057c:	4804      	ldr	r0, [pc, #16]	; (80590 <motor_set_speed+0x28>)
   8057e:	4b05      	ldr	r3, [pc, #20]	; (80594 <motor_set_speed+0x2c>)
   80580:	4798      	blx	r3
   80582:	bd10      	pop	{r4, pc}
   80584:	0008052d 	.word	0x0008052d
   80588:	51eb851f 	.word	0x51eb851f
   8058c:	400c8000 	.word	0x400c8000
   80590:	00080bf4 	.word	0x00080bf4
   80594:	0008092d 	.word	0x0008092d

00080598 <ADC_init>:
#include "sam.h"

void ADC_init( void ) {

	// Enable periferal clock on PID37 (The ADC)
	PMC->PMC_PCER1 |= PMC_PCER1_PID37;
   80598:	4a0d      	ldr	r2, [pc, #52]	; (805d0 <ADC_init+0x38>)
   8059a:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   8059e:	f043 0320 	orr.w	r3, r3, #32
   805a2:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
	
	// Disable IO for P2, which enables Peripheral control of the pin
	 PIOA->PIO_PDR |= PIO_PDR_P2;
   805a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
   805aa:	6853      	ldr	r3, [r2, #4]
   805ac:	f043 0304 	orr.w	r3, r3, #4
   805b0:	6053      	str	r3, [r2, #4]
	
	// Enable ADC chanel 0
	ADC->ADC_CHER |= ADC_CHER_CH0;
   805b2:	4b08      	ldr	r3, [pc, #32]	; (805d4 <ADC_init+0x3c>)
   805b4:	691a      	ldr	r2, [r3, #16]
   805b6:	f042 0201 	orr.w	r2, r2, #1
   805ba:	611a      	str	r2, [r3, #16]
	
	// Enable freerun, sample all the time
	ADC->ADC_MR |= ADC_MR_FREERUN_ON;
   805bc:	685a      	ldr	r2, [r3, #4]
   805be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   805c2:	605a      	str	r2, [r3, #4]

	
	// Start ADC-Conversion
	ADC->ADC_CR |= ADC_CR_START;
   805c4:	681a      	ldr	r2, [r3, #0]
   805c6:	f042 0202 	orr.w	r2, r2, #2
   805ca:	601a      	str	r2, [r3, #0]
   805cc:	4770      	bx	lr
   805ce:	bf00      	nop
   805d0:	400e0600 	.word	0x400e0600
   805d4:	400c0000 	.word	0x400c0000

000805d8 <ADC_read>:
}

uint32_t ADC_read( void ){
	return ADC->ADC_CDR[0];
   805d8:	4b01      	ldr	r3, [pc, #4]	; (805e0 <ADC_read+0x8>)
   805da:	6d18      	ldr	r0, [r3, #80]	; 0x50
}
   805dc:	4770      	bx	lr
   805de:	bf00      	nop
   805e0:	400c0000 	.word	0x400c0000

000805e4 <goal>:

#include "ADC.h"
#include "goal.h"
#include <stdio.h>

uint8_t goal ( void ){
   805e4:	b508      	push	{r3, lr}
	uint32_t ir_value = ADC_read();
   805e6:	4b04      	ldr	r3, [pc, #16]	; (805f8 <goal+0x14>)
   805e8:	4798      	blx	r3
	//printf("IR_VAL: %d \n\r", ir_value);
	if (ir_value < GOAL_THRESHOLD){
   805ea:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   805ee:	d301      	bcc.n	805f4 <goal+0x10>
		return 1;}
	return 0;
   805f0:	2000      	movs	r0, #0
   805f2:	bd08      	pop	{r3, pc}
		return 1;}
   805f4:	2001      	movs	r0, #1
   805f6:	bd08      	pop	{r3, pc}
   805f8:	000805d9 	.word	0x000805d9

000805fc <PWM_init>:
#include "PWM.h"

void PWM_init(void){
	
	//enable PWM in PMC
	PMC->PMC_PCER1 |= PMC_PCER1_PID36;
   805fc:	4a21      	ldr	r2, [pc, #132]	; (80684 <PWM_init+0x88>)
   805fe:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   80602:	f043 0310 	orr.w	r3, r3, #16
   80606:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
	
	//Select functionality of PIO-pis, on PC19 - (pin 44) and PC18 - (pin 45)
	//choosing PWM channel H5 and H6
	
	//PIO disable  
	PIOC->PIO_PDR |= PIO_PDR_P19;
   8060a:	4b1f      	ldr	r3, [pc, #124]	; (80688 <PWM_init+0x8c>)
   8060c:	685a      	ldr	r2, [r3, #4]
   8060e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   80612:	605a      	str	r2, [r3, #4]
	PIOC->PIO_PDR |= PIO_PDR_P18;	
   80614:	685a      	ldr	r2, [r3, #4]
   80616:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
   8061a:	605a      	str	r2, [r3, #4]
	
	//PWM peripheral select
	PIOC->PIO_ABSR |= PIO_ABSR_P19;
   8061c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   8061e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   80622:	671a      	str	r2, [r3, #112]	; 0x70
	PIOC->PIO_ABSR |= PIO_ABSR_P18;
   80624:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80626:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
   8062a:	671a      	str	r2, [r3, #112]	; 0x70
	//Set PWM Clk = MCK = 84 Mhz
	 
	 
	//set channel mode
	// Set clk source = 656250 hz
	REG_PWM_CMR5 |= PWM_CMR_CPRE_MCK_DIV_128;
   8062c:	4a17      	ldr	r2, [pc, #92]	; (8068c <PWM_init+0x90>)
   8062e:	6813      	ldr	r3, [r2, #0]
   80630:	f043 0307 	orr.w	r3, r3, #7
   80634:	6013      	str	r3, [r2, #0]
	REG_PWM_CMR6 |= PWM_CMR_CPRE_MCK_DIV_128;
   80636:	3220      	adds	r2, #32
   80638:	6813      	ldr	r3, [r2, #0]
   8063a:	f043 0307 	orr.w	r3, r3, #7
   8063e:	6013      	str	r3, [r2, #0]
	


	//Set Period = CPRD/21 Mhz
	// CPRD = 0x3345 => T=20 ms
	REG_PWM_CPRD5 |= 0x3345;
   80640:	4b13      	ldr	r3, [pc, #76]	; (80690 <PWM_init+0x94>)
   80642:	681a      	ldr	r2, [r3, #0]
   80644:	f243 3145 	movw	r1, #13125	; 0x3345
   80648:	430a      	orrs	r2, r1
   8064a:	601a      	str	r2, [r3, #0]
	REG_PWM_CPRD6 |= 0x3345;
   8064c:	4a11      	ldr	r2, [pc, #68]	; (80694 <PWM_init+0x98>)
   8064e:	6813      	ldr	r3, [r2, #0]
   80650:	430b      	orrs	r3, r1
   80652:	6013      	str	r3, [r2, #0]
	
	//Set duty Cycle = 1 - CDTY/CPRD
	//CDTY = 0x30F5 => d =  0.9 ms
	//CDTY = 0x2DE2 => d =  2.1 ms
	
	REG_PWM_CDTY5 |= 0x30F5;
   80654:	3a28      	subs	r2, #40	; 0x28
   80656:	6813      	ldr	r3, [r2, #0]
   80658:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
   8065c:	f043 0335 	orr.w	r3, r3, #53	; 0x35
   80660:	6013      	str	r3, [r2, #0]
	REG_PWM_CDTY6 |= 0x2DE2;
   80662:	3220      	adds	r2, #32
   80664:	6813      	ldr	r3, [r2, #0]
   80666:	f443 5337 	orr.w	r3, r3, #11712	; 0x2dc0
   8066a:	f043 0322 	orr.w	r3, r3, #34	; 0x22
   8066e:	6013      	str	r3, [r2, #0]
	
	PWM->PWM_ENA |= PWM_ENA_CHID5;
   80670:	4b09      	ldr	r3, [pc, #36]	; (80698 <PWM_init+0x9c>)
   80672:	685a      	ldr	r2, [r3, #4]
   80674:	f042 0220 	orr.w	r2, r2, #32
   80678:	605a      	str	r2, [r3, #4]
	PWM->PWM_ENA |= PWM_ENA_CHID6;
   8067a:	685a      	ldr	r2, [r3, #4]
   8067c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   80680:	605a      	str	r2, [r3, #4]
   80682:	4770      	bx	lr
   80684:	400e0600 	.word	0x400e0600
   80688:	400e1200 	.word	0x400e1200
   8068c:	400942a0 	.word	0x400942a0
   80690:	400942ac 	.word	0x400942ac
   80694:	400942cc 	.word	0x400942cc
   80698:	40094000 	.word	0x40094000

0008069c <printchar>:
   8069c:	b508      	push	{r3, lr}
   8069e:	b2c8      	uxtb	r0, r1
   806a0:	4b01      	ldr	r3, [pc, #4]	; (806a8 <printchar+0xc>)
   806a2:	4798      	blx	r3
   806a4:	bd08      	pop	{r3, pc}
   806a6:	bf00      	nop
   806a8:	000809b9 	.word	0x000809b9

000806ac <prints>:
   806ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   806b0:	4607      	mov	r7, r0
   806b2:	460e      	mov	r6, r1
   806b4:	1e15      	subs	r5, r2, #0
   806b6:	dd02      	ble.n	806be <prints+0x12>
   806b8:	460a      	mov	r2, r1
   806ba:	2100      	movs	r1, #0
   806bc:	e004      	b.n	806c8 <prints+0x1c>
   806be:	f04f 0820 	mov.w	r8, #32
   806c2:	e00e      	b.n	806e2 <prints+0x36>
   806c4:	3101      	adds	r1, #1
   806c6:	3201      	adds	r2, #1
   806c8:	7810      	ldrb	r0, [r2, #0]
   806ca:	2800      	cmp	r0, #0
   806cc:	d1fa      	bne.n	806c4 <prints+0x18>
   806ce:	42a9      	cmp	r1, r5
   806d0:	da01      	bge.n	806d6 <prints+0x2a>
   806d2:	1a6d      	subs	r5, r5, r1
   806d4:	e000      	b.n	806d8 <prints+0x2c>
   806d6:	2500      	movs	r5, #0
   806d8:	f013 0f02 	tst.w	r3, #2
   806dc:	d106      	bne.n	806ec <prints+0x40>
   806de:	f04f 0820 	mov.w	r8, #32
   806e2:	f013 0401 	ands.w	r4, r3, #1
   806e6:	d00a      	beq.n	806fe <prints+0x52>
   806e8:	2400      	movs	r4, #0
   806ea:	e010      	b.n	8070e <prints+0x62>
   806ec:	f04f 0830 	mov.w	r8, #48	; 0x30
   806f0:	e7f7      	b.n	806e2 <prints+0x36>
   806f2:	4641      	mov	r1, r8
   806f4:	4638      	mov	r0, r7
   806f6:	4b0d      	ldr	r3, [pc, #52]	; (8072c <prints+0x80>)
   806f8:	4798      	blx	r3
   806fa:	3401      	adds	r4, #1
   806fc:	3d01      	subs	r5, #1
   806fe:	2d00      	cmp	r5, #0
   80700:	dcf7      	bgt.n	806f2 <prints+0x46>
   80702:	e004      	b.n	8070e <prints+0x62>
   80704:	4638      	mov	r0, r7
   80706:	4b09      	ldr	r3, [pc, #36]	; (8072c <prints+0x80>)
   80708:	4798      	blx	r3
   8070a:	3401      	adds	r4, #1
   8070c:	3601      	adds	r6, #1
   8070e:	7831      	ldrb	r1, [r6, #0]
   80710:	2900      	cmp	r1, #0
   80712:	d1f7      	bne.n	80704 <prints+0x58>
   80714:	e005      	b.n	80722 <prints+0x76>
   80716:	4641      	mov	r1, r8
   80718:	4638      	mov	r0, r7
   8071a:	4b04      	ldr	r3, [pc, #16]	; (8072c <prints+0x80>)
   8071c:	4798      	blx	r3
   8071e:	3401      	adds	r4, #1
   80720:	3d01      	subs	r5, #1
   80722:	2d00      	cmp	r5, #0
   80724:	dcf7      	bgt.n	80716 <prints+0x6a>
   80726:	4620      	mov	r0, r4
   80728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8072c:	0008069d 	.word	0x0008069d

00080730 <printi>:
   80730:	b5f0      	push	{r4, r5, r6, r7, lr}
   80732:	b085      	sub	sp, #20
   80734:	4607      	mov	r7, r0
   80736:	980c      	ldr	r0, [sp, #48]	; 0x30
   80738:	b151      	cbz	r1, 80750 <printi+0x20>
   8073a:	461e      	mov	r6, r3
   8073c:	460c      	mov	r4, r1
   8073e:	b113      	cbz	r3, 80746 <printi+0x16>
   80740:	2a0a      	cmp	r2, #10
   80742:	d012      	beq.n	8076a <printi+0x3a>
   80744:	2600      	movs	r6, #0
   80746:	ad04      	add	r5, sp, #16
   80748:	2300      	movs	r3, #0
   8074a:	f805 3d01 	strb.w	r3, [r5, #-1]!
   8074e:	e018      	b.n	80782 <printi+0x52>
   80750:	2330      	movs	r3, #48	; 0x30
   80752:	f88d 3004 	strb.w	r3, [sp, #4]
   80756:	2300      	movs	r3, #0
   80758:	f88d 3005 	strb.w	r3, [sp, #5]
   8075c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8075e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   80760:	a901      	add	r1, sp, #4
   80762:	4638      	mov	r0, r7
   80764:	4c1b      	ldr	r4, [pc, #108]	; (807d4 <printi+0xa4>)
   80766:	47a0      	blx	r4
   80768:	e029      	b.n	807be <printi+0x8e>
   8076a:	2900      	cmp	r1, #0
   8076c:	db01      	blt.n	80772 <printi+0x42>
   8076e:	2600      	movs	r6, #0
   80770:	e7e9      	b.n	80746 <printi+0x16>
   80772:	424c      	negs	r4, r1
   80774:	2601      	movs	r6, #1
   80776:	e7e6      	b.n	80746 <printi+0x16>
   80778:	3330      	adds	r3, #48	; 0x30
   8077a:	f805 3d01 	strb.w	r3, [r5, #-1]!
   8077e:	fbb4 f4f2 	udiv	r4, r4, r2
   80782:	b14c      	cbz	r4, 80798 <printi+0x68>
   80784:	fbb4 f3f2 	udiv	r3, r4, r2
   80788:	fb02 4313 	mls	r3, r2, r3, r4
   8078c:	2b09      	cmp	r3, #9
   8078e:	ddf3      	ble.n	80778 <printi+0x48>
   80790:	f1a0 013a 	sub.w	r1, r0, #58	; 0x3a
   80794:	440b      	add	r3, r1
   80796:	e7ef      	b.n	80778 <printi+0x48>
   80798:	b156      	cbz	r6, 807b0 <printi+0x80>
   8079a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8079c:	b11b      	cbz	r3, 807a6 <printi+0x76>
   8079e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   807a0:	f013 0f02 	tst.w	r3, #2
   807a4:	d10d      	bne.n	807c2 <printi+0x92>
   807a6:	232d      	movs	r3, #45	; 0x2d
   807a8:	f805 3c01 	strb.w	r3, [r5, #-1]
   807ac:	3d01      	subs	r5, #1
   807ae:	2600      	movs	r6, #0
   807b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   807b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   807b4:	4629      	mov	r1, r5
   807b6:	4638      	mov	r0, r7
   807b8:	4c06      	ldr	r4, [pc, #24]	; (807d4 <printi+0xa4>)
   807ba:	47a0      	blx	r4
   807bc:	4430      	add	r0, r6
   807be:	b005      	add	sp, #20
   807c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   807c2:	212d      	movs	r1, #45	; 0x2d
   807c4:	4638      	mov	r0, r7
   807c6:	4b04      	ldr	r3, [pc, #16]	; (807d8 <printi+0xa8>)
   807c8:	4798      	blx	r3
   807ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   807cc:	3b01      	subs	r3, #1
   807ce:	930a      	str	r3, [sp, #40]	; 0x28
   807d0:	e7ee      	b.n	807b0 <printi+0x80>
   807d2:	bf00      	nop
   807d4:	000806ad 	.word	0x000806ad
   807d8:	0008069d 	.word	0x0008069d

000807dc <print>:
   807dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   807de:	b089      	sub	sp, #36	; 0x24
   807e0:	4606      	mov	r6, r0
   807e2:	460c      	mov	r4, r1
   807e4:	9205      	str	r2, [sp, #20]
   807e6:	2500      	movs	r5, #0
   807e8:	e081      	b.n	808ee <print+0x112>
   807ea:	1ca2      	adds	r2, r4, #2
   807ec:	2301      	movs	r3, #1
   807ee:	e08b      	b.n	80908 <print+0x12c>
   807f0:	3401      	adds	r4, #1
   807f2:	f043 0302 	orr.w	r3, r3, #2
   807f6:	7822      	ldrb	r2, [r4, #0]
   807f8:	2a30      	cmp	r2, #48	; 0x30
   807fa:	d0f9      	beq.n	807f0 <print+0x14>
   807fc:	2200      	movs	r2, #0
   807fe:	e006      	b.n	8080e <print+0x32>
   80800:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   80804:	0050      	lsls	r0, r2, #1
   80806:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   8080a:	4402      	add	r2, r0
   8080c:	3401      	adds	r4, #1
   8080e:	7821      	ldrb	r1, [r4, #0]
   80810:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
   80814:	b2c0      	uxtb	r0, r0
   80816:	2809      	cmp	r0, #9
   80818:	d9f2      	bls.n	80800 <print+0x24>
   8081a:	2973      	cmp	r1, #115	; 0x73
   8081c:	d018      	beq.n	80850 <print+0x74>
   8081e:	2964      	cmp	r1, #100	; 0x64
   80820:	d022      	beq.n	80868 <print+0x8c>
   80822:	2978      	cmp	r1, #120	; 0x78
   80824:	d02f      	beq.n	80886 <print+0xaa>
   80826:	2958      	cmp	r1, #88	; 0x58
   80828:	d03c      	beq.n	808a4 <print+0xc8>
   8082a:	2975      	cmp	r1, #117	; 0x75
   8082c:	d049      	beq.n	808c2 <print+0xe6>
   8082e:	2963      	cmp	r1, #99	; 0x63
   80830:	d15c      	bne.n	808ec <print+0x110>
   80832:	9905      	ldr	r1, [sp, #20]
   80834:	1d08      	adds	r0, r1, #4
   80836:	9005      	str	r0, [sp, #20]
   80838:	7809      	ldrb	r1, [r1, #0]
   8083a:	f88d 101c 	strb.w	r1, [sp, #28]
   8083e:	2100      	movs	r1, #0
   80840:	f88d 101d 	strb.w	r1, [sp, #29]
   80844:	a907      	add	r1, sp, #28
   80846:	4630      	mov	r0, r6
   80848:	4f34      	ldr	r7, [pc, #208]	; (8091c <print+0x140>)
   8084a:	47b8      	blx	r7
   8084c:	4405      	add	r5, r0
   8084e:	e04d      	b.n	808ec <print+0x110>
   80850:	9905      	ldr	r1, [sp, #20]
   80852:	1d08      	adds	r0, r1, #4
   80854:	9005      	str	r0, [sp, #20]
   80856:	6809      	ldr	r1, [r1, #0]
   80858:	b121      	cbz	r1, 80864 <print+0x88>
   8085a:	4630      	mov	r0, r6
   8085c:	4f2f      	ldr	r7, [pc, #188]	; (8091c <print+0x140>)
   8085e:	47b8      	blx	r7
   80860:	4405      	add	r5, r0
   80862:	e043      	b.n	808ec <print+0x110>
   80864:	492e      	ldr	r1, [pc, #184]	; (80920 <print+0x144>)
   80866:	e7f8      	b.n	8085a <print+0x7e>
   80868:	9905      	ldr	r1, [sp, #20]
   8086a:	1d08      	adds	r0, r1, #4
   8086c:	9005      	str	r0, [sp, #20]
   8086e:	6809      	ldr	r1, [r1, #0]
   80870:	2061      	movs	r0, #97	; 0x61
   80872:	9002      	str	r0, [sp, #8]
   80874:	9301      	str	r3, [sp, #4]
   80876:	9200      	str	r2, [sp, #0]
   80878:	2301      	movs	r3, #1
   8087a:	220a      	movs	r2, #10
   8087c:	4630      	mov	r0, r6
   8087e:	4f29      	ldr	r7, [pc, #164]	; (80924 <print+0x148>)
   80880:	47b8      	blx	r7
   80882:	4405      	add	r5, r0
   80884:	e032      	b.n	808ec <print+0x110>
   80886:	9905      	ldr	r1, [sp, #20]
   80888:	1d08      	adds	r0, r1, #4
   8088a:	9005      	str	r0, [sp, #20]
   8088c:	6809      	ldr	r1, [r1, #0]
   8088e:	2061      	movs	r0, #97	; 0x61
   80890:	9002      	str	r0, [sp, #8]
   80892:	9301      	str	r3, [sp, #4]
   80894:	9200      	str	r2, [sp, #0]
   80896:	2300      	movs	r3, #0
   80898:	2210      	movs	r2, #16
   8089a:	4630      	mov	r0, r6
   8089c:	4f21      	ldr	r7, [pc, #132]	; (80924 <print+0x148>)
   8089e:	47b8      	blx	r7
   808a0:	4405      	add	r5, r0
   808a2:	e023      	b.n	808ec <print+0x110>
   808a4:	9905      	ldr	r1, [sp, #20]
   808a6:	1d08      	adds	r0, r1, #4
   808a8:	9005      	str	r0, [sp, #20]
   808aa:	6809      	ldr	r1, [r1, #0]
   808ac:	2041      	movs	r0, #65	; 0x41
   808ae:	9002      	str	r0, [sp, #8]
   808b0:	9301      	str	r3, [sp, #4]
   808b2:	9200      	str	r2, [sp, #0]
   808b4:	2300      	movs	r3, #0
   808b6:	2210      	movs	r2, #16
   808b8:	4630      	mov	r0, r6
   808ba:	4f1a      	ldr	r7, [pc, #104]	; (80924 <print+0x148>)
   808bc:	47b8      	blx	r7
   808be:	4405      	add	r5, r0
   808c0:	e014      	b.n	808ec <print+0x110>
   808c2:	9905      	ldr	r1, [sp, #20]
   808c4:	1d08      	adds	r0, r1, #4
   808c6:	9005      	str	r0, [sp, #20]
   808c8:	6809      	ldr	r1, [r1, #0]
   808ca:	2061      	movs	r0, #97	; 0x61
   808cc:	9002      	str	r0, [sp, #8]
   808ce:	9301      	str	r3, [sp, #4]
   808d0:	9200      	str	r2, [sp, #0]
   808d2:	2300      	movs	r3, #0
   808d4:	220a      	movs	r2, #10
   808d6:	4630      	mov	r0, r6
   808d8:	4f12      	ldr	r7, [pc, #72]	; (80924 <print+0x148>)
   808da:	47b8      	blx	r7
   808dc:	4405      	add	r5, r0
   808de:	e005      	b.n	808ec <print+0x110>
   808e0:	4614      	mov	r4, r2
   808e2:	7821      	ldrb	r1, [r4, #0]
   808e4:	4630      	mov	r0, r6
   808e6:	4b10      	ldr	r3, [pc, #64]	; (80928 <print+0x14c>)
   808e8:	4798      	blx	r3
   808ea:	3501      	adds	r5, #1
   808ec:	3401      	adds	r4, #1
   808ee:	7823      	ldrb	r3, [r4, #0]
   808f0:	b163      	cbz	r3, 8090c <print+0x130>
   808f2:	2b25      	cmp	r3, #37	; 0x25
   808f4:	d1f5      	bne.n	808e2 <print+0x106>
   808f6:	1c62      	adds	r2, r4, #1
   808f8:	7863      	ldrb	r3, [r4, #1]
   808fa:	b13b      	cbz	r3, 8090c <print+0x130>
   808fc:	2b25      	cmp	r3, #37	; 0x25
   808fe:	d0ef      	beq.n	808e0 <print+0x104>
   80900:	2b2d      	cmp	r3, #45	; 0x2d
   80902:	f43f af72 	beq.w	807ea <print+0xe>
   80906:	2300      	movs	r3, #0
   80908:	4614      	mov	r4, r2
   8090a:	e774      	b.n	807f6 <print+0x1a>
   8090c:	b116      	cbz	r6, 80914 <print+0x138>
   8090e:	6833      	ldr	r3, [r6, #0]
   80910:	2200      	movs	r2, #0
   80912:	701a      	strb	r2, [r3, #0]
   80914:	4628      	mov	r0, r5
   80916:	b009      	add	sp, #36	; 0x24
   80918:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8091a:	bf00      	nop
   8091c:	000806ad 	.word	0x000806ad
   80920:	00080c0c 	.word	0x00080c0c
   80924:	00080731 	.word	0x00080731
   80928:	0008069d 	.word	0x0008069d

0008092c <printf>:
   8092c:	b40f      	push	{r0, r1, r2, r3}
   8092e:	b500      	push	{lr}
   80930:	b083      	sub	sp, #12
   80932:	aa04      	add	r2, sp, #16
   80934:	f852 1b04 	ldr.w	r1, [r2], #4
   80938:	9201      	str	r2, [sp, #4]
   8093a:	2000      	movs	r0, #0
   8093c:	4b03      	ldr	r3, [pc, #12]	; (8094c <printf+0x20>)
   8093e:	4798      	blx	r3
   80940:	b003      	add	sp, #12
   80942:	f85d eb04 	ldr.w	lr, [sp], #4
   80946:	b004      	add	sp, #16
   80948:	4770      	bx	lr
   8094a:	bf00      	nop
   8094c:	000807dd 	.word	0x000807dd

00080950 <configure_uart>:
   80950:	4b16      	ldr	r3, [pc, #88]	; (809ac <configure_uart+0x5c>)
   80952:	2200      	movs	r2, #0
   80954:	701a      	strb	r2, [r3, #0]
   80956:	705a      	strb	r2, [r3, #1]
   80958:	4b15      	ldr	r3, [pc, #84]	; (809b0 <configure_uart+0x60>)
   8095a:	f44f 7140 	mov.w	r1, #768	; 0x300
   8095e:	6459      	str	r1, [r3, #68]	; 0x44
   80960:	6059      	str	r1, [r3, #4]
   80962:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80964:	6f18      	ldr	r0, [r3, #112]	; 0x70
   80966:	4002      	ands	r2, r0
   80968:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   8096c:	671a      	str	r2, [r3, #112]	; 0x70
   8096e:	6659      	str	r1, [r3, #100]	; 0x64
   80970:	f44f 7280 	mov.w	r2, #256	; 0x100
   80974:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   80978:	611a      	str	r2, [r3, #16]
   8097a:	f503 7300 	add.w	r3, r3, #512	; 0x200
   8097e:	21ac      	movs	r1, #172	; 0xac
   80980:	6019      	str	r1, [r3, #0]
   80982:	f240 2123 	movw	r1, #547	; 0x223
   80986:	6219      	str	r1, [r3, #32]
   80988:	f44f 6100 	mov.w	r1, #2048	; 0x800
   8098c:	6059      	str	r1, [r3, #4]
   8098e:	f240 2102 	movw	r1, #514	; 0x202
   80992:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   80996:	f04f 31ff 	mov.w	r1, #4294967295
   8099a:	60d9      	str	r1, [r3, #12]
   8099c:	21e1      	movs	r1, #225	; 0xe1
   8099e:	6099      	str	r1, [r3, #8]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   809a0:	4904      	ldr	r1, [pc, #16]	; (809b4 <configure_uart+0x64>)
   809a2:	600a      	str	r2, [r1, #0]
   809a4:	2250      	movs	r2, #80	; 0x50
   809a6:	601a      	str	r2, [r3, #0]
   809a8:	4770      	bx	lr
   809aa:	bf00      	nop
   809ac:	20000450 	.word	0x20000450
   809b0:	400e0e00 	.word	0x400e0e00
   809b4:	e000e100 	.word	0xe000e100

000809b8 <uart_putchar>:
   809b8:	4b07      	ldr	r3, [pc, #28]	; (809d8 <uart_putchar+0x20>)
   809ba:	695b      	ldr	r3, [r3, #20]
   809bc:	f013 0f02 	tst.w	r3, #2
   809c0:	d008      	beq.n	809d4 <uart_putchar+0x1c>
   809c2:	4b05      	ldr	r3, [pc, #20]	; (809d8 <uart_putchar+0x20>)
   809c4:	61d8      	str	r0, [r3, #28]
   809c6:	4b04      	ldr	r3, [pc, #16]	; (809d8 <uart_putchar+0x20>)
   809c8:	695b      	ldr	r3, [r3, #20]
   809ca:	f413 7f00 	tst.w	r3, #512	; 0x200
   809ce:	d0fa      	beq.n	809c6 <uart_putchar+0xe>
   809d0:	2000      	movs	r0, #0
   809d2:	4770      	bx	lr
   809d4:	2001      	movs	r0, #1
   809d6:	4770      	bx	lr
   809d8:	400e0800 	.word	0x400e0800

000809dc <UART_Handler>:
   809dc:	b508      	push	{r3, lr}
   809de:	4b15      	ldr	r3, [pc, #84]	; (80a34 <UART_Handler+0x58>)
   809e0:	695b      	ldr	r3, [r3, #20]
   809e2:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   809e6:	d003      	beq.n	809f0 <UART_Handler+0x14>
   809e8:	f44f 71a8 	mov.w	r1, #336	; 0x150
   809ec:	4a11      	ldr	r2, [pc, #68]	; (80a34 <UART_Handler+0x58>)
   809ee:	6011      	str	r1, [r2, #0]
   809f0:	f013 0f01 	tst.w	r3, #1
   809f4:	d012      	beq.n	80a1c <UART_Handler+0x40>
   809f6:	4810      	ldr	r0, [pc, #64]	; (80a38 <UART_Handler+0x5c>)
   809f8:	7842      	ldrb	r2, [r0, #1]
   809fa:	1c53      	adds	r3, r2, #1
   809fc:	4259      	negs	r1, r3
   809fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   80a02:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   80a06:	bf58      	it	pl
   80a08:	424b      	negpl	r3, r1
   80a0a:	7801      	ldrb	r1, [r0, #0]
   80a0c:	428b      	cmp	r3, r1
   80a0e:	d006      	beq.n	80a1e <UART_Handler+0x42>
   80a10:	4908      	ldr	r1, [pc, #32]	; (80a34 <UART_Handler+0x58>)
   80a12:	6988      	ldr	r0, [r1, #24]
   80a14:	4908      	ldr	r1, [pc, #32]	; (80a38 <UART_Handler+0x5c>)
   80a16:	440a      	add	r2, r1
   80a18:	7090      	strb	r0, [r2, #2]
   80a1a:	704b      	strb	r3, [r1, #1]
   80a1c:	bd08      	pop	{r3, pc}
   80a1e:	4807      	ldr	r0, [pc, #28]	; (80a3c <UART_Handler+0x60>)
   80a20:	4b07      	ldr	r3, [pc, #28]	; (80a40 <UART_Handler+0x64>)
   80a22:	4798      	blx	r3
   80a24:	4b04      	ldr	r3, [pc, #16]	; (80a38 <UART_Handler+0x5c>)
   80a26:	7859      	ldrb	r1, [r3, #1]
   80a28:	4a02      	ldr	r2, [pc, #8]	; (80a34 <UART_Handler+0x58>)
   80a2a:	6992      	ldr	r2, [r2, #24]
   80a2c:	440b      	add	r3, r1
   80a2e:	709a      	strb	r2, [r3, #2]
   80a30:	bd08      	pop	{r3, pc}
   80a32:	bf00      	nop
   80a34:	400e0800 	.word	0x400e0800
   80a38:	20000450 	.word	0x20000450
   80a3c:	00080c14 	.word	0x00080c14
   80a40:	0008092d 	.word	0x0008092d

00080a44 <__libc_init_array>:
   80a44:	b570      	push	{r4, r5, r6, lr}
   80a46:	4e0f      	ldr	r6, [pc, #60]	; (80a84 <__libc_init_array+0x40>)
   80a48:	4d0f      	ldr	r5, [pc, #60]	; (80a88 <__libc_init_array+0x44>)
   80a4a:	1b76      	subs	r6, r6, r5
   80a4c:	10b6      	asrs	r6, r6, #2
   80a4e:	bf18      	it	ne
   80a50:	2400      	movne	r4, #0
   80a52:	d005      	beq.n	80a60 <__libc_init_array+0x1c>
   80a54:	3401      	adds	r4, #1
   80a56:	f855 3b04 	ldr.w	r3, [r5], #4
   80a5a:	4798      	blx	r3
   80a5c:	42a6      	cmp	r6, r4
   80a5e:	d1f9      	bne.n	80a54 <__libc_init_array+0x10>
   80a60:	4e0a      	ldr	r6, [pc, #40]	; (80a8c <__libc_init_array+0x48>)
   80a62:	4d0b      	ldr	r5, [pc, #44]	; (80a90 <__libc_init_array+0x4c>)
   80a64:	f000 f8e8 	bl	80c38 <_init>
   80a68:	1b76      	subs	r6, r6, r5
   80a6a:	10b6      	asrs	r6, r6, #2
   80a6c:	bf18      	it	ne
   80a6e:	2400      	movne	r4, #0
   80a70:	d006      	beq.n	80a80 <__libc_init_array+0x3c>
   80a72:	3401      	adds	r4, #1
   80a74:	f855 3b04 	ldr.w	r3, [r5], #4
   80a78:	4798      	blx	r3
   80a7a:	42a6      	cmp	r6, r4
   80a7c:	d1f9      	bne.n	80a72 <__libc_init_array+0x2e>
   80a7e:	bd70      	pop	{r4, r5, r6, pc}
   80a80:	bd70      	pop	{r4, r5, r6, pc}
   80a82:	bf00      	nop
   80a84:	00080c44 	.word	0x00080c44
   80a88:	00080c44 	.word	0x00080c44
   80a8c:	00080c4c 	.word	0x00080c4c
   80a90:	00080c44 	.word	0x00080c44

00080a94 <register_fini>:
   80a94:	4b02      	ldr	r3, [pc, #8]	; (80aa0 <register_fini+0xc>)
   80a96:	b113      	cbz	r3, 80a9e <register_fini+0xa>
   80a98:	4802      	ldr	r0, [pc, #8]	; (80aa4 <register_fini+0x10>)
   80a9a:	f000 b805 	b.w	80aa8 <atexit>
   80a9e:	4770      	bx	lr
   80aa0:	00000000 	.word	0x00000000
   80aa4:	00080ab5 	.word	0x00080ab5

00080aa8 <atexit>:
   80aa8:	2300      	movs	r3, #0
   80aaa:	4601      	mov	r1, r0
   80aac:	461a      	mov	r2, r3
   80aae:	4618      	mov	r0, r3
   80ab0:	f000 b81e 	b.w	80af0 <__register_exitproc>

00080ab4 <__libc_fini_array>:
   80ab4:	b538      	push	{r3, r4, r5, lr}
   80ab6:	4c0a      	ldr	r4, [pc, #40]	; (80ae0 <__libc_fini_array+0x2c>)
   80ab8:	4d0a      	ldr	r5, [pc, #40]	; (80ae4 <__libc_fini_array+0x30>)
   80aba:	1b64      	subs	r4, r4, r5
   80abc:	10a4      	asrs	r4, r4, #2
   80abe:	d00a      	beq.n	80ad6 <__libc_fini_array+0x22>
   80ac0:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   80ac4:	3b01      	subs	r3, #1
   80ac6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   80aca:	3c01      	subs	r4, #1
   80acc:	f855 3904 	ldr.w	r3, [r5], #-4
   80ad0:	4798      	blx	r3
   80ad2:	2c00      	cmp	r4, #0
   80ad4:	d1f9      	bne.n	80aca <__libc_fini_array+0x16>
   80ad6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   80ada:	f000 b8b7 	b.w	80c4c <_fini>
   80ade:	bf00      	nop
   80ae0:	00080c5c 	.word	0x00080c5c
   80ae4:	00080c58 	.word	0x00080c58

00080ae8 <__retarget_lock_acquire_recursive>:
   80ae8:	4770      	bx	lr
   80aea:	bf00      	nop

00080aec <__retarget_lock_release_recursive>:
   80aec:	4770      	bx	lr
   80aee:	bf00      	nop

00080af0 <__register_exitproc>:
   80af0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80af4:	4d2c      	ldr	r5, [pc, #176]	; (80ba8 <__register_exitproc+0xb8>)
   80af6:	4606      	mov	r6, r0
   80af8:	6828      	ldr	r0, [r5, #0]
   80afa:	4698      	mov	r8, r3
   80afc:	460f      	mov	r7, r1
   80afe:	4691      	mov	r9, r2
   80b00:	f7ff fff2 	bl	80ae8 <__retarget_lock_acquire_recursive>
   80b04:	4b29      	ldr	r3, [pc, #164]	; (80bac <__register_exitproc+0xbc>)
   80b06:	681c      	ldr	r4, [r3, #0]
   80b08:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   80b0c:	2b00      	cmp	r3, #0
   80b0e:	d03e      	beq.n	80b8e <__register_exitproc+0x9e>
   80b10:	685a      	ldr	r2, [r3, #4]
   80b12:	2a1f      	cmp	r2, #31
   80b14:	dc1c      	bgt.n	80b50 <__register_exitproc+0x60>
   80b16:	f102 0e01 	add.w	lr, r2, #1
   80b1a:	b176      	cbz	r6, 80b3a <__register_exitproc+0x4a>
   80b1c:	2101      	movs	r1, #1
   80b1e:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   80b22:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   80b26:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   80b2a:	4091      	lsls	r1, r2
   80b2c:	4308      	orrs	r0, r1
   80b2e:	2e02      	cmp	r6, #2
   80b30:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   80b34:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   80b38:	d023      	beq.n	80b82 <__register_exitproc+0x92>
   80b3a:	3202      	adds	r2, #2
   80b3c:	f8c3 e004 	str.w	lr, [r3, #4]
   80b40:	6828      	ldr	r0, [r5, #0]
   80b42:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   80b46:	f7ff ffd1 	bl	80aec <__retarget_lock_release_recursive>
   80b4a:	2000      	movs	r0, #0
   80b4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80b50:	4b17      	ldr	r3, [pc, #92]	; (80bb0 <__register_exitproc+0xc0>)
   80b52:	b30b      	cbz	r3, 80b98 <__register_exitproc+0xa8>
   80b54:	f44f 70c8 	mov.w	r0, #400	; 0x190
   80b58:	f3af 8000 	nop.w
   80b5c:	4603      	mov	r3, r0
   80b5e:	b1d8      	cbz	r0, 80b98 <__register_exitproc+0xa8>
   80b60:	2000      	movs	r0, #0
   80b62:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   80b66:	f04f 0e01 	mov.w	lr, #1
   80b6a:	6058      	str	r0, [r3, #4]
   80b6c:	6019      	str	r1, [r3, #0]
   80b6e:	4602      	mov	r2, r0
   80b70:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   80b74:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   80b78:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   80b7c:	2e00      	cmp	r6, #0
   80b7e:	d0dc      	beq.n	80b3a <__register_exitproc+0x4a>
   80b80:	e7cc      	b.n	80b1c <__register_exitproc+0x2c>
   80b82:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   80b86:	4301      	orrs	r1, r0
   80b88:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   80b8c:	e7d5      	b.n	80b3a <__register_exitproc+0x4a>
   80b8e:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   80b92:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   80b96:	e7bb      	b.n	80b10 <__register_exitproc+0x20>
   80b98:	6828      	ldr	r0, [r5, #0]
   80b9a:	f7ff ffa7 	bl	80aec <__retarget_lock_release_recursive>
   80b9e:	f04f 30ff 	mov.w	r0, #4294967295
   80ba2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80ba6:	bf00      	nop
   80ba8:	20000430 	.word	0x20000430
   80bac:	00080c34 	.word	0x00080c34
   80bb0:	00000000 	.word	0x00000000
   80bb4:	61746164 	.word	0x61746164
   80bb8:	5d64255b 	.word	0x5d64255b
   80bbc:	25203a20 	.word	0x25203a20
   80bc0:	0d0a2064 	.word	0x0d0a2064
   80bc4:	00000000 	.word	0x00000000
   80bc8:	304e4143 	.word	0x304e4143
   80bcc:	73656d20 	.word	0x73656d20
   80bd0:	65676173 	.word	0x65676173
   80bd4:	72726120 	.word	0x72726120
   80bd8:	64657669 	.word	0x64657669
   80bdc:	206e6920 	.word	0x206e6920
   80be0:	2d6e6f6e 	.word	0x2d6e6f6e
   80be4:	64657375 	.word	0x64657375
   80be8:	69616d20 	.word	0x69616d20
   80bec:	786f626c 	.word	0x786f626c
   80bf0:	00000d0a 	.word	0x00000d0a
   80bf4:	69676964 	.word	0x69676964
   80bf8:	206c6174 	.word	0x206c6174
   80bfc:	65657073 	.word	0x65657073
   80c00:	25203a64 	.word	0x25203a64
   80c04:	0d0a2064 	.word	0x0d0a2064
   80c08:	00000000 	.word	0x00000000
   80c0c:	6c756e28 	.word	0x6c756e28
   80c10:	0000296c 	.word	0x0000296c
   80c14:	3a525245 	.word	0x3a525245
   80c18:	52415520 	.word	0x52415520
   80c1c:	58522054 	.word	0x58522054
   80c20:	66756220 	.word	0x66756220
   80c24:	20726566 	.word	0x20726566
   80c28:	66207369 	.word	0x66207369
   80c2c:	0a6c6c75 	.word	0x0a6c6c75
   80c30:	0000000d 	.word	0x0000000d

00080c34 <_global_impure_ptr>:
   80c34:	20000008                                ... 

00080c38 <_init>:
   80c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80c3a:	bf00      	nop
   80c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   80c3e:	bc08      	pop	{r3}
   80c40:	469e      	mov	lr, r3
   80c42:	4770      	bx	lr

00080c44 <__init_array_start>:
   80c44:	00080a95 	.word	0x00080a95

00080c48 <__frame_dummy_init_array_entry>:
   80c48:	00080119                                ....

00080c4c <_fini>:
   80c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80c4e:	bf00      	nop
   80c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
   80c52:	bc08      	pop	{r3}
   80c54:	469e      	mov	lr, r3
   80c56:	4770      	bx	lr

00080c58 <__fini_array_start>:
   80c58:	000800f5 	.word	0x000800f5
