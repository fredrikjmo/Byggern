
Node 2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b84  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20000000  00080b84  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000084  20000434  00080fb8  00020434  2**2
                  ALLOC
  3 .stack        00000400  200004b8  0008103c  00020434  2**0
                  ALLOC
  4 .heap         00000200  200008b8  0008143c  00020434  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002045d  2**0
                  CONTENTS, READONLY
  7 .debug_info   000055ef  00000000  00000000  000204b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000ea0  00000000  00000000  00025aa5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000e2b  00000000  00000000  00026945  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000001a0  00000000  00000000  00027770  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000140  00000000  00000000  00027910  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000125f7  00000000  00000000  00027a50  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000041e8  00000000  00000000  0003a047  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00055229  00000000  00000000  0003e22f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000004e4  00000000  00000000  00093458  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	b8 08 00 20 7d 03 08 00 79 03 08 00 79 03 08 00     ... }...y...y...
   80010:	79 03 08 00 79 03 08 00 79 03 08 00 00 00 00 00     y...y...y.......
	...
   8002c:	79 03 08 00 79 03 08 00 00 00 00 00 79 03 08 00     y...y.......y...
   8003c:	79 03 08 00 79 03 08 00 79 03 08 00 79 03 08 00     y...y...y...y...
   8004c:	79 03 08 00 79 03 08 00 79 03 08 00 79 03 08 00     y...y...y...y...
   8005c:	79 03 08 00 0d 09 08 00 79 03 08 00 00 00 00 00     y.......y.......
   8006c:	79 03 08 00 79 03 08 00 79 03 08 00 79 03 08 00     y...y...y...y...
	...
   80084:	79 03 08 00 79 03 08 00 79 03 08 00 79 03 08 00     y...y...y...y...
   80094:	79 03 08 00 79 03 08 00 79 03 08 00 79 03 08 00     y...y...y...y...
   800a4:	00 00 00 00 79 03 08 00 79 03 08 00 79 03 08 00     ....y...y...y...
   800b4:	79 03 08 00 79 03 08 00 79 03 08 00 79 03 08 00     y...y...y...y...
   800c4:	79 03 08 00 79 03 08 00 79 03 08 00 79 03 08 00     y...y...y...y...
   800d4:	79 03 08 00 79 03 08 00 79 03 08 00 79 03 08 00     y...y...y...y...
   800e4:	79 03 08 00 79 03 08 00 d9 02 08 00 79 03 08 00     y...y.......y...

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20000434 	.word	0x20000434
   80110:	00000000 	.word	0x00000000
   80114:	00080b84 	.word	0x00080b84

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00080b84 	.word	0x00080b84
   80154:	20000438 	.word	0x20000438
   80158:	00080b84 	.word	0x00080b84
   8015c:	00000000 	.word	0x00000000

00080160 <can_init>:
 * \retval Success(0) or failure(1)
 */


uint8_t can_init(uint32_t can_br, uint8_t num_tx_mb, uint8_t num_rx_mb)
{
   80160:	b4f0      	push	{r4, r5, r6, r7}
	
	//Make sure num_rx_mb and num_tx_mb is valid
	if(num_rx_mb > 8 | num_tx_mb > 8 | num_rx_mb + num_tx_mb > 8)
   80162:	1857      	adds	r7, r2, r1
   80164:	2f08      	cmp	r7, #8
   80166:	bfd4      	ite	le
   80168:	2300      	movle	r3, #0
   8016a:	2301      	movgt	r3, #1
   8016c:	2908      	cmp	r1, #8
   8016e:	bf98      	it	ls
   80170:	2a08      	cmpls	r2, #8
   80172:	d85c      	bhi.n	8022e <can_init+0xce>
   80174:	460d      	mov	r5, r1
   80176:	2b00      	cmp	r3, #0
   80178:	d159      	bne.n	8022e <can_init+0xce>


	uint32_t ul_status; 
	
	//Disable can
	CAN0->CAN_MR &= ~CAN_MR_CANEN; 
   8017a:	4a2e      	ldr	r2, [pc, #184]	; (80234 <can_init+0xd4>)
   8017c:	6813      	ldr	r3, [r2, #0]
   8017e:	f023 0301 	bic.w	r3, r3, #1
   80182:	6013      	str	r3, [r2, #0]
	//Clear status register on read
	ul_status = CAN0->CAN_SR; 
   80184:	6913      	ldr	r3, [r2, #16]
	
	
	// Disable interrupts on CANH and CANL pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80186:	4b2c      	ldr	r3, [pc, #176]	; (80238 <can_init+0xd8>)
   80188:	f44f 7440 	mov.w	r4, #768	; 0x300
   8018c:	645c      	str	r4, [r3, #68]	; 0x44
	
	//Select CAN0 RX and TX in PIOA
	uint32_t ul_sr = PIOA->PIO_ABSR;
   8018e:	6f1c      	ldr	r4, [r3, #112]	; 0x70
	PIOA->PIO_ABSR = ~(PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0) & ul_sr;
   80190:	f024 0403 	bic.w	r4, r4, #3
   80194:	671c      	str	r4, [r3, #112]	; 0x70
	
	// Disable the Parallel IO (PIO) of the Rx and Tx pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0;
   80196:	2403      	movs	r4, #3
   80198:	605c      	str	r4, [r3, #4]
	
	// Enable pull up on CANH and CANL pin
	PIOA->PIO_PUER = (PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0);
   8019a:	665c      	str	r4, [r3, #100]	; 0x64
	
	
	//Enable Clock for CAN0 in PMC
	PMC->PMC_PCR = PMC_PCR_EN | (0 << PMC_PCR_DIV_Pos) | PMC_PCR_CMD | (ID_CAN0 << PMC_PCR_PID_Pos); // DIV = 1(can clk = MCK/2), CMD = 1 (write), PID = 2B (CAN0)
   8019c:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   801a0:	4c26      	ldr	r4, [pc, #152]	; (8023c <can_init+0xdc>)
   801a2:	f8c3 410c 	str.w	r4, [r3, #268]	; 0x10c
	PMC->PMC_PCER1 |= 1 << (ID_CAN0 - 32);
   801a6:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
   801aa:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
   801ae:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	
	//Set baudrate, Phase1, phase2 and propagation delay for can bus. Must match on all nodes!
	
	CAN0->CAN_BR = can_br; 
   801b2:	6150      	str	r0, [r2, #20]
	//
	

	/****** Start of mailbox configuration ******/

	uint32_t can_ier = 0;
   801b4:	2400      	movs	r4, #0

	/* Configure receive mailboxes */
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   801b6:	e019      	b.n	801ec <can_init+0x8c>
	{
		CAN0->CAN_MB[n].CAN_MAM = 0; //Accept all messages
   801b8:	481e      	ldr	r0, [pc, #120]	; (80234 <can_init+0xd4>)
   801ba:	f101 0310 	add.w	r3, r1, #16
   801be:	015b      	lsls	r3, r3, #5
   801c0:	18c2      	adds	r2, r0, r3
   801c2:	2600      	movs	r6, #0
   801c4:	6056      	str	r6, [r2, #4]
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   801c6:	eb00 1241 	add.w	r2, r0, r1, lsl #5
   801ca:	f04f 5600 	mov.w	r6, #536870912	; 0x20000000
   801ce:	f8c2 6208 	str.w	r6, [r2, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_RX);
   801d2:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
   801d6:	50c6      	str	r6, [r0, r3]
		CAN0->CAN_MB[n].CAN_MCR |= CAN_MCR_MTCR;
   801d8:	f8d2 321c 	ldr.w	r3, [r2, #540]	; 0x21c
   801dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   801e0:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c

		can_ier |= 1 << n; //Enable interrupt on rx mailbox
   801e4:	2301      	movs	r3, #1
   801e6:	408b      	lsls	r3, r1
   801e8:	431c      	orrs	r4, r3
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   801ea:	3101      	adds	r1, #1
   801ec:	42b9      	cmp	r1, r7
   801ee:	dde3      	ble.n	801b8 <can_init+0x58>
   801f0:	2300      	movs	r3, #0
   801f2:	e00d      	b.n	80210 <can_init+0xb0>
	}
	
	/*Configure transmit mailboxes */
	for (int n = 0; n < num_tx_mb; n++)
	{
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   801f4:	490f      	ldr	r1, [pc, #60]	; (80234 <can_init+0xd4>)
   801f6:	eb01 1243 	add.w	r2, r1, r3, lsl #5
   801fa:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
   801fe:	f8c2 0208 	str.w	r0, [r2, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_TX);
   80202:	f103 0210 	add.w	r2, r3, #16
   80206:	0152      	lsls	r2, r2, #5
   80208:	f04f 7040 	mov.w	r0, #50331648	; 0x3000000
   8020c:	5088      	str	r0, [r1, r2]
	for (int n = 0; n < num_tx_mb; n++)
   8020e:	3301      	adds	r3, #1
   80210:	42ab      	cmp	r3, r5
   80212:	dbef      	blt.n	801f4 <can_init+0x94>
	}
	
	/****** End of mailbox configuraion ******/

	//Enable interrupt on receive mailboxes
	CAN0->CAN_IER = can_ier;
   80214:	4b07      	ldr	r3, [pc, #28]	; (80234 <can_init+0xd4>)
   80216:	605c      	str	r4, [r3, #4]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80218:	f44f 6100 	mov.w	r1, #2048	; 0x800
   8021c:	4a08      	ldr	r2, [pc, #32]	; (80240 <can_init+0xe0>)
   8021e:	6051      	str	r1, [r2, #4]

	//Enable interrupt in NVIC 
	NVIC_EnableIRQ(ID_CAN0);

	//enable CAN
	CAN0->CAN_MR |= CAN_MR_CANEN;
   80220:	681a      	ldr	r2, [r3, #0]
   80222:	f042 0201 	orr.w	r2, r2, #1
   80226:	601a      	str	r2, [r3, #0]

	return 0;
   80228:	2000      	movs	r0, #0
}
   8022a:	bcf0      	pop	{r4, r5, r6, r7}
   8022c:	4770      	bx	lr
		return 1; //Too many mailboxes is configured
   8022e:	2001      	movs	r0, #1
   80230:	e7fb      	b.n	8022a <can_init+0xca>
   80232:	bf00      	nop
   80234:	400b4000 	.word	0x400b4000
   80238:	400e0e00 	.word	0x400e0e00
   8023c:	1000102b 	.word	0x1000102b
   80240:	e000e100 	.word	0xe000e100

00080244 <can_init_def_tx_rx_mb>:
{
   80244:	b508      	push	{r3, lr}
	return can_init(can_br, 1, 2);
   80246:	2202      	movs	r2, #2
   80248:	2101      	movs	r1, #1
   8024a:	4b01      	ldr	r3, [pc, #4]	; (80250 <can_init_def_tx_rx_mb+0xc>)
   8024c:	4798      	blx	r3
}
   8024e:	bd08      	pop	{r3, pc}
   80250:	00080161 	.word	0x00080161

00080254 <can_receive>:
 * \retval Success(0) or failure(1)
 */
uint8_t can_receive(CAN_MESSAGE* can_msg, uint8_t rx_mb_id)
{
	//Check that mailbox is ready
	if(CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MRDY)
   80254:	014b      	lsls	r3, r1, #5
   80256:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   8025a:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   8025e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   80262:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   80266:	d033      	beq.n	802d0 <can_receive+0x7c>
{
   80268:	b470      	push	{r4, r5, r6}
	{
		//Get data from CAN mailbox
		uint32_t data_low = CAN0->CAN_MB[rx_mb_id].CAN_MDL;
   8026a:	014b      	lsls	r3, r1, #5
   8026c:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   80270:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   80274:	f8d3 4214 	ldr.w	r4, [r3, #532]	; 0x214
		uint32_t data_high = CAN0->CAN_MB[rx_mb_id].CAN_MDH;
   80278:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
		
		//Get message ID
		can_msg->id = (uint16_t)((CAN0->CAN_MB[rx_mb_id].CAN_MID & CAN_MID_MIDvA_Msk) >> CAN_MID_MIDvA_Pos);
   8027c:	f8d3 5208 	ldr.w	r5, [r3, #520]	; 0x208
   80280:	f3c5 458a 	ubfx	r5, r5, #18, #11
   80284:	8005      	strh	r5, [r0, #0]
		
		//Get data length
		can_msg->data_length = (uint8_t)((CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MDLC_Msk) >> CAN_MSR_MDLC_Pos);
   80286:	f8d3 5210 	ldr.w	r5, [r3, #528]	; 0x210
   8028a:	f3c5 4503 	ubfx	r5, r5, #16, #4
   8028e:	7085      	strb	r5, [r0, #2]
		
		//Put data in CAN_MESSAGE object
		for(int i = 0; i < can_msg->data_length;i++)
   80290:	2300      	movs	r3, #0
   80292:	e003      	b.n	8029c <can_receive+0x48>
				can_msg->data[i] = (char)(data_low & 0xff);
				data_low = data_low >> 8;
			}
			else
			{
				can_msg->data[i] = (uint8_t)(data_high & 0xff);
   80294:	18c6      	adds	r6, r0, r3
   80296:	70f2      	strb	r2, [r6, #3]
				data_high = data_high >> 8;
   80298:	0a12      	lsrs	r2, r2, #8
		for(int i = 0; i < can_msg->data_length;i++)
   8029a:	3301      	adds	r3, #1
   8029c:	42ab      	cmp	r3, r5
   8029e:	da05      	bge.n	802ac <can_receive+0x58>
			if(i < 4)
   802a0:	2b03      	cmp	r3, #3
   802a2:	dcf7      	bgt.n	80294 <can_receive+0x40>
				can_msg->data[i] = (char)(data_low & 0xff);
   802a4:	18c6      	adds	r6, r0, r3
   802a6:	70f4      	strb	r4, [r6, #3]
				data_low = data_low >> 8;
   802a8:	0a24      	lsrs	r4, r4, #8
   802aa:	e7f6      	b.n	8029a <can_receive+0x46>
			}
		}
		
		//Reset for new receive
		CAN0->CAN_MB[rx_mb_id].CAN_MMR = CAN_MMR_MOT_MB_RX;
   802ac:	4b09      	ldr	r3, [pc, #36]	; (802d4 <can_receive+0x80>)
   802ae:	f101 0210 	add.w	r2, r1, #16
   802b2:	0152      	lsls	r2, r2, #5
   802b4:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   802b8:	5098      	str	r0, [r3, r2]
		CAN0->CAN_MB[rx_mb_id].CAN_MCR |= CAN_MCR_MTCR;
   802ba:	eb03 1141 	add.w	r1, r3, r1, lsl #5
   802be:	f8d1 321c 	ldr.w	r3, [r1, #540]	; 0x21c
   802c2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   802c6:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
		return 0;
   802ca:	2000      	movs	r0, #0
	}
	else //Mailbox busy
	{
		return 1;
	}
}
   802cc:	bc70      	pop	{r4, r5, r6}
   802ce:	4770      	bx	lr
		return 1;
   802d0:	2001      	movs	r0, #1
   802d2:	4770      	bx	lr
   802d4:	400b4000 	.word	0x400b4000

000802d8 <CAN0_Handler>:
 * \param void
 *
 * \retval 
 */
void CAN0_Handler( void )
{
   802d8:	b530      	push	{r4, r5, lr}
   802da:	b085      	sub	sp, #20
	if(DEBUG_INTERRUPT)printf("CAN0 interrupt\n\r");
	char can_sr = CAN0->CAN_SR; 
   802dc:	4b1f      	ldr	r3, [pc, #124]	; (8035c <CAN0_Handler+0x84>)
   802de:	691d      	ldr	r5, [r3, #16]
	
	//RX interrupt
	if(can_sr & (CAN_SR_MB1 | CAN_SR_MB2) )//Only mailbox 1 and 2 specified for receiving
   802e0:	f015 0f06 	tst.w	r5, #6
   802e4:	d02c      	beq.n	80340 <CAN0_Handler+0x68>
	{
		CAN_MESSAGE message;
		if(can_sr & CAN_SR_MB1)  //Mailbox 1 event
   802e6:	f015 0f02 	tst.w	r5, #2
   802ea:	d108      	bne.n	802fe <CAN0_Handler+0x26>
			
			set_servo_posistion(message.data[0]);
			

		}
		else if(can_sr & CAN_SR_MB2) //Mailbox 2 event
   802ec:	f015 0f04 	tst.w	r5, #4
   802f0:	d01d      	beq.n	8032e <CAN0_Handler+0x56>
		
		{
			can_receive(&message, 2);
   802f2:	2102      	movs	r1, #2
   802f4:	a801      	add	r0, sp, #4
   802f6:	4b1a      	ldr	r3, [pc, #104]	; (80360 <CAN0_Handler+0x88>)
   802f8:	4798      	blx	r3
			printf("CAN0 message arrived in non-used mailbox\n\r");
		}

		if(DEBUG_INTERRUPT)printf("message id: %d\n\r", message.id);
		if(DEBUG_INTERRUPT)printf("message data length: %d\n\r", message.data_length);
		for (int i = 0; i < message.data_length; i++)
   802fa:	2300      	movs	r3, #0
   802fc:	e01c      	b.n	80338 <CAN0_Handler+0x60>
			can_receive(&message, 1);
   802fe:	2101      	movs	r1, #1
   80300:	a801      	add	r0, sp, #4
   80302:	4b17      	ldr	r3, [pc, #92]	; (80360 <CAN0_Handler+0x88>)
   80304:	4798      	blx	r3
			for (int i = 0; i< message.data_length; i++)
   80306:	2400      	movs	r4, #0
   80308:	e008      	b.n	8031c <CAN0_Handler+0x44>
				printf("data[%d] : %d \n\r", i, message.data[i]);
   8030a:	ab04      	add	r3, sp, #16
   8030c:	4423      	add	r3, r4
   8030e:	f813 2c09 	ldrb.w	r2, [r3, #-9]
   80312:	4621      	mov	r1, r4
   80314:	4813      	ldr	r0, [pc, #76]	; (80364 <CAN0_Handler+0x8c>)
   80316:	4b14      	ldr	r3, [pc, #80]	; (80368 <CAN0_Handler+0x90>)
   80318:	4798      	blx	r3
			for (int i = 0; i< message.data_length; i++)
   8031a:	3401      	adds	r4, #1
   8031c:	f89d 3006 	ldrb.w	r3, [sp, #6]
   80320:	429c      	cmp	r4, r3
   80322:	dbf2      	blt.n	8030a <CAN0_Handler+0x32>
			set_servo_posistion(message.data[0]);
   80324:	f89d 0007 	ldrb.w	r0, [sp, #7]
   80328:	4b10      	ldr	r3, [pc, #64]	; (8036c <CAN0_Handler+0x94>)
   8032a:	4798      	blx	r3
   8032c:	e7e5      	b.n	802fa <CAN0_Handler+0x22>
			printf("CAN0 message arrived in non-used mailbox\n\r");
   8032e:	4810      	ldr	r0, [pc, #64]	; (80370 <CAN0_Handler+0x98>)
   80330:	4b0d      	ldr	r3, [pc, #52]	; (80368 <CAN0_Handler+0x90>)
   80332:	4798      	blx	r3
   80334:	e7e1      	b.n	802fa <CAN0_Handler+0x22>
		for (int i = 0; i < message.data_length; i++)
   80336:	3301      	adds	r3, #1
   80338:	f89d 2006 	ldrb.w	r2, [sp, #6]
   8033c:	4293      	cmp	r3, r2
   8033e:	dbfa      	blt.n	80336 <CAN0_Handler+0x5e>
			if(DEBUG_INTERRUPT)printf("%d ", message.data[i]);
		}
		if(DEBUG_INTERRUPT)printf("\n\r");
	}
	
	if(can_sr & CAN_SR_MB0)
   80340:	f015 0f01 	tst.w	r5, #1
   80344:	d002      	beq.n	8034c <CAN0_Handler+0x74>
	{
		if(DEBUG_INTERRUPT) printf("CAN0 MB0 ready to send \n\r");
		
	//Disable interrupt
		CAN0->CAN_IDR = CAN_IER_MB0;
   80346:	2201      	movs	r2, #1
   80348:	4b04      	ldr	r3, [pc, #16]	; (8035c <CAN0_Handler+0x84>)
   8034a:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   8034c:	f44f 6200 	mov.w	r2, #2048	; 0x800
   80350:	4b08      	ldr	r3, [pc, #32]	; (80374 <CAN0_Handler+0x9c>)
   80352:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

	}
	
	NVIC_ClearPendingIRQ(ID_CAN0);
	//sei();*/
}
   80356:	b005      	add	sp, #20
   80358:	bd30      	pop	{r4, r5, pc}
   8035a:	bf00      	nop
   8035c:	400b4000 	.word	0x400b4000
   80360:	00080255 	.word	0x00080255
   80364:	00080ae4 	.word	0x00080ae4
   80368:	0008085d 	.word	0x0008085d
   8036c:	000805a1 	.word	0x000805a1
   80370:	00080af8 	.word	0x00080af8
   80374:	e000e100 	.word	0xe000e100

00080378 <Dummy_Handler>:
   80378:	e7fe      	b.n	80378 <Dummy_Handler>
	...

0008037c <Reset_Handler>:
   8037c:	b508      	push	{r3, lr}
   8037e:	4b11      	ldr	r3, [pc, #68]	; (803c4 <Reset_Handler+0x48>)
   80380:	4a11      	ldr	r2, [pc, #68]	; (803c8 <Reset_Handler+0x4c>)
   80382:	429a      	cmp	r2, r3
   80384:	d009      	beq.n	8039a <Reset_Handler+0x1e>
   80386:	4b0f      	ldr	r3, [pc, #60]	; (803c4 <Reset_Handler+0x48>)
   80388:	4a0f      	ldr	r2, [pc, #60]	; (803c8 <Reset_Handler+0x4c>)
   8038a:	e003      	b.n	80394 <Reset_Handler+0x18>
   8038c:	6811      	ldr	r1, [r2, #0]
   8038e:	6019      	str	r1, [r3, #0]
   80390:	3304      	adds	r3, #4
   80392:	3204      	adds	r2, #4
   80394:	490d      	ldr	r1, [pc, #52]	; (803cc <Reset_Handler+0x50>)
   80396:	428b      	cmp	r3, r1
   80398:	d3f8      	bcc.n	8038c <Reset_Handler+0x10>
   8039a:	4b0d      	ldr	r3, [pc, #52]	; (803d0 <Reset_Handler+0x54>)
   8039c:	e002      	b.n	803a4 <Reset_Handler+0x28>
   8039e:	2200      	movs	r2, #0
   803a0:	601a      	str	r2, [r3, #0]
   803a2:	3304      	adds	r3, #4
   803a4:	4a0b      	ldr	r2, [pc, #44]	; (803d4 <Reset_Handler+0x58>)
   803a6:	4293      	cmp	r3, r2
   803a8:	d3f9      	bcc.n	8039e <Reset_Handler+0x22>
   803aa:	4b0b      	ldr	r3, [pc, #44]	; (803d8 <Reset_Handler+0x5c>)
   803ac:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   803b0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   803b4:	4a09      	ldr	r2, [pc, #36]	; (803dc <Reset_Handler+0x60>)
   803b6:	6093      	str	r3, [r2, #8]
   803b8:	4b09      	ldr	r3, [pc, #36]	; (803e0 <Reset_Handler+0x64>)
   803ba:	4798      	blx	r3
   803bc:	4b09      	ldr	r3, [pc, #36]	; (803e4 <Reset_Handler+0x68>)
   803be:	4798      	blx	r3
   803c0:	e7fe      	b.n	803c0 <Reset_Handler+0x44>
   803c2:	bf00      	nop
   803c4:	20000000 	.word	0x20000000
   803c8:	00080b84 	.word	0x00080b84
   803cc:	20000434 	.word	0x20000434
   803d0:	20000434 	.word	0x20000434
   803d4:	200004b8 	.word	0x200004b8
   803d8:	00080000 	.word	0x00080000
   803dc:	e000ed00 	.word	0xe000ed00
   803e0:	00080975 	.word	0x00080975
   803e4:	0008048d 	.word	0x0008048d

000803e8 <SystemInit>:
   803e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
   803ec:	4a20      	ldr	r2, [pc, #128]	; (80470 <SystemInit+0x88>)
   803ee:	6013      	str	r3, [r2, #0]
   803f0:	f502 7200 	add.w	r2, r2, #512	; 0x200
   803f4:	6013      	str	r3, [r2, #0]
   803f6:	4b1f      	ldr	r3, [pc, #124]	; (80474 <SystemInit+0x8c>)
   803f8:	6a1b      	ldr	r3, [r3, #32]
   803fa:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   803fe:	d107      	bne.n	80410 <SystemInit+0x28>
   80400:	4a1d      	ldr	r2, [pc, #116]	; (80478 <SystemInit+0x90>)
   80402:	4b1c      	ldr	r3, [pc, #112]	; (80474 <SystemInit+0x8c>)
   80404:	621a      	str	r2, [r3, #32]
   80406:	4b1b      	ldr	r3, [pc, #108]	; (80474 <SystemInit+0x8c>)
   80408:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8040a:	f013 0f01 	tst.w	r3, #1
   8040e:	d0fa      	beq.n	80406 <SystemInit+0x1e>
   80410:	4a1a      	ldr	r2, [pc, #104]	; (8047c <SystemInit+0x94>)
   80412:	4b18      	ldr	r3, [pc, #96]	; (80474 <SystemInit+0x8c>)
   80414:	621a      	str	r2, [r3, #32]
   80416:	4b17      	ldr	r3, [pc, #92]	; (80474 <SystemInit+0x8c>)
   80418:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8041a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   8041e:	d0fa      	beq.n	80416 <SystemInit+0x2e>
   80420:	4a14      	ldr	r2, [pc, #80]	; (80474 <SystemInit+0x8c>)
   80422:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80424:	f023 0303 	bic.w	r3, r3, #3
   80428:	f043 0301 	orr.w	r3, r3, #1
   8042c:	6313      	str	r3, [r2, #48]	; 0x30
   8042e:	4b11      	ldr	r3, [pc, #68]	; (80474 <SystemInit+0x8c>)
   80430:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80432:	f013 0f08 	tst.w	r3, #8
   80436:	d0fa      	beq.n	8042e <SystemInit+0x46>
   80438:	4a11      	ldr	r2, [pc, #68]	; (80480 <SystemInit+0x98>)
   8043a:	4b0e      	ldr	r3, [pc, #56]	; (80474 <SystemInit+0x8c>)
   8043c:	629a      	str	r2, [r3, #40]	; 0x28
   8043e:	4b0d      	ldr	r3, [pc, #52]	; (80474 <SystemInit+0x8c>)
   80440:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80442:	f013 0f02 	tst.w	r3, #2
   80446:	d0fa      	beq.n	8043e <SystemInit+0x56>
   80448:	2211      	movs	r2, #17
   8044a:	4b0a      	ldr	r3, [pc, #40]	; (80474 <SystemInit+0x8c>)
   8044c:	631a      	str	r2, [r3, #48]	; 0x30
   8044e:	4b09      	ldr	r3, [pc, #36]	; (80474 <SystemInit+0x8c>)
   80450:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80452:	f013 0f08 	tst.w	r3, #8
   80456:	d0fa      	beq.n	8044e <SystemInit+0x66>
   80458:	2212      	movs	r2, #18
   8045a:	4b06      	ldr	r3, [pc, #24]	; (80474 <SystemInit+0x8c>)
   8045c:	631a      	str	r2, [r3, #48]	; 0x30
   8045e:	4b05      	ldr	r3, [pc, #20]	; (80474 <SystemInit+0x8c>)
   80460:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80462:	f013 0f08 	tst.w	r3, #8
   80466:	d0fa      	beq.n	8045e <SystemInit+0x76>
   80468:	4a06      	ldr	r2, [pc, #24]	; (80484 <SystemInit+0x9c>)
   8046a:	4b07      	ldr	r3, [pc, #28]	; (80488 <SystemInit+0xa0>)
   8046c:	601a      	str	r2, [r3, #0]
   8046e:	4770      	bx	lr
   80470:	400e0a00 	.word	0x400e0a00
   80474:	400e0600 	.word	0x400e0600
   80478:	00370809 	.word	0x00370809
   8047c:	01370809 	.word	0x01370809
   80480:	200d3f01 	.word	0x200d3f01
   80484:	0501bd00 	.word	0x0501bd00
   80488:	20000000 	.word	0x20000000

0008048c <main>:
#include "Servo_and _IR/PWM.h"


#define can_br 0x01141255 
int main(void)
{
   8048c:	b508      	push	{r3, lr}
    /* Initialize the SAM system */
    SystemInit();
   8048e:	4b0b      	ldr	r3, [pc, #44]	; (804bc <main+0x30>)
   80490:	4798      	blx	r3
	configure_uart();
   80492:	4b0b      	ldr	r3, [pc, #44]	; (804c0 <main+0x34>)
   80494:	4798      	blx	r3
	can_init_def_tx_rx_mb(can_br);
   80496:	480b      	ldr	r0, [pc, #44]	; (804c4 <main+0x38>)
   80498:	4b0b      	ldr	r3, [pc, #44]	; (804c8 <main+0x3c>)
   8049a:	4798      	blx	r3
	PWM_init();
   8049c:	4b0b      	ldr	r3, [pc, #44]	; (804cc <main+0x40>)
   8049e:	4798      	blx	r3
	
	
	WDT->WDT_MR = WDT_MR_WDDIS; // Disable WDT
   804a0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   804a4:	4b0a      	ldr	r3, [pc, #40]	; (804d0 <main+0x44>)
   804a6:	605a      	str	r2, [r3, #4]
	
	PIOA->PIO_OER = PIO_OER_P19 | PIO_OER_P20; // Output enable on PA19 and PA20
   804a8:	f5a3 6345 	sub.w	r3, r3, #3152	; 0xc50
   804ac:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
   804b0:	611a      	str	r2, [r3, #16]
	
	PIOA->PIO_SODR = PIO_SODR_P19; // | PIO_SODR_P20; // Set PA19 and PA20 high ( Turn on both leds ) 
   804b2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   804b6:	631a      	str	r2, [r3, #48]	; 0x30
   804b8:	e7fe      	b.n	804b8 <main+0x2c>
   804ba:	bf00      	nop
   804bc:	000803e9 	.word	0x000803e9
   804c0:	00080881 	.word	0x00080881
   804c4:	01141255 	.word	0x01141255
   804c8:	00080245 	.word	0x00080245
   804cc:	000804d5 	.word	0x000804d5
   804d0:	400e1a50 	.word	0x400e1a50

000804d4 <PWM_init>:
#include "PWM.h"

void PWM_init(void){
	
	//enable PWM in PMC
	PMC->PMC_PCER1 |= PMC_PCER1_PID36;
   804d4:	4a21      	ldr	r2, [pc, #132]	; (8055c <PWM_init+0x88>)
   804d6:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   804da:	f043 0310 	orr.w	r3, r3, #16
   804de:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
	
	//Select functionality of PIO-pis, on PC19 - (pin 44) and PC18 - (pin 45)
	//choosing PWM channel H5 and H6
	
	//PIO disable  
	PIOC->PIO_PDR |= PIO_PDR_P19;
   804e2:	4b1f      	ldr	r3, [pc, #124]	; (80560 <PWM_init+0x8c>)
   804e4:	685a      	ldr	r2, [r3, #4]
   804e6:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   804ea:	605a      	str	r2, [r3, #4]
	PIOC->PIO_PDR |= PIO_PDR_P18;	
   804ec:	685a      	ldr	r2, [r3, #4]
   804ee:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
   804f2:	605a      	str	r2, [r3, #4]
	
	//PWM peripheral select
	PIOC->PIO_ABSR |= PIO_ABSR_P19;
   804f4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   804f6:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   804fa:	671a      	str	r2, [r3, #112]	; 0x70
	PIOC->PIO_ABSR |= PIO_ABSR_P18;
   804fc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   804fe:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
   80502:	671a      	str	r2, [r3, #112]	; 0x70
	//Set PWM Clk = MCK = 84 Mhz
	 
	 
	//set channel mode
	// Set clk source = 656250 hz
	REG_PWM_CMR5 |= PWM_CMR_CPRE_MCK_DIV_128;
   80504:	4a17      	ldr	r2, [pc, #92]	; (80564 <PWM_init+0x90>)
   80506:	6813      	ldr	r3, [r2, #0]
   80508:	f043 0307 	orr.w	r3, r3, #7
   8050c:	6013      	str	r3, [r2, #0]
	REG_PWM_CMR6 |= PWM_CMR_CPRE_MCK_DIV_128;
   8050e:	3220      	adds	r2, #32
   80510:	6813      	ldr	r3, [r2, #0]
   80512:	f043 0307 	orr.w	r3, r3, #7
   80516:	6013      	str	r3, [r2, #0]
	


	//Set Period = CPRD/21 Mhz
	// CPRD = 0x3345 => T=20 ms
	REG_PWM_CPRD5 |= 0x3345;
   80518:	4b13      	ldr	r3, [pc, #76]	; (80568 <PWM_init+0x94>)
   8051a:	681a      	ldr	r2, [r3, #0]
   8051c:	f243 3145 	movw	r1, #13125	; 0x3345
   80520:	430a      	orrs	r2, r1
   80522:	601a      	str	r2, [r3, #0]
	REG_PWM_CPRD6 |= 0x3345;
   80524:	4a11      	ldr	r2, [pc, #68]	; (8056c <PWM_init+0x98>)
   80526:	6813      	ldr	r3, [r2, #0]
   80528:	430b      	orrs	r3, r1
   8052a:	6013      	str	r3, [r2, #0]
	
	//Set duty Cycle = 1 - CDTY/CPRD
	//CDTY = 0x30F5 => d =  0.9 ms
	//CDTY = 0x2DE2 => d =  2.1 ms
	
	REG_PWM_CDTY5 |= 0x30F5;
   8052c:	3a28      	subs	r2, #40	; 0x28
   8052e:	6813      	ldr	r3, [r2, #0]
   80530:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
   80534:	f043 0335 	orr.w	r3, r3, #53	; 0x35
   80538:	6013      	str	r3, [r2, #0]
	REG_PWM_CDTY6 |= 0x2DE2;
   8053a:	3220      	adds	r2, #32
   8053c:	6813      	ldr	r3, [r2, #0]
   8053e:	f443 5337 	orr.w	r3, r3, #11712	; 0x2dc0
   80542:	f043 0322 	orr.w	r3, r3, #34	; 0x22
   80546:	6013      	str	r3, [r2, #0]
	
	PWM->PWM_ENA |= PWM_ENA_CHID5;
   80548:	4b09      	ldr	r3, [pc, #36]	; (80570 <PWM_init+0x9c>)
   8054a:	685a      	ldr	r2, [r3, #4]
   8054c:	f042 0220 	orr.w	r2, r2, #32
   80550:	605a      	str	r2, [r3, #4]
	PWM->PWM_ENA |= PWM_ENA_CHID6;
   80552:	685a      	ldr	r2, [r3, #4]
   80554:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   80558:	605a      	str	r2, [r3, #4]
   8055a:	4770      	bx	lr
   8055c:	400e0600 	.word	0x400e0600
   80560:	400e1200 	.word	0x400e1200
   80564:	400942a0 	.word	0x400942a0
   80568:	400942ac 	.word	0x400942ac
   8056c:	400942cc 	.word	0x400942cc
   80570:	40094000 	.word	0x40094000

00080574 <PWM_update_dutycycle>:
	
}

void PWM_update_dutycycle(uint32_t percentage){
	
	REG_PWM_CDTYUPD5 = ((100 - percentage)*13124)/100;
   80574:	4b07      	ldr	r3, [pc, #28]	; (80594 <PWM_update_dutycycle+0x20>)
   80576:	fb03 f000 	mul.w	r0, r3, r0
   8057a:	f500 10a0 	add.w	r0, r0, #1310720	; 0x140000
   8057e:	f500 60d2 	add.w	r0, r0, #1680	; 0x690
   80582:	4b05      	ldr	r3, [pc, #20]	; (80598 <PWM_update_dutycycle+0x24>)
   80584:	fba3 3000 	umull	r3, r0, r3, r0
   80588:	0940      	lsrs	r0, r0, #5
   8058a:	4b04      	ldr	r3, [pc, #16]	; (8059c <PWM_update_dutycycle+0x28>)
   8058c:	6018      	str	r0, [r3, #0]

	REG_PWM_CDTYUPD6 = ((100 - percentage)*13124)/100;
   8058e:	3320      	adds	r3, #32
   80590:	6018      	str	r0, [r3, #0]
   80592:	4770      	bx	lr
   80594:	ffffccbc 	.word	0xffffccbc
   80598:	51eb851f 	.word	0x51eb851f
   8059c:	400942a8 	.word	0x400942a8

000805a0 <set_servo_posistion>:
 */ 

#include "servocontrol.h"


void set_servo_posistion(uint32_t joystick_percentage){
   805a0:	b510      	push	{r4, lr}
	
	uint32_t dutyCycle = joystick_percentage/20 + 5;
   805a2:	4c06      	ldr	r4, [pc, #24]	; (805bc <set_servo_posistion+0x1c>)
   805a4:	fba4 3400 	umull	r3, r4, r4, r0
   805a8:	0924      	lsrs	r4, r4, #4
   805aa:	3405      	adds	r4, #5
	
	printf("dutyculce %d \n\r", dutyCycle);
   805ac:	4621      	mov	r1, r4
   805ae:	4804      	ldr	r0, [pc, #16]	; (805c0 <set_servo_posistion+0x20>)
   805b0:	4b04      	ldr	r3, [pc, #16]	; (805c4 <set_servo_posistion+0x24>)
   805b2:	4798      	blx	r3
	
	
	PWM_update_dutycycle(dutyCycle);
   805b4:	4620      	mov	r0, r4
   805b6:	4b04      	ldr	r3, [pc, #16]	; (805c8 <set_servo_posistion+0x28>)
   805b8:	4798      	blx	r3
   805ba:	bd10      	pop	{r4, pc}
   805bc:	cccccccd 	.word	0xcccccccd
   805c0:	00080b24 	.word	0x00080b24
   805c4:	0008085d 	.word	0x0008085d
   805c8:	00080575 	.word	0x00080575

000805cc <printchar>:
   805cc:	b508      	push	{r3, lr}
   805ce:	b2c8      	uxtb	r0, r1
   805d0:	4b01      	ldr	r3, [pc, #4]	; (805d8 <printchar+0xc>)
   805d2:	4798      	blx	r3
   805d4:	bd08      	pop	{r3, pc}
   805d6:	bf00      	nop
   805d8:	000808e9 	.word	0x000808e9

000805dc <prints>:
   805dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   805e0:	4607      	mov	r7, r0
   805e2:	460e      	mov	r6, r1
   805e4:	1e15      	subs	r5, r2, #0
   805e6:	dd02      	ble.n	805ee <prints+0x12>
   805e8:	460a      	mov	r2, r1
   805ea:	2100      	movs	r1, #0
   805ec:	e004      	b.n	805f8 <prints+0x1c>
   805ee:	f04f 0820 	mov.w	r8, #32
   805f2:	e00e      	b.n	80612 <prints+0x36>
   805f4:	3101      	adds	r1, #1
   805f6:	3201      	adds	r2, #1
   805f8:	7810      	ldrb	r0, [r2, #0]
   805fa:	2800      	cmp	r0, #0
   805fc:	d1fa      	bne.n	805f4 <prints+0x18>
   805fe:	42a9      	cmp	r1, r5
   80600:	da01      	bge.n	80606 <prints+0x2a>
   80602:	1a6d      	subs	r5, r5, r1
   80604:	e000      	b.n	80608 <prints+0x2c>
   80606:	2500      	movs	r5, #0
   80608:	f013 0f02 	tst.w	r3, #2
   8060c:	d106      	bne.n	8061c <prints+0x40>
   8060e:	f04f 0820 	mov.w	r8, #32
   80612:	f013 0401 	ands.w	r4, r3, #1
   80616:	d00a      	beq.n	8062e <prints+0x52>
   80618:	2400      	movs	r4, #0
   8061a:	e010      	b.n	8063e <prints+0x62>
   8061c:	f04f 0830 	mov.w	r8, #48	; 0x30
   80620:	e7f7      	b.n	80612 <prints+0x36>
   80622:	4641      	mov	r1, r8
   80624:	4638      	mov	r0, r7
   80626:	4b0d      	ldr	r3, [pc, #52]	; (8065c <prints+0x80>)
   80628:	4798      	blx	r3
   8062a:	3401      	adds	r4, #1
   8062c:	3d01      	subs	r5, #1
   8062e:	2d00      	cmp	r5, #0
   80630:	dcf7      	bgt.n	80622 <prints+0x46>
   80632:	e004      	b.n	8063e <prints+0x62>
   80634:	4638      	mov	r0, r7
   80636:	4b09      	ldr	r3, [pc, #36]	; (8065c <prints+0x80>)
   80638:	4798      	blx	r3
   8063a:	3401      	adds	r4, #1
   8063c:	3601      	adds	r6, #1
   8063e:	7831      	ldrb	r1, [r6, #0]
   80640:	2900      	cmp	r1, #0
   80642:	d1f7      	bne.n	80634 <prints+0x58>
   80644:	e005      	b.n	80652 <prints+0x76>
   80646:	4641      	mov	r1, r8
   80648:	4638      	mov	r0, r7
   8064a:	4b04      	ldr	r3, [pc, #16]	; (8065c <prints+0x80>)
   8064c:	4798      	blx	r3
   8064e:	3401      	adds	r4, #1
   80650:	3d01      	subs	r5, #1
   80652:	2d00      	cmp	r5, #0
   80654:	dcf7      	bgt.n	80646 <prints+0x6a>
   80656:	4620      	mov	r0, r4
   80658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8065c:	000805cd 	.word	0x000805cd

00080660 <printi>:
   80660:	b5f0      	push	{r4, r5, r6, r7, lr}
   80662:	b085      	sub	sp, #20
   80664:	4607      	mov	r7, r0
   80666:	980c      	ldr	r0, [sp, #48]	; 0x30
   80668:	b151      	cbz	r1, 80680 <printi+0x20>
   8066a:	461e      	mov	r6, r3
   8066c:	460c      	mov	r4, r1
   8066e:	b113      	cbz	r3, 80676 <printi+0x16>
   80670:	2a0a      	cmp	r2, #10
   80672:	d012      	beq.n	8069a <printi+0x3a>
   80674:	2600      	movs	r6, #0
   80676:	ad04      	add	r5, sp, #16
   80678:	2300      	movs	r3, #0
   8067a:	f805 3d01 	strb.w	r3, [r5, #-1]!
   8067e:	e018      	b.n	806b2 <printi+0x52>
   80680:	2330      	movs	r3, #48	; 0x30
   80682:	f88d 3004 	strb.w	r3, [sp, #4]
   80686:	2300      	movs	r3, #0
   80688:	f88d 3005 	strb.w	r3, [sp, #5]
   8068c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8068e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   80690:	a901      	add	r1, sp, #4
   80692:	4638      	mov	r0, r7
   80694:	4c1b      	ldr	r4, [pc, #108]	; (80704 <printi+0xa4>)
   80696:	47a0      	blx	r4
   80698:	e029      	b.n	806ee <printi+0x8e>
   8069a:	2900      	cmp	r1, #0
   8069c:	db01      	blt.n	806a2 <printi+0x42>
   8069e:	2600      	movs	r6, #0
   806a0:	e7e9      	b.n	80676 <printi+0x16>
   806a2:	424c      	negs	r4, r1
   806a4:	2601      	movs	r6, #1
   806a6:	e7e6      	b.n	80676 <printi+0x16>
   806a8:	3330      	adds	r3, #48	; 0x30
   806aa:	f805 3d01 	strb.w	r3, [r5, #-1]!
   806ae:	fbb4 f4f2 	udiv	r4, r4, r2
   806b2:	b14c      	cbz	r4, 806c8 <printi+0x68>
   806b4:	fbb4 f3f2 	udiv	r3, r4, r2
   806b8:	fb02 4313 	mls	r3, r2, r3, r4
   806bc:	2b09      	cmp	r3, #9
   806be:	ddf3      	ble.n	806a8 <printi+0x48>
   806c0:	f1a0 013a 	sub.w	r1, r0, #58	; 0x3a
   806c4:	440b      	add	r3, r1
   806c6:	e7ef      	b.n	806a8 <printi+0x48>
   806c8:	b156      	cbz	r6, 806e0 <printi+0x80>
   806ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   806cc:	b11b      	cbz	r3, 806d6 <printi+0x76>
   806ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   806d0:	f013 0f02 	tst.w	r3, #2
   806d4:	d10d      	bne.n	806f2 <printi+0x92>
   806d6:	232d      	movs	r3, #45	; 0x2d
   806d8:	f805 3c01 	strb.w	r3, [r5, #-1]
   806dc:	3d01      	subs	r5, #1
   806de:	2600      	movs	r6, #0
   806e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   806e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   806e4:	4629      	mov	r1, r5
   806e6:	4638      	mov	r0, r7
   806e8:	4c06      	ldr	r4, [pc, #24]	; (80704 <printi+0xa4>)
   806ea:	47a0      	blx	r4
   806ec:	4430      	add	r0, r6
   806ee:	b005      	add	sp, #20
   806f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   806f2:	212d      	movs	r1, #45	; 0x2d
   806f4:	4638      	mov	r0, r7
   806f6:	4b04      	ldr	r3, [pc, #16]	; (80708 <printi+0xa8>)
   806f8:	4798      	blx	r3
   806fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   806fc:	3b01      	subs	r3, #1
   806fe:	930a      	str	r3, [sp, #40]	; 0x28
   80700:	e7ee      	b.n	806e0 <printi+0x80>
   80702:	bf00      	nop
   80704:	000805dd 	.word	0x000805dd
   80708:	000805cd 	.word	0x000805cd

0008070c <print>:
   8070c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8070e:	b089      	sub	sp, #36	; 0x24
   80710:	4606      	mov	r6, r0
   80712:	460c      	mov	r4, r1
   80714:	9205      	str	r2, [sp, #20]
   80716:	2500      	movs	r5, #0
   80718:	e081      	b.n	8081e <print+0x112>
   8071a:	1ca2      	adds	r2, r4, #2
   8071c:	2301      	movs	r3, #1
   8071e:	e08b      	b.n	80838 <print+0x12c>
   80720:	3401      	adds	r4, #1
   80722:	f043 0302 	orr.w	r3, r3, #2
   80726:	7822      	ldrb	r2, [r4, #0]
   80728:	2a30      	cmp	r2, #48	; 0x30
   8072a:	d0f9      	beq.n	80720 <print+0x14>
   8072c:	2200      	movs	r2, #0
   8072e:	e006      	b.n	8073e <print+0x32>
   80730:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   80734:	0050      	lsls	r0, r2, #1
   80736:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   8073a:	4402      	add	r2, r0
   8073c:	3401      	adds	r4, #1
   8073e:	7821      	ldrb	r1, [r4, #0]
   80740:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
   80744:	b2c0      	uxtb	r0, r0
   80746:	2809      	cmp	r0, #9
   80748:	d9f2      	bls.n	80730 <print+0x24>
   8074a:	2973      	cmp	r1, #115	; 0x73
   8074c:	d018      	beq.n	80780 <print+0x74>
   8074e:	2964      	cmp	r1, #100	; 0x64
   80750:	d022      	beq.n	80798 <print+0x8c>
   80752:	2978      	cmp	r1, #120	; 0x78
   80754:	d02f      	beq.n	807b6 <print+0xaa>
   80756:	2958      	cmp	r1, #88	; 0x58
   80758:	d03c      	beq.n	807d4 <print+0xc8>
   8075a:	2975      	cmp	r1, #117	; 0x75
   8075c:	d049      	beq.n	807f2 <print+0xe6>
   8075e:	2963      	cmp	r1, #99	; 0x63
   80760:	d15c      	bne.n	8081c <print+0x110>
   80762:	9905      	ldr	r1, [sp, #20]
   80764:	1d08      	adds	r0, r1, #4
   80766:	9005      	str	r0, [sp, #20]
   80768:	7809      	ldrb	r1, [r1, #0]
   8076a:	f88d 101c 	strb.w	r1, [sp, #28]
   8076e:	2100      	movs	r1, #0
   80770:	f88d 101d 	strb.w	r1, [sp, #29]
   80774:	a907      	add	r1, sp, #28
   80776:	4630      	mov	r0, r6
   80778:	4f34      	ldr	r7, [pc, #208]	; (8084c <print+0x140>)
   8077a:	47b8      	blx	r7
   8077c:	4405      	add	r5, r0
   8077e:	e04d      	b.n	8081c <print+0x110>
   80780:	9905      	ldr	r1, [sp, #20]
   80782:	1d08      	adds	r0, r1, #4
   80784:	9005      	str	r0, [sp, #20]
   80786:	6809      	ldr	r1, [r1, #0]
   80788:	b121      	cbz	r1, 80794 <print+0x88>
   8078a:	4630      	mov	r0, r6
   8078c:	4f2f      	ldr	r7, [pc, #188]	; (8084c <print+0x140>)
   8078e:	47b8      	blx	r7
   80790:	4405      	add	r5, r0
   80792:	e043      	b.n	8081c <print+0x110>
   80794:	492e      	ldr	r1, [pc, #184]	; (80850 <print+0x144>)
   80796:	e7f8      	b.n	8078a <print+0x7e>
   80798:	9905      	ldr	r1, [sp, #20]
   8079a:	1d08      	adds	r0, r1, #4
   8079c:	9005      	str	r0, [sp, #20]
   8079e:	6809      	ldr	r1, [r1, #0]
   807a0:	2061      	movs	r0, #97	; 0x61
   807a2:	9002      	str	r0, [sp, #8]
   807a4:	9301      	str	r3, [sp, #4]
   807a6:	9200      	str	r2, [sp, #0]
   807a8:	2301      	movs	r3, #1
   807aa:	220a      	movs	r2, #10
   807ac:	4630      	mov	r0, r6
   807ae:	4f29      	ldr	r7, [pc, #164]	; (80854 <print+0x148>)
   807b0:	47b8      	blx	r7
   807b2:	4405      	add	r5, r0
   807b4:	e032      	b.n	8081c <print+0x110>
   807b6:	9905      	ldr	r1, [sp, #20]
   807b8:	1d08      	adds	r0, r1, #4
   807ba:	9005      	str	r0, [sp, #20]
   807bc:	6809      	ldr	r1, [r1, #0]
   807be:	2061      	movs	r0, #97	; 0x61
   807c0:	9002      	str	r0, [sp, #8]
   807c2:	9301      	str	r3, [sp, #4]
   807c4:	9200      	str	r2, [sp, #0]
   807c6:	2300      	movs	r3, #0
   807c8:	2210      	movs	r2, #16
   807ca:	4630      	mov	r0, r6
   807cc:	4f21      	ldr	r7, [pc, #132]	; (80854 <print+0x148>)
   807ce:	47b8      	blx	r7
   807d0:	4405      	add	r5, r0
   807d2:	e023      	b.n	8081c <print+0x110>
   807d4:	9905      	ldr	r1, [sp, #20]
   807d6:	1d08      	adds	r0, r1, #4
   807d8:	9005      	str	r0, [sp, #20]
   807da:	6809      	ldr	r1, [r1, #0]
   807dc:	2041      	movs	r0, #65	; 0x41
   807de:	9002      	str	r0, [sp, #8]
   807e0:	9301      	str	r3, [sp, #4]
   807e2:	9200      	str	r2, [sp, #0]
   807e4:	2300      	movs	r3, #0
   807e6:	2210      	movs	r2, #16
   807e8:	4630      	mov	r0, r6
   807ea:	4f1a      	ldr	r7, [pc, #104]	; (80854 <print+0x148>)
   807ec:	47b8      	blx	r7
   807ee:	4405      	add	r5, r0
   807f0:	e014      	b.n	8081c <print+0x110>
   807f2:	9905      	ldr	r1, [sp, #20]
   807f4:	1d08      	adds	r0, r1, #4
   807f6:	9005      	str	r0, [sp, #20]
   807f8:	6809      	ldr	r1, [r1, #0]
   807fa:	2061      	movs	r0, #97	; 0x61
   807fc:	9002      	str	r0, [sp, #8]
   807fe:	9301      	str	r3, [sp, #4]
   80800:	9200      	str	r2, [sp, #0]
   80802:	2300      	movs	r3, #0
   80804:	220a      	movs	r2, #10
   80806:	4630      	mov	r0, r6
   80808:	4f12      	ldr	r7, [pc, #72]	; (80854 <print+0x148>)
   8080a:	47b8      	blx	r7
   8080c:	4405      	add	r5, r0
   8080e:	e005      	b.n	8081c <print+0x110>
   80810:	4614      	mov	r4, r2
   80812:	7821      	ldrb	r1, [r4, #0]
   80814:	4630      	mov	r0, r6
   80816:	4b10      	ldr	r3, [pc, #64]	; (80858 <print+0x14c>)
   80818:	4798      	blx	r3
   8081a:	3501      	adds	r5, #1
   8081c:	3401      	adds	r4, #1
   8081e:	7823      	ldrb	r3, [r4, #0]
   80820:	b163      	cbz	r3, 8083c <print+0x130>
   80822:	2b25      	cmp	r3, #37	; 0x25
   80824:	d1f5      	bne.n	80812 <print+0x106>
   80826:	1c62      	adds	r2, r4, #1
   80828:	7863      	ldrb	r3, [r4, #1]
   8082a:	b13b      	cbz	r3, 8083c <print+0x130>
   8082c:	2b25      	cmp	r3, #37	; 0x25
   8082e:	d0ef      	beq.n	80810 <print+0x104>
   80830:	2b2d      	cmp	r3, #45	; 0x2d
   80832:	f43f af72 	beq.w	8071a <print+0xe>
   80836:	2300      	movs	r3, #0
   80838:	4614      	mov	r4, r2
   8083a:	e774      	b.n	80726 <print+0x1a>
   8083c:	b116      	cbz	r6, 80844 <print+0x138>
   8083e:	6833      	ldr	r3, [r6, #0]
   80840:	2200      	movs	r2, #0
   80842:	701a      	strb	r2, [r3, #0]
   80844:	4628      	mov	r0, r5
   80846:	b009      	add	sp, #36	; 0x24
   80848:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8084a:	bf00      	nop
   8084c:	000805dd 	.word	0x000805dd
   80850:	00080b34 	.word	0x00080b34
   80854:	00080661 	.word	0x00080661
   80858:	000805cd 	.word	0x000805cd

0008085c <printf>:
   8085c:	b40f      	push	{r0, r1, r2, r3}
   8085e:	b500      	push	{lr}
   80860:	b083      	sub	sp, #12
   80862:	aa04      	add	r2, sp, #16
   80864:	f852 1b04 	ldr.w	r1, [r2], #4
   80868:	9201      	str	r2, [sp, #4]
   8086a:	2000      	movs	r0, #0
   8086c:	4b03      	ldr	r3, [pc, #12]	; (8087c <printf+0x20>)
   8086e:	4798      	blx	r3
   80870:	b003      	add	sp, #12
   80872:	f85d eb04 	ldr.w	lr, [sp], #4
   80876:	b004      	add	sp, #16
   80878:	4770      	bx	lr
   8087a:	bf00      	nop
   8087c:	0008070d 	.word	0x0008070d

00080880 <configure_uart>:
   80880:	4b16      	ldr	r3, [pc, #88]	; (808dc <configure_uart+0x5c>)
   80882:	2200      	movs	r2, #0
   80884:	701a      	strb	r2, [r3, #0]
   80886:	705a      	strb	r2, [r3, #1]
   80888:	4b15      	ldr	r3, [pc, #84]	; (808e0 <configure_uart+0x60>)
   8088a:	f44f 7140 	mov.w	r1, #768	; 0x300
   8088e:	6459      	str	r1, [r3, #68]	; 0x44
   80890:	6059      	str	r1, [r3, #4]
   80892:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80894:	6f18      	ldr	r0, [r3, #112]	; 0x70
   80896:	4002      	ands	r2, r0
   80898:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   8089c:	671a      	str	r2, [r3, #112]	; 0x70
   8089e:	6659      	str	r1, [r3, #100]	; 0x64
   808a0:	f44f 7280 	mov.w	r2, #256	; 0x100
   808a4:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   808a8:	611a      	str	r2, [r3, #16]
   808aa:	f503 7300 	add.w	r3, r3, #512	; 0x200
   808ae:	21ac      	movs	r1, #172	; 0xac
   808b0:	6019      	str	r1, [r3, #0]
   808b2:	f240 2123 	movw	r1, #547	; 0x223
   808b6:	6219      	str	r1, [r3, #32]
   808b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
   808bc:	6059      	str	r1, [r3, #4]
   808be:	f240 2102 	movw	r1, #514	; 0x202
   808c2:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   808c6:	f04f 31ff 	mov.w	r1, #4294967295
   808ca:	60d9      	str	r1, [r3, #12]
   808cc:	21e1      	movs	r1, #225	; 0xe1
   808ce:	6099      	str	r1, [r3, #8]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   808d0:	4904      	ldr	r1, [pc, #16]	; (808e4 <configure_uart+0x64>)
   808d2:	600a      	str	r2, [r1, #0]
   808d4:	2250      	movs	r2, #80	; 0x50
   808d6:	601a      	str	r2, [r3, #0]
   808d8:	4770      	bx	lr
   808da:	bf00      	nop
   808dc:	20000450 	.word	0x20000450
   808e0:	400e0e00 	.word	0x400e0e00
   808e4:	e000e100 	.word	0xe000e100

000808e8 <uart_putchar>:
   808e8:	4b07      	ldr	r3, [pc, #28]	; (80908 <uart_putchar+0x20>)
   808ea:	695b      	ldr	r3, [r3, #20]
   808ec:	f013 0f02 	tst.w	r3, #2
   808f0:	d008      	beq.n	80904 <uart_putchar+0x1c>
   808f2:	4b05      	ldr	r3, [pc, #20]	; (80908 <uart_putchar+0x20>)
   808f4:	61d8      	str	r0, [r3, #28]
   808f6:	4b04      	ldr	r3, [pc, #16]	; (80908 <uart_putchar+0x20>)
   808f8:	695b      	ldr	r3, [r3, #20]
   808fa:	f413 7f00 	tst.w	r3, #512	; 0x200
   808fe:	d0fa      	beq.n	808f6 <uart_putchar+0xe>
   80900:	2000      	movs	r0, #0
   80902:	4770      	bx	lr
   80904:	2001      	movs	r0, #1
   80906:	4770      	bx	lr
   80908:	400e0800 	.word	0x400e0800

0008090c <UART_Handler>:
   8090c:	b508      	push	{r3, lr}
   8090e:	4b15      	ldr	r3, [pc, #84]	; (80964 <UART_Handler+0x58>)
   80910:	695b      	ldr	r3, [r3, #20]
   80912:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   80916:	d003      	beq.n	80920 <UART_Handler+0x14>
   80918:	f44f 71a8 	mov.w	r1, #336	; 0x150
   8091c:	4a11      	ldr	r2, [pc, #68]	; (80964 <UART_Handler+0x58>)
   8091e:	6011      	str	r1, [r2, #0]
   80920:	f013 0f01 	tst.w	r3, #1
   80924:	d012      	beq.n	8094c <UART_Handler+0x40>
   80926:	4810      	ldr	r0, [pc, #64]	; (80968 <UART_Handler+0x5c>)
   80928:	7842      	ldrb	r2, [r0, #1]
   8092a:	1c53      	adds	r3, r2, #1
   8092c:	4259      	negs	r1, r3
   8092e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   80932:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   80936:	bf58      	it	pl
   80938:	424b      	negpl	r3, r1
   8093a:	7801      	ldrb	r1, [r0, #0]
   8093c:	428b      	cmp	r3, r1
   8093e:	d006      	beq.n	8094e <UART_Handler+0x42>
   80940:	4908      	ldr	r1, [pc, #32]	; (80964 <UART_Handler+0x58>)
   80942:	6988      	ldr	r0, [r1, #24]
   80944:	4908      	ldr	r1, [pc, #32]	; (80968 <UART_Handler+0x5c>)
   80946:	440a      	add	r2, r1
   80948:	7090      	strb	r0, [r2, #2]
   8094a:	704b      	strb	r3, [r1, #1]
   8094c:	bd08      	pop	{r3, pc}
   8094e:	4807      	ldr	r0, [pc, #28]	; (8096c <UART_Handler+0x60>)
   80950:	4b07      	ldr	r3, [pc, #28]	; (80970 <UART_Handler+0x64>)
   80952:	4798      	blx	r3
   80954:	4b04      	ldr	r3, [pc, #16]	; (80968 <UART_Handler+0x5c>)
   80956:	7859      	ldrb	r1, [r3, #1]
   80958:	4a02      	ldr	r2, [pc, #8]	; (80964 <UART_Handler+0x58>)
   8095a:	6992      	ldr	r2, [r2, #24]
   8095c:	440b      	add	r3, r1
   8095e:	709a      	strb	r2, [r3, #2]
   80960:	bd08      	pop	{r3, pc}
   80962:	bf00      	nop
   80964:	400e0800 	.word	0x400e0800
   80968:	20000450 	.word	0x20000450
   8096c:	00080b3c 	.word	0x00080b3c
   80970:	0008085d 	.word	0x0008085d

00080974 <__libc_init_array>:
   80974:	b570      	push	{r4, r5, r6, lr}
   80976:	4e0f      	ldr	r6, [pc, #60]	; (809b4 <__libc_init_array+0x40>)
   80978:	4d0f      	ldr	r5, [pc, #60]	; (809b8 <__libc_init_array+0x44>)
   8097a:	1b76      	subs	r6, r6, r5
   8097c:	10b6      	asrs	r6, r6, #2
   8097e:	bf18      	it	ne
   80980:	2400      	movne	r4, #0
   80982:	d005      	beq.n	80990 <__libc_init_array+0x1c>
   80984:	3401      	adds	r4, #1
   80986:	f855 3b04 	ldr.w	r3, [r5], #4
   8098a:	4798      	blx	r3
   8098c:	42a6      	cmp	r6, r4
   8098e:	d1f9      	bne.n	80984 <__libc_init_array+0x10>
   80990:	4e0a      	ldr	r6, [pc, #40]	; (809bc <__libc_init_array+0x48>)
   80992:	4d0b      	ldr	r5, [pc, #44]	; (809c0 <__libc_init_array+0x4c>)
   80994:	f000 f8e4 	bl	80b60 <_init>
   80998:	1b76      	subs	r6, r6, r5
   8099a:	10b6      	asrs	r6, r6, #2
   8099c:	bf18      	it	ne
   8099e:	2400      	movne	r4, #0
   809a0:	d006      	beq.n	809b0 <__libc_init_array+0x3c>
   809a2:	3401      	adds	r4, #1
   809a4:	f855 3b04 	ldr.w	r3, [r5], #4
   809a8:	4798      	blx	r3
   809aa:	42a6      	cmp	r6, r4
   809ac:	d1f9      	bne.n	809a2 <__libc_init_array+0x2e>
   809ae:	bd70      	pop	{r4, r5, r6, pc}
   809b0:	bd70      	pop	{r4, r5, r6, pc}
   809b2:	bf00      	nop
   809b4:	00080b6c 	.word	0x00080b6c
   809b8:	00080b6c 	.word	0x00080b6c
   809bc:	00080b74 	.word	0x00080b74
   809c0:	00080b6c 	.word	0x00080b6c

000809c4 <register_fini>:
   809c4:	4b02      	ldr	r3, [pc, #8]	; (809d0 <register_fini+0xc>)
   809c6:	b113      	cbz	r3, 809ce <register_fini+0xa>
   809c8:	4802      	ldr	r0, [pc, #8]	; (809d4 <register_fini+0x10>)
   809ca:	f000 b805 	b.w	809d8 <atexit>
   809ce:	4770      	bx	lr
   809d0:	00000000 	.word	0x00000000
   809d4:	000809e5 	.word	0x000809e5

000809d8 <atexit>:
   809d8:	2300      	movs	r3, #0
   809da:	4601      	mov	r1, r0
   809dc:	461a      	mov	r2, r3
   809de:	4618      	mov	r0, r3
   809e0:	f000 b81e 	b.w	80a20 <__register_exitproc>

000809e4 <__libc_fini_array>:
   809e4:	b538      	push	{r3, r4, r5, lr}
   809e6:	4c0a      	ldr	r4, [pc, #40]	; (80a10 <__libc_fini_array+0x2c>)
   809e8:	4d0a      	ldr	r5, [pc, #40]	; (80a14 <__libc_fini_array+0x30>)
   809ea:	1b64      	subs	r4, r4, r5
   809ec:	10a4      	asrs	r4, r4, #2
   809ee:	d00a      	beq.n	80a06 <__libc_fini_array+0x22>
   809f0:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   809f4:	3b01      	subs	r3, #1
   809f6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   809fa:	3c01      	subs	r4, #1
   809fc:	f855 3904 	ldr.w	r3, [r5], #-4
   80a00:	4798      	blx	r3
   80a02:	2c00      	cmp	r4, #0
   80a04:	d1f9      	bne.n	809fa <__libc_fini_array+0x16>
   80a06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   80a0a:	f000 b8b3 	b.w	80b74 <_fini>
   80a0e:	bf00      	nop
   80a10:	00080b84 	.word	0x00080b84
   80a14:	00080b80 	.word	0x00080b80

00080a18 <__retarget_lock_acquire_recursive>:
   80a18:	4770      	bx	lr
   80a1a:	bf00      	nop

00080a1c <__retarget_lock_release_recursive>:
   80a1c:	4770      	bx	lr
   80a1e:	bf00      	nop

00080a20 <__register_exitproc>:
   80a20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80a24:	4d2c      	ldr	r5, [pc, #176]	; (80ad8 <__register_exitproc+0xb8>)
   80a26:	4606      	mov	r6, r0
   80a28:	6828      	ldr	r0, [r5, #0]
   80a2a:	4698      	mov	r8, r3
   80a2c:	460f      	mov	r7, r1
   80a2e:	4691      	mov	r9, r2
   80a30:	f7ff fff2 	bl	80a18 <__retarget_lock_acquire_recursive>
   80a34:	4b29      	ldr	r3, [pc, #164]	; (80adc <__register_exitproc+0xbc>)
   80a36:	681c      	ldr	r4, [r3, #0]
   80a38:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   80a3c:	2b00      	cmp	r3, #0
   80a3e:	d03e      	beq.n	80abe <__register_exitproc+0x9e>
   80a40:	685a      	ldr	r2, [r3, #4]
   80a42:	2a1f      	cmp	r2, #31
   80a44:	dc1c      	bgt.n	80a80 <__register_exitproc+0x60>
   80a46:	f102 0e01 	add.w	lr, r2, #1
   80a4a:	b176      	cbz	r6, 80a6a <__register_exitproc+0x4a>
   80a4c:	2101      	movs	r1, #1
   80a4e:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   80a52:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   80a56:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   80a5a:	4091      	lsls	r1, r2
   80a5c:	4308      	orrs	r0, r1
   80a5e:	2e02      	cmp	r6, #2
   80a60:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   80a64:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   80a68:	d023      	beq.n	80ab2 <__register_exitproc+0x92>
   80a6a:	3202      	adds	r2, #2
   80a6c:	f8c3 e004 	str.w	lr, [r3, #4]
   80a70:	6828      	ldr	r0, [r5, #0]
   80a72:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   80a76:	f7ff ffd1 	bl	80a1c <__retarget_lock_release_recursive>
   80a7a:	2000      	movs	r0, #0
   80a7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80a80:	4b17      	ldr	r3, [pc, #92]	; (80ae0 <__register_exitproc+0xc0>)
   80a82:	b30b      	cbz	r3, 80ac8 <__register_exitproc+0xa8>
   80a84:	f44f 70c8 	mov.w	r0, #400	; 0x190
   80a88:	f3af 8000 	nop.w
   80a8c:	4603      	mov	r3, r0
   80a8e:	b1d8      	cbz	r0, 80ac8 <__register_exitproc+0xa8>
   80a90:	2000      	movs	r0, #0
   80a92:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   80a96:	f04f 0e01 	mov.w	lr, #1
   80a9a:	6058      	str	r0, [r3, #4]
   80a9c:	6019      	str	r1, [r3, #0]
   80a9e:	4602      	mov	r2, r0
   80aa0:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   80aa4:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   80aa8:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   80aac:	2e00      	cmp	r6, #0
   80aae:	d0dc      	beq.n	80a6a <__register_exitproc+0x4a>
   80ab0:	e7cc      	b.n	80a4c <__register_exitproc+0x2c>
   80ab2:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   80ab6:	4301      	orrs	r1, r0
   80ab8:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   80abc:	e7d5      	b.n	80a6a <__register_exitproc+0x4a>
   80abe:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   80ac2:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   80ac6:	e7bb      	b.n	80a40 <__register_exitproc+0x20>
   80ac8:	6828      	ldr	r0, [r5, #0]
   80aca:	f7ff ffa7 	bl	80a1c <__retarget_lock_release_recursive>
   80ace:	f04f 30ff 	mov.w	r0, #4294967295
   80ad2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80ad6:	bf00      	nop
   80ad8:	20000430 	.word	0x20000430
   80adc:	00080b5c 	.word	0x00080b5c
   80ae0:	00000000 	.word	0x00000000
   80ae4:	61746164 	.word	0x61746164
   80ae8:	5d64255b 	.word	0x5d64255b
   80aec:	25203a20 	.word	0x25203a20
   80af0:	0d0a2064 	.word	0x0d0a2064
   80af4:	00000000 	.word	0x00000000
   80af8:	304e4143 	.word	0x304e4143
   80afc:	73656d20 	.word	0x73656d20
   80b00:	65676173 	.word	0x65676173
   80b04:	72726120 	.word	0x72726120
   80b08:	64657669 	.word	0x64657669
   80b0c:	206e6920 	.word	0x206e6920
   80b10:	2d6e6f6e 	.word	0x2d6e6f6e
   80b14:	64657375 	.word	0x64657375
   80b18:	69616d20 	.word	0x69616d20
   80b1c:	786f626c 	.word	0x786f626c
   80b20:	00000d0a 	.word	0x00000d0a
   80b24:	79747564 	.word	0x79747564
   80b28:	636c7563 	.word	0x636c7563
   80b2c:	64252065 	.word	0x64252065
   80b30:	000d0a20 	.word	0x000d0a20
   80b34:	6c756e28 	.word	0x6c756e28
   80b38:	0000296c 	.word	0x0000296c
   80b3c:	3a525245 	.word	0x3a525245
   80b40:	52415520 	.word	0x52415520
   80b44:	58522054 	.word	0x58522054
   80b48:	66756220 	.word	0x66756220
   80b4c:	20726566 	.word	0x20726566
   80b50:	66207369 	.word	0x66207369
   80b54:	0a6c6c75 	.word	0x0a6c6c75
   80b58:	0000000d 	.word	0x0000000d

00080b5c <_global_impure_ptr>:
   80b5c:	20000008                                ... 

00080b60 <_init>:
   80b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80b62:	bf00      	nop
   80b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
   80b66:	bc08      	pop	{r3}
   80b68:	469e      	mov	lr, r3
   80b6a:	4770      	bx	lr

00080b6c <__init_array_start>:
   80b6c:	000809c5 	.word	0x000809c5

00080b70 <__frame_dummy_init_array_entry>:
   80b70:	00080119                                ....

00080b74 <_fini>:
   80b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80b76:	bf00      	nop
   80b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
   80b7a:	bc08      	pop	{r3}
   80b7c:	469e      	mov	lr, r3
   80b7e:	4770      	bx	lr

00080b80 <__fini_array_start>:
   80b80:	000800f5 	.word	0x000800f5
